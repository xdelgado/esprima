{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 3cab053879d30ffcdd2c","webpack:///./src/esprima.ts","webpack:///./src ^\\.\\/.*$","webpack:///./src/assert.ts","webpack:///./src/character.ts","webpack:///./src/comment-handler.ts","webpack:///./src/syntax.ts","webpack:///./src/error-handler.ts","webpack:///./src/jsx-nodes.ts","webpack:///./src/jsx-syntax.ts","webpack:///./src/jsx-parser.ts","webpack:///./src/nodes.ts","webpack:///./src/parser.ts","webpack:///./src/scanner.ts","webpack:///./src/messages.ts","webpack:///./src/token.ts","webpack:///./src/xhtml-entities.ts","webpack:///./src/tokenizer.ts"],"names":[],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,CAAC;AACD,O;ACVA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;;;;;;;;;;;;;;;;;;;;;GAsBE;;;;;;;;;;;;KAEF,uDAAmD;KACnD,6CAAyC;KACzC,qCAAkC;KAClC,2CAAwC;KAExC,eAAsB,IAAY,EAAE,OAAO,EAAE,QAAQ;SACjD,IAAI,cAAc,GAA0B,IAAI,CAAC;SACjD,MAAM,aAAa,GAAG,CAAC,IAAI,EAAE,QAAQ,EAAE,EAAE;aACrC,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACX,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aAC7B,CAAC;aACD,EAAE,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC;iBACjB,cAAc,CAAC,KAAK,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aACzC,CAAC;SACL,CAAC,CAAC;SAEF,IAAI,cAAc,GAAG,CAAC,OAAO,QAAQ,KAAK,UAAU,CAAC,CAAC,CAAC,CAAC,aAAa,CAAC,CAAC,CAAC,IAAI,CAAC;SAC7E,IAAI,cAAc,GAAG,KAAK,CAAC;SAC3B,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;aACV,cAAc,GAAG,CAAC,OAAO,OAAO,CAAC,OAAO,KAAK,SAAS,IAAI,OAAO,CAAC,OAAO,CAAC,CAAC;aAC3E,MAAM,aAAa,GAAG,CAAC,OAAO,OAAO,CAAC,aAAa,KAAK,SAAS,IAAI,OAAO,CAAC,aAAa,CAAC,CAAC;aAC5F,EAAE,CAAC,CAAC,cAAc,IAAI,aAAa,CAAC,CAAC,CAAC;iBAClC,cAAc,GAAG,IAAI,gCAAc,EAAE,CAAC;iBACtC,cAAc,CAAC,MAAM,GAAG,aAAa,CAAC;iBACtC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;iBACvB,cAAc,GAAG,aAAa,CAAC;aACnC,CAAC;SACL,CAAC;SAED,IAAI,QAAQ,GAAG,KAAK,CAAC;SACrB,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,OAAO,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC;aACpD,QAAQ,GAAG,CAAC,OAAO,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC;SACjD,CAAC;SAED,IAAI,MAAc,CAAC;SACnB,EAAE,CAAC,CAAC,OAAO,IAAI,OAAO,OAAO,CAAC,GAAG,KAAK,SAAS,IAAI,OAAO,CAAC,GAAG,CAAC,CAAC,CAAC;aAC7D,MAAM,GAAG,IAAI,sBAAS,CAAC,IAAI,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;SAC1D,CAAC;SAAC,IAAI,CAAC,CAAC;aACJ,MAAM,GAAG,IAAI,eAAM,CAAC,IAAI,EAAE,OAAO,EAAE,cAAc,CAAC,CAAC;SACvD,CAAC;SAED,MAAM,OAAO,GAAG,QAAQ,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,WAAW,EAAE,CAAC;SACvE,MAAM,GAAG,GAAG,OAAc,CAAC;SAE3B,EAAE,CAAC,CAAC,cAAc,IAAI,cAAc,CAAC,CAAC,CAAC;aACnC,GAAG,CAAC,QAAQ,GAAG,cAAc,CAAC,QAAQ,CAAC;SAC3C,CAAC;SACD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;aACvB,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,MAAM,CAAC;SAC/B,CAAC;SACD,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;aACzB,GAAG,CAAC,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,MAAM,CAAC;SAC5C,CAAC;SAED,MAAM,CAAC,GAAG,CAAC;KACf,CAAC;KAlDD,sBAkDC;KAED,qBAA4B,IAAY,EAAE,OAAO,EAAE,QAAQ;SACvD,MAAM,cAAc,GAAG,OAAO,IAAI,EAAE,CAAC;SACrC,cAAc,CAAC,UAAU,GAAG,QAAQ,CAAC;SACrC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;KACjD,CAAC;KAJD,kCAIC;KAED,qBAA4B,IAAY,EAAE,OAAO,EAAE,QAAQ;SACvD,MAAM,cAAc,GAAG,OAAO,IAAI,EAAE,CAAC;SACrC,cAAc,CAAC,UAAU,GAAG,QAAQ,CAAC;SACrC,MAAM,CAAC,KAAK,CAAC,IAAI,EAAE,cAAc,EAAE,QAAQ,CAAC,CAAC;KACjD,CAAC;KAJD,kCAIC;KAED,kBAAyB,IAAY,EAAE,OAAO,EAAE,QAAQ;SACpD,MAAM,SAAS,GAAG,IAAI,qBAAS,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;SAE/C,IAAI,MAAM,CAAC;SACX,MAAM,GAAG,EAAE,CAAC;SAEZ,IAAI,CAAC;aACD,OAAO,IAAI,EAAE,CAAC;iBACV,IAAI,KAAK,GAAG,SAAS,CAAC,YAAY,EAAE,CAAC;iBACrC,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;qBACT,KAAK,CAAC;iBACV,CAAC;iBACD,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;qBACX,KAAK,GAAG,QAAQ,CAAC,KAAK,CAAC,CAAC;iBAC5B,CAAC;iBACD,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACvB,CAAC;SACL,CAAC;SAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACT,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;SACvC,CAAC;SAED,EAAE,CAAC,CAAC,SAAS,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;aAClC,MAAM,CAAC,MAAM,GAAG,SAAS,CAAC,MAAM,EAAE,CAAC;SACvC,CAAC;SAED,MAAM,CAAC,MAAM,CAAC;KAClB,CAAC;KA1BD,4BA0BC;KAED,mCAAkC;KAAzB,gCAAM;KAEf,8BAA8B;KACjB,eAAO,GAAG,WAAW,CAAC;;;;;;;;AC5HnC;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,kCAAiC,uDAAuD;AACxF;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;ACrCA,2JAA0D;AAC1D,4EAA2E;AAC3E,4EAA2E;AAC3E,qEAAoE;;;;;;;;;;;;KAEpE,gBAAuB,SAAkB,EAAE,OAAe;SACtD,wBAAwB;SACxB,EAAE,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;aACb,MAAM,IAAI,KAAK,CAAC,UAAU,GAAG,OAAO,CAAC,CAAC;SAC1C,CAAC;KACL,CAAC;KALD,wBAKC;;;;;;;;;;;;;;;;;;;;;;;;;KCVD,4CAA4C;KAC5C,MAAM,KAAK,GAAG;SACV,0CAA0C;SAC1C,uBAAuB,EAAE,s/MAAs/M;SAE/gN,yCAAyC;SACzC,sBAAsB,EAAE,0yPAA0yP;MACr0P,CAAC;KAEW,iBAAS,GAAG;SAErB,+BAA+B;SAE/B,aAAa,CAAC,EAAU;aACpB,MAAM,CAAC,CAAC,EAAE,GAAG,OAAO,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC7C,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,GAAG,OAAO,CAAC,IAAI,EAAE,CAAC,CAAC;qBACpD,MAAM,CAAC,YAAY,CAAC,MAAM,GAAG,CAAC,CAAC,EAAE,GAAG,OAAO,CAAC,GAAG,IAAI,CAAC,CAAC,CAAC;SAC9D,CAAC;SAED,kDAAkD;SAElD,YAAY,CAAC,EAAU;aACnB,MAAM,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC;iBACpF,CAAC,EAAE,IAAI,MAAM,IAAI,CAAC,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,EAAE,MAAM,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC;SAC5K,CAAC;SAED,uDAAuD;SAEvD,gBAAgB,CAAC,EAAU;aACvB,MAAM,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC;SAChF,CAAC;SAED,yDAAyD;SAEzD,iBAAiB,CAAC,EAAU;aACxB,MAAM,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,IAAK,gCAAgC;iBACtE,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAY,OAAO;iBAC7C,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAY,OAAO;iBAC7C,CAAC,EAAE,KAAK,IAAI,CAAC,IAAyB,gBAAgB;iBACtD,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,uBAAuB,CAAC,IAAI,CAAC,iBAAS,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SAC1F,CAAC;SAED,gBAAgB,CAAC,EAAU;aACvB,MAAM,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,IAAK,gCAAgC;iBACtE,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAY,OAAO;iBAC7C,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAY,OAAO;iBAC7C,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAY,OAAO;iBAC7C,CAAC,EAAE,KAAK,IAAI,CAAC,IAAyB,gBAAgB;iBACtD,CAAC,CAAC,EAAE,IAAI,IAAI,CAAC,IAAI,KAAK,CAAC,sBAAsB,CAAC,IAAI,CAAC,iBAAS,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;SACzF,CAAC;SAED,gEAAgE;SAEhE,cAAc,CAAC,EAAU;aACrB,MAAM,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC,CAAM,OAAO;SACnD,CAAC;SAED,UAAU,CAAC,EAAU;aACjB,MAAM,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAO,OAAO;iBAC3C,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,IAAU,OAAO;iBAC3C,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC,CAAS,OAAO;SACnD,CAAC;SAED,YAAY,CAAC,EAAU;aACnB,MAAM,CAAC,CAAC,EAAE,IAAI,IAAI,IAAI,EAAE,IAAI,IAAI,CAAC,CAAC,CAAM,OAAO;SACnD,CAAC;MAEJ,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;KClEF,qCAAkC;KAmBlC;SAOI;aACI,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC;aACpB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;aACnB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;aAChB,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;aAClB,IAAI,CAAC,QAAQ,GAAG,EAAE,CAAC;SACvB,CAAC;SAED,mBAAmB,CAAC,IAAI,EAAE,QAAQ;aAC9B,6CAA6C;aAC7C,sCAAsC;aACtC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,cAAc,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;iBAChE,MAAM,aAAa,GAAc,EAAE,CAAC;iBACpC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;qBAChD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;qBAC9B,EAAE,CAAC,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;yBACrC,aAAa,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;yBACrC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;yBAC1B,IAAI,CAAC,QAAQ,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBAC/B,CAAC;iBACL,CAAC;iBACD,EAAE,CAAC,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC,CAAC;qBACvB,IAAI,CAAC,aAAa,GAAG,aAAa,CAAC;iBACvC,CAAC;aACL,CAAC;SACL,CAAC;SAED,oBAAoB,CAAC,QAAQ;aACzB,IAAI,gBAAgB,GAAc,EAAE,CAAC;aAErC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC3B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;qBACjD,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;qBAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;yBACrC,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;qBAC5C,CAAC;iBACL,CAAC;iBACD,IAAI,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC;iBACzB,MAAM,CAAC,gBAAgB,CAAC;aAC5B,CAAC;aAED,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aAC/C,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC;iBACrC,MAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,CAAC,CAAC,CAAC;iBACnD,EAAE,CAAC,CAAC,YAAY,IAAI,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC;qBAC/D,gBAAgB,GAAG,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC;qBAC9C,OAAO,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC;iBACtC,CAAC;aACL,CAAC;aACD,MAAM,CAAC,gBAAgB,CAAC;SAC5B,CAAC;SAED,mBAAmB,CAAC,QAAQ;aACxB,MAAM,eAAe,GAAc,EAAE,CAAC;aAEtC,IAAI,MAAM,CAAC;aACX,OAAO,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC;iBAC3B,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;iBAChD,EAAE,CAAC,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;qBAChD,MAAM,GAAG,KAAK,CAAC,IAAI,CAAC;qBACpB,IAAI,CAAC,KAAK,CAAC,GAAG,EAAE,CAAC;iBACrB,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,KAAK,CAAC;iBACV,CAAC;aACL,CAAC;aAED,EAAE,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC;iBACT,MAAM,KAAK,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,CAAC;iBACzE,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,KAAK,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;qBAClC,MAAM,OAAO,GAAG,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC,CAAC;qBAC1C,EAAE,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;yBAC5C,eAAe,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;yBACjC,MAAM,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;qBACxC,CAAC;iBACL,CAAC;iBACD,EAAE,CAAC,CAAC,MAAM,CAAC,eAAe,IAAI,MAAM,CAAC,eAAe,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;qBAChE,OAAO,MAAM,CAAC,eAAe,CAAC;iBAClC,CAAC;iBACD,MAAM,CAAC,eAAe,CAAC;aAC3B,CAAC;aAED,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,EAAE,CAAC;iBAChD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBAC9B,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,IAAI,QAAQ,CAAC,KAAK,CAAC,MAAM,CAAC,CAAC,CAAC;qBACvC,eAAe,CAAC,OAAO,CAAC,KAAK,CAAC,OAAO,CAAC,CAAC;qBACvC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBAC9B,CAAC;aACL,CAAC;aACD,MAAM,CAAC,eAAe,CAAC;SAC3B,CAAC;SAED,SAAS,CAAC,IAAI,EAAE,QAAQ;aACpB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,OAAO,IAAI,IAAI,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;iBACvD,MAAM,CAAC;aACX,CAAC;aAED,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aACzC,MAAM,gBAAgB,GAAG,IAAI,CAAC,oBAAoB,CAAC,QAAQ,CAAC,CAAC;aAC7D,MAAM,eAAe,GAAG,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC;aAC3D,EAAE,CAAC,CAAC,eAAe,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC7B,IAAI,CAAC,eAAe,GAAG,eAAe,CAAC;aAC3C,CAAC;aACD,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC9B,IAAI,CAAC,gBAAgB,GAAG,gBAAgB,CAAC;aAC7C,CAAC;aAED,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC;iBACZ,IAAI,EAAE,IAAI;iBACV,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM;cAC/B,CAAC,CAAC;SACP,CAAC;SAED,YAAY,CAAC,IAAI,EAAE,QAAQ;aACvB,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC;aACvD,MAAM,OAAO,GAAY;iBACrB,IAAI,EAAE,IAAI;iBACV,KAAK,EAAE,IAAI,CAAC,KAAK;cACpB,CAAC;aACF,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC;iBACb,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;aAC/B,CAAC;aACD,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;iBACX,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;aAC3B,CAAC;aACD,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;aAE5B,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;iBACd,MAAM,KAAK,GAAU;qBACjB,OAAO,EAAE;yBACL,IAAI,EAAE,IAAI;yBACV,KAAK,EAAE,IAAI,CAAC,KAAK;yBACjB,KAAK,EAAE,CAAC,QAAQ,CAAC,KAAK,CAAC,MAAM,EAAE,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC;sBACtD;qBACD,KAAK,EAAE,QAAQ,CAAC,KAAK,CAAC,MAAM;kBAC/B,CAAC;iBACF,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC,CAAC;qBACX,KAAK,CAAC,OAAO,CAAC,GAAG,GAAG,IAAI,CAAC,GAAG,CAAC;iBACjC,CAAC;iBACD,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;iBACjB,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACzB,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAC9B,CAAC;SACL,CAAC;SAED,KAAK,CAAC,IAAI,EAAE,QAAQ;aAChB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,aAAa,CAAC,CAAC,CAAC;iBAC9B,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aACtC,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,cAAc,CAAC,CAAC,CAAC;iBACtC,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aACtC,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC;iBACrB,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aACnC,CAAC;SACL,CAAC;MAEJ;KAjKD,wCAiKC;;;;;;;;;;;;;;;;;;;KCrLY,cAAM,GAAG;SAClB,oBAAoB,EAAE,sBAAsB;SAC5C,iBAAiB,EAAE,mBAAmB;SACtC,eAAe,EAAE,iBAAiB;SAClC,YAAY,EAAE,cAAc;SAC5B,uBAAuB,EAAE,yBAAyB;SAClD,eAAe,EAAE,iBAAiB;SAClC,cAAc,EAAE,gBAAgB;SAChC,gBAAgB,EAAE,kBAAkB;SACpC,cAAc,EAAE,gBAAgB;SAChC,cAAc,EAAE,gBAAgB;SAChC,WAAW,EAAE,aAAa;SAC1B,SAAS,EAAE,WAAW;SACtB,gBAAgB,EAAE,kBAAkB;SACpC,eAAe,EAAE,iBAAiB;SAClC,qBAAqB,EAAE,uBAAuB;SAC9C,iBAAiB,EAAE,mBAAmB;SACtC,gBAAgB,EAAE,kBAAkB;SACpC,iBAAiB,EAAE,mBAAmB;SACtC,cAAc,EAAE,gBAAgB;SAChC,oBAAoB,EAAE,sBAAsB;SAC5C,wBAAwB,EAAE,0BAA0B;SACpD,sBAAsB,EAAE,wBAAwB;SAChD,eAAe,EAAE,iBAAiB;SAClC,mBAAmB,EAAE,qBAAqB;SAC1C,YAAY,EAAE,cAAc;SAC5B,cAAc,EAAE,gBAAgB;SAChC,cAAc,EAAE,gBAAgB;SAChC,mBAAmB,EAAE,qBAAqB;SAC1C,kBAAkB,EAAE,oBAAoB;SACxC,UAAU,EAAE,YAAY;SACxB,WAAW,EAAE,aAAa;SAC1B,MAAM,EAAE,QAAQ;SAChB,iBAAiB,EAAE,mBAAmB;SACtC,sBAAsB,EAAE,wBAAwB;SAChD,wBAAwB,EAAE,0BAA0B;SACpD,eAAe,EAAE,iBAAiB;SAClC,OAAO,EAAE,SAAS;SAClB,gBAAgB,EAAE,kBAAkB;SACpC,iBAAiB,EAAE,mBAAmB;SACtC,gBAAgB,EAAE,kBAAkB;SACpC,YAAY,EAAE,cAAc;SAC5B,gBAAgB,EAAE,kBAAkB;SACpC,aAAa,EAAE,eAAe;SAC9B,gBAAgB,EAAE,kBAAkB;SACpC,aAAa,EAAE,eAAe;SAC9B,OAAO,EAAE,SAAS;SAClB,QAAQ,EAAE,UAAU;SACpB,WAAW,EAAE,aAAa;SAC1B,eAAe,EAAE,iBAAiB;SAClC,kBAAkB,EAAE,oBAAoB;SACxC,aAAa,EAAE,eAAe;SAC9B,KAAK,EAAE,OAAO;SACd,UAAU,EAAE,YAAY;SACxB,eAAe,EAAE,iBAAiB;SAClC,wBAAwB,EAAE,0BAA0B;SACpD,eAAe,EAAE,iBAAiB;SAClC,eAAe,EAAE,iBAAiB;SAClC,cAAc,EAAE,gBAAgB;SAChC,cAAc,EAAE,gBAAgB;SAChC,YAAY,EAAE,cAAc;SAC5B,eAAe,EAAE,iBAAiB;SAClC,gBAAgB,EAAE,kBAAkB;SACpC,mBAAmB,EAAE,qBAAqB;SAC1C,kBAAkB,EAAE,oBAAoB;SACxC,cAAc,EAAE,gBAAgB;SAChC,aAAa,EAAE,eAAe;SAC9B,eAAe,EAAE,iBAAiB;MACrC,CAAC;;;;;;;;ACpEF,0IAAyC;;;;;;;;;;;;KAYzC;SAII;aACI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;aACjB,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;SAC1B,CAAC;SAED,WAAW,CAAC,KAAY;aACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC5B,CAAC;SAED,QAAQ,CAAC,KAAK;aACV,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAChB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aAC5B,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,KAAK,CAAC;aAChB,CAAC;SACL,CAAC;SAED,cAAc,CAAC,GAAW,EAAE,MAAc;aACtC,IAAI,KAAK,GAAG,IAAI,KAAK,CAAC,GAAG,CAAC,CAAC;aAC3B,IAAI,CAAC;iBACD,MAAM,KAAK,CAAC;aAChB,CAAC;aAAC,KAAK,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;iBACZ,0BAA0B;iBAC1B,EAAE,CAAC,CAAC,MAAM,CAAC,MAAM,IAAI,MAAM,CAAC,cAAc,CAAC,CAAC,CAAC;qBACzC,KAAK,GAAG,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;qBAC5B,MAAM,CAAC,cAAc,CAAC,KAAK,EAAE,QAAQ,EAAE,EAAE,KAAK,EAAE,MAAM,EAAE,CAAC,CAAC;iBAC9D,CAAC;aACL,CAAC;aACD,0BAA0B;aAC1B,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAED,WAAW,CAAC,KAAa,EAAE,IAAY,EAAE,GAAW,EAAE,WAAmB;aACrE,MAAM,GAAG,GAAG,OAAO,GAAG,IAAI,GAAG,IAAI,GAAG,WAAW,CAAC;aAChD,MAAM,KAAK,GAAG,IAAI,CAAC,cAAc,CAAC,GAAG,EAAE,GAAG,CAAC,CAAC;aAC5C,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC;aACpB,KAAK,CAAC,UAAU,GAAG,IAAI,CAAC;aACxB,KAAK,CAAC,WAAW,GAAG,WAAW,CAAC;aAChC,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAED,UAAU,CAAC,KAAa,EAAE,IAAY,EAAE,GAAW,EAAE,WAAmB;aACpE,MAAM,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;SAC1D,CAAC;SAED,aAAa,CAAC,KAAa,EAAE,IAAY,EAAE,GAAW,EAAE,WAAmB;aACvE,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,GAAG,EAAE,WAAW,CAAC,CAAC;aAC9D,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAChB,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aAC5B,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,KAAK,CAAC;aAChB,CAAC;SACL,CAAC;MAEJ;KA1DD,oCA0DC;;;;;;;;;;;;;;;;;;;;;;;;;KCtED,6CAAyC;KASzC,yCAAyC;KAEzC;SAGI,YAAY,IAAoB;aAC5B,IAAI,CAAC,IAAI,GAAG,sBAAS,CAAC,iBAAiB,CAAC;aACxC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KAPD,8CAOC;KAED;SAKI,YAAY,cAAiC,EAAE,QAAoB,EAAE,cAAwC;aACzG,IAAI,CAAC,IAAI,GAAG,sBAAS,CAAC,UAAU,CAAC;aACjC,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;aACrC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,cAAc,GAAG,cAAc,CAAC;SACzC,CAAC;MACJ;KAXD,gCAWC;KAED;SAEI;aACI,IAAI,CAAC,IAAI,GAAG,sBAAS,CAAC,kBAAkB,CAAC;SAC7C,CAAC;MACJ;KALD,gDAKC;KAED;SAGI,YAAY,UAAgD;aACxD,IAAI,CAAC,IAAI,GAAG,sBAAS,CAAC,sBAAsB,CAAC;aAC7C,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SACjC,CAAC;MACJ;KAPD,wDAOC;KAED;SAGI,YAAY,IAAY;aACpB,IAAI,CAAC,IAAI,GAAG,sBAAS,CAAC,aAAa,CAAC;aACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KAPD,sCAOC;KAED;SAII,YAAY,MAA2C,EAAE,QAAuB;aAC5E,IAAI,CAAC,IAAI,GAAG,sBAAS,CAAC,mBAAmB,CAAC;aAC1C,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KATD,kDASC;KAED;SAII,YAAY,IAAsB,EAAE,KAA+B;aAC/D,IAAI,CAAC,IAAI,GAAG,sBAAS,CAAC,YAAY,CAAC;aACnC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KATD,oCASC;KAED;SAII,YAAY,SAAwB,EAAE,IAAmB;aACrD,IAAI,CAAC,IAAI,GAAG,sBAAS,CAAC,iBAAiB,CAAC;aACxC,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;aAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KATD,8CASC;KAED;SAKI,YAAY,IAAoB,EAAE,WAAoB,EAAE,UAAiC;aACrF,IAAI,CAAC,IAAI,GAAG,sBAAS,CAAC,iBAAiB,CAAC;aACxC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;aAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SACjC,CAAC;MACJ;KAXD,8CAWC;KAED;SAGI,YAAY,QAAyB;aACjC,IAAI,CAAC,IAAI,GAAG,sBAAS,CAAC,kBAAkB,CAAC;aACzC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KAPD,gDAOC;KAED;SAII,YAAY,KAAa,EAAE,GAAW;aAClC,IAAI,CAAC,IAAI,GAAG,sBAAS,CAAC,OAAO,CAAC;aAC9B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;SACnB,CAAC;MACJ;KATD,0BASC;;;;;;;;;;;;;;;;;;;KC1HY,iBAAS,GAAG;SACrB,YAAY,EAAE,cAAc;SAC5B,iBAAiB,EAAE,mBAAmB;SACtC,UAAU,EAAE,YAAY;SACxB,kBAAkB,EAAE,oBAAoB;SACxC,sBAAsB,EAAE,wBAAwB;SAChD,aAAa,EAAE,eAAe;SAC9B,mBAAmB,EAAE,qBAAqB;SAC1C,iBAAiB,EAAE,mBAAmB;SACtC,iBAAiB,EAAE,mBAAmB;SACtC,kBAAkB,EAAE,oBAAoB;SACxC,OAAO,EAAE,SAAS;MACrB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;KCZF,2CAAwC;KACxC,uCAAuC;KACvC,6CAAyC;KACzC,gCAAgC;KAChC,qCAA0C;KAC1C,mCAA2C;KAC3C,qDAAiD;KAuBjD,iBAAS,sBAAqB,GAAG,eAAe,CAAC;KACjD,iBAAS,gBAAe,GAAG,SAAS,CAAC;KAErC,mEAAmE;KACnE,iCAAiC,WAAmC;SAChE,IAAI,aAAa,CAAC;SAElB,MAAM,CAAC,CAAC,WAAW,CAAC,IAAI,CAAC,CAAC,CAAC;aACvB,KAAK,sBAAS,CAAC,aAAa;iBACxB,MAAM,EAAE,GAAG,WAAoC,CAAC;iBAChD,aAAa,GAAG,EAAE,CAAC,IAAI,CAAC;iBACxB,KAAK,CAAC;aACV,KAAK,sBAAS,CAAC,iBAAiB;iBAC5B,MAAM,EAAE,GAAG,WAAwC,CAAC;iBACpD,aAAa,GAAG,uBAAuB,CAAC,EAAE,CAAC,SAAS,CAAC,GAAG,GAAG;qBACvD,uBAAuB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;iBACrC,KAAK,CAAC;aACV,KAAK,sBAAS,CAAC,mBAAmB;iBAC9B,MAAM,IAAI,GAAG,WAA0C,CAAC;iBACxD,aAAa,GAAG,uBAAuB,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,GAAG;qBACtD,uBAAuB,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;iBAC3C,KAAK,CAAC;aACV,0BAA0B;aAC1B;iBACI,KAAK,CAAC;SACd,CAAC;SAED,MAAM,CAAC,aAAa,CAAC;KACzB,CAAC;KAED,eAAuB,SAAQ,eAAM;SAEjC,YAAY,IAAY,EAAE,OAAO,EAAE,QAAQ;aACvC,KAAK,CAAC,IAAI,EAAE,OAAO,EAAE,QAAQ,CAAC,CAAC;SACnC,CAAC;SAED,sBAAsB;aAClB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,sBAAsB,EAAE,CAAC;SAClF,CAAC;SAED,QAAQ;aACJ,iDAAiD;aACjD,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;aAC5C,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;aAChD,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;SAC9E,CAAC;SAED,SAAS;aACL,4BAA4B;aAC5B,IAAI,CAAC,SAAS,EAAE,CAAC;SACrB,CAAC;SAED,UAAU;aACN,IAAI,CAAC,QAAQ,EAAE,CAAC;aAChB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aAEpB,gDAAgD;aAChD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;iBACrB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;aACtB,CAAC;SACL,CAAC;SAED,aAAa;aACT,IAAI,CAAC,eAAe,EAAE,CAAC;aACvB,MAAM,CAAC;iBACH,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;iBACzB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;iBAC7B,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;cACtD,CAAC;SACN,CAAC;SAED,kBAAkB;aACd,MAAM,CAAC;iBACH,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;iBACzB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;iBAC7B,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;cACtD,CAAC;SACN,CAAC;SAED,eAAe,CAAC,KAAa;aACzB,IAAI,MAAM,GAAG,GAAG,CAAC;aAEjB,IAAI,KAAK,GAAG,IAAI,CAAC;aACjB,IAAI,UAAU,GAAG,KAAK,CAAC;aACvB,IAAI,OAAO,GAAG,KAAK,CAAC;aACpB,IAAI,GAAG,GAAG,KAAK,CAAC;aAEhB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,IAAI,KAAK,IAAI,CAAC,UAAU,EAAE,CAAC;iBACjD,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBACnD,EAAE,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;qBACf,KAAK,CAAC;iBACV,CAAC;iBACD,UAAU,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC;iBAC1B,MAAM,IAAI,EAAE,CAAC;iBACb,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;iBACrB,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;qBACd,MAAM,CAAC,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;yBACpB,KAAK,CAAC;6BACF,gBAAgB;6BAChB,OAAO,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC;6BACvB,KAAK,CAAC;yBACV,KAAK,CAAC;6BACF,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;iCACV,gBAAgB;iCAChB,GAAG,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC;iCACnB,KAAK,GAAG,GAAG,IAAI,qBAAS,CAAC,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC;iCAC1D,OAAO,GAAG,OAAO,IAAI,CAAC,GAAG,CAAC;6BAC9B,CAAC;6BACD,KAAK,CAAC;yBACV;6BACI,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC,OAAO,IAAI,CAAC,qBAAS,CAAC,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;6BAC3E,KAAK,GAAG,KAAK,IAAI,CAAC,CAAC,GAAG,IAAI,CAAC,qBAAS,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;6BACnE,KAAK,CAAC;qBACd,CAAC;iBACL,CAAC;aACL,CAAC;aAED,EAAE,CAAC,CAAC,KAAK,IAAI,UAAU,IAAI,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC3C,oCAAoC;iBACpC,MAAM,GAAG,GAAG,MAAM,CAAC,MAAM,CAAC,CAAC,EAAE,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;iBAChD,EAAE,CAAC,CAAC,OAAO,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;qBAC5B,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBAC9D,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,GAAG,IAAI,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;qBAC/B,MAAM,GAAG,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC;iBACpE,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,GAAG,IAAI,8BAAa,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAChD,MAAM,GAAG,8BAAa,CAAC,GAAG,CAAC,CAAC;iBAChC,CAAC;aACL,CAAC;aAED,MAAM,CAAC,MAAM,CAAC;SAClB,CAAC;SAED,uEAAuE;SAEvE,MAAM;aACF,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;aAE9D,gBAAgB;aAChB,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;iBAC5F,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;iBACxD,MAAM,CAAC;qBACH,IAAI,oBAAkB;qBACtB,KAAK,EAAE,KAAK;qBACZ,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;qBACnC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;qBACjC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC;qBAC7B,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;kBAC1B,CAAC;aACN,CAAC;aAED,MAAM;aACN,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;iBACzB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;iBACjC,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;iBACxD,IAAI,GAAG,GAAG,EAAE,CAAC;iBACb,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;qBACzB,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE,CAAC,CAAC;qBACrD,EAAE,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;yBACf,KAAK,CAAC;qBACV,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;yBACpB,GAAG,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,CAAC;qBACvC,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,GAAG,IAAI,EAAE,CAAC;qBACd,CAAC;iBACL,CAAC;iBAED,MAAM,CAAC;qBACH,IAAI,uBAAqB;qBACzB,KAAK,EAAE,GAAG;qBACV,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;qBACnC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;qBACjC,KAAK,EAAE,KAAK;qBACZ,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;kBAC1B,CAAC;aACN,CAAC;aAED,WAAW;aACX,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;iBACZ,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;iBAClE,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;iBAClE,MAAM,KAAK,GAAG,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC;iBACrD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;iBACjC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,KAAK,CAAC,MAAM,CAAC;iBACnC,MAAM,CAAC;qBACH,IAAI,oBAAkB;qBACtB,KAAK,EAAE,KAAK;qBACZ,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;qBACnC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;qBACjC,KAAK,EAAE,KAAK;qBACZ,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;kBAC1B,CAAC;aACN,CAAC;aAED,IAAI;aACJ,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;iBACZ,gFAAgF;iBAChF,MAAM,CAAC;qBACH,IAAI,mBAAgB;qBACpB,KAAK,EAAE,EAAE;qBACT,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;qBACnC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;qBACjC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;qBACzB,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;kBAC1B,CAAC;aACN,CAAC;aAED,sDAAsD;aACtD,EAAE,CAAC,CAAC,qBAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;iBACjD,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;iBACjC,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;iBACrB,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;qBACzB,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;qBAC9D,EAAE,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC;yBAChD,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;qBACzB,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;yBACnB,sDAAsD;yBACtD,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;qBACzB,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,KAAK,CAAC;qBACV,CAAC;iBACL,CAAC;iBACD,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBAChE,MAAM,CAAC;qBACH,IAAI,sBAAqB;qBACzB,KAAK,EAAE,EAAE;qBACT,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;qBACnC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;qBACjC,KAAK,EAAE,KAAK;qBACZ,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;kBAC1B,CAAC;aACN,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAiB,CAAC;SAC7C,CAAC;SAED,YAAY;aACR,IAAI,CAAC,eAAe,EAAE,CAAC;aAEvB,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aAC5C,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aAChD,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;aACtE,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;aAC5B,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aAC/C,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;aAErE,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;iBACrB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAY,CAAC,CAAC,CAAC;aACtD,CAAC;aAED,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAED,WAAW;aACP,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aAC5C,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aAChD,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;aAEtE,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aAEjC,IAAI,IAAI,GAAG,EAAE,CAAC;aACd,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;iBACzB,MAAM,EAAE,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;iBACnD,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;qBAC3B,KAAK,CAAC;iBACV,CAAC;iBACD,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;iBACrB,IAAI,IAAI,EAAE,CAAC;iBACX,EAAE,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC/C,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;qBAC1B,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;yBAClE,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;qBACzB,CAAC;qBACD,IAAI,CAAC,OAAO,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;iBAChD,CAAC;aACL,CAAC;aAED,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aAC/C,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;aAErE,MAAM,KAAK,GAAG;iBACV,IAAI,gBAAe;iBACnB,KAAK,EAAE,IAAI;iBACX,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;iBACnC,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;iBACjC,KAAK,EAAE,KAAK;iBACZ,GAAG,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;cAC1B,CAAC;aAEF,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;iBAC1C,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAY,CAAC,CAAC,CAAC;aACtD,CAAC;aAED,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAED,YAAY;aACR,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;aACvC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;aAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,MAAM,EAAE,CAAC;aAC3B,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;aAEjC,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,+DAA+D;SAC/D,uCAAuC;SAEvC,SAAS,CAAC,KAAK;aACX,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;aAClC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC;iBAC3D,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;aACrC,CAAC;SACL,CAAC;SAED,sEAAsE;SAEtE,QAAQ,CAAC,KAAK;aACV,MAAM,IAAI,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;aACjC,MAAM,CAAC,IAAI,CAAC,IAAI,uBAAqB,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC;SAClE,CAAC;SAED,kBAAkB;aACd,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aAClC,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;aAClC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,yBAAwB,CAAC,CAAC,CAAC;iBACrC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;aACrC,CAAC;aACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,aAAa,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;SACvE,CAAC;SAED,mBAAmB;aACf,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aAClC,IAAI,WAAW,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAE5C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACrB,MAAM,SAAS,GAAG,WAAW,CAAC;iBAC9B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;iBACpB,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBACvC,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;aACtF,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC5B,OAAO,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;qBACxB,MAAM,MAAM,GAAG,WAAW,CAAC;qBAC3B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;qBACpB,MAAM,QAAQ,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;qBAC3C,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,mBAAmB,CAAC,MAAM,EAAE,QAAQ,CAAC,CAAC,CAAC;iBACzF,CAAC;aACL,CAAC;aAED,MAAM,CAAC,WAAW,CAAC;SACvB,CAAC;SAED,qBAAqB;aACjB,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aAClC,IAAI,aAAuC,CAAC;aAE5C,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACrB,MAAM,SAAS,GAAG,UAAU,CAAC;iBAC7B,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;iBACpB,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBACvC,aAAa,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,iBAAiB,CAAC,SAAS,EAAE,IAAI,CAAC,CAAC,CAAC;aACxF,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,aAAa,GAAG,UAAU,CAAC;aAC/B,CAAC;aAED,MAAM,CAAC,aAAa,CAAC;SACzB,CAAC;SAED,8BAA8B;aAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aAClC,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,EAAE,CAAC;aAClC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,0BAAwB,CAAC,CAAC,CAAC;iBACrC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;aACrC,CAAC;aACD,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACpC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;SACnE,CAAC;SAED,2BAA2B;aACvB,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aAElC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACpB,IAAI,CAAC,SAAS,EAAE,CAAC;aAEjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,aAAa,CAAC,6DAA6D,CAAC,CAAC;aACtF,CAAC;aAED,MAAM,UAAU,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;aACpD,IAAI,CAAC,UAAU,EAAE,CAAC;aAElB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC,CAAC;SAC/E,CAAC;SAED,sBAAsB;aAClB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,2BAA2B,EAAE,CAAC,CAAC;iBAC5D,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,8BAA8B,EAAE,CAAC;SAC5F,CAAC;SAED,0BAA0B;aACtB,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aAClC,MAAM,IAAI,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;aAC1C,IAAI,KAAK,GAAqC,IAAI,CAAC;aACnD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACrB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;iBACpB,KAAK,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;aAC1C,CAAC;aACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,YAAY,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;SACtE,CAAC;SAED,uBAAuB;aACnB,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aAClC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACpB,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;aAEtB,IAAI,CAAC,SAAS,EAAE,CAAC;aACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;aAClD,IAAI,CAAC,UAAU,EAAE,CAAC;aAElB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,kBAAkB,CAAC,QAAQ,CAAC,CAAC,CAAC;SACzE,CAAC;SAED,kBAAkB;aACd,MAAM,UAAU,GAAkC,EAAE,CAAC;aAErD,OAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,EAAE,CAAC;iBAChD,MAAM,SAAS,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC;qBACnE,IAAI,CAAC,0BAA0B,EAAE,CAAC;iBACtC,UAAU,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC/B,CAAC;aAED,MAAM,CAAC,UAAU,CAAC;SACtB,CAAC;SAED,sBAAsB;aAClB,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aAElC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACpB,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;aACxC,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7C,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aACvC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;iBACd,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACxB,CAAC;aACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aAEpB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;SAC7F,CAAC;SAED,uBAAuB;aACnB,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aAElC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACpB,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACrB,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;iBACpB,MAAM,WAAW,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;iBAC/C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;iBACpB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,iBAAiB,CAAC,WAAW,CAAC,CAAC,CAAC;aAC3E,CAAC;aAED,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;aACxC,MAAM,UAAU,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;aAC7C,MAAM,WAAW,GAAG,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;aACvC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;iBACd,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACxB,CAAC;aACD,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aAEpB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,iBAAiB,CAAC,IAAI,EAAE,WAAW,EAAE,UAAU,CAAC,CAAC,CAAC;SAC7F,CAAC;SAED,uBAAuB;aACnB,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;aACvC,IAAI,CAAC,eAAe,EAAE,CAAC;aACvB,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aAC/C,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;aACrE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,kBAAkB,EAAE,CAAC,CAAC;SACjE,CAAC;SAED,2BAA2B;aACvB,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aAClC,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aAEpB,IAAI,UAAwD,CAAC;aAC7D,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACrB,UAAU,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;iBAC5C,IAAI,CAAC,SAAS,CAAC,GAAG,CAAC,CAAC;aACxB,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,UAAU,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;iBAC9C,IAAI,CAAC,UAAU,EAAE,CAAC;aACtB,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,sBAAsB,CAAC,UAAU,CAAC,CAAC,CAAC;SAC/E,CAAC;SAED,gBAAgB;aACZ,MAAM,QAAQ,GAAuB,EAAE,CAAC;aAExC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;iBACzB,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBACvC,MAAM,KAAK,GAAG,IAAI,CAAC,WAAW,EAAE,CAAC;iBACjC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC;qBAC1B,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;qBACpC,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;qBACzE,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACzB,CAAC;iBACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;qBAClD,MAAM,SAAS,GAAG,IAAI,CAAC,2BAA2B,EAAE,CAAC;qBACrD,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC7B,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,KAAK,CAAC;iBACV,CAAC;aACL,CAAC;aAED,MAAM,CAAC,QAAQ,CAAC;SACpB,CAAC;SAED,sBAAsB,CAAC,EAAkB;aACrC,MAAM,KAAK,GAAqB,EAAE,CAAC;aAEnC,OAAO,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,EAAE,CAAC;iBACzB,EAAE,CAAC,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC,MAAM,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC;iBAC1D,MAAM,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBACvC,MAAM,OAAO,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;iBAC/C,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,sBAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;qBAC/C,MAAM,OAAO,GAAG,OAAoC,CAAC;qBACrD,EAAE,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;yBACtB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;yBAC7E,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBAC5B,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,KAAK,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;yBACf,EAAE,GAAG,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,QAAQ,EAAE,EAAE,EAAE,CAAC;qBACxD,CAAC;iBACL,CAAC;iBACD,EAAE,CAAC,CAAC,OAAO,CAAC,IAAI,KAAK,sBAAS,CAAC,iBAAiB,CAAC,CAAC,CAAC;qBAC/C,EAAE,CAAC,OAAO,GAAG,OAAoC,CAAC;qBAClD,MAAM,IAAI,GAAG,uBAAuB,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;qBACtD,MAAM,KAAK,GAAG,uBAAuB,CAAC,EAAE,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;qBACvD,EAAE,CAAC,CAAC,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC;yBACjB,IAAI,CAAC,aAAa,CAAC,+CAA+C,EAAE,IAAI,CAAC,CAAC;qBAC9E,CAAC;qBACD,EAAE,CAAC,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;yBACnB,MAAM,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,EAAE,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,UAAU,CAAC,EAAE,CAAC,OAAO,EAAE,EAAE,CAAC,QAAQ,EAAE,EAAE,CAAC,OAAO,CAAC,CAAC,CAAC;yBAClG,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;yBAC7B,EAAE,CAAC,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;yBACxB,KAAK,CAAC,GAAG,EAAE,CAAC;qBAChB,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,KAAK,CAAC;qBACV,CAAC;iBACL,CAAC;aACL,CAAC;aAED,MAAM,CAAC,EAAE,CAAC;SACd,CAAC;SAED,eAAe;aACX,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;aAElC,MAAM,OAAO,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;aAC9C,IAAI,QAAQ,GAAuB,EAAE,CAAC;aACtC,IAAI,OAAO,GAAqC,IAAI,CAAC;aAErD,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;iBACvB,MAAM,EAAE,GAAG,IAAI,CAAC,sBAAsB,CAAC,EAAE,IAAI,EAAE,OAAO,EAAE,OAAO,EAAE,QAAQ,EAAE,CAAC,CAAC;iBAC7E,QAAQ,GAAG,EAAE,CAAC,QAAQ,CAAC;iBACvB,OAAO,GAAG,EAAE,CAAC,OAAO,CAAC;aACzB,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,OAAO,CAAC,UAAU,CAAC,OAAO,EAAE,QAAQ,EAAE,OAAO,CAAC,CAAC,CAAC;SACnF,CAAC;SAED,YAAY;aACR,gDAAgD;aAChD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;iBACrB,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;aACtB,CAAC;aAED,IAAI,CAAC,QAAQ,EAAE,CAAC;aAChB,MAAM,OAAO,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aACvC,IAAI,CAAC,SAAS,EAAE,CAAC;aAEjB,MAAM,CAAC,OAAO,CAAC;SACnB,CAAC;SAED,mBAAmB;aACf,MAAM,CAAC,KAAK,CAAC,mBAAmB,EAAE,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;SAC1D,CAAC;MAEJ;KAljBD,8BAkjBC;;;;;;;;;;;;;;;;;;;KC7mBD,qCAAkC;KA4BlC,yCAAyC;KAEzC;SAGI,YAAY,QAAkC;aAC1C,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,eAAe,CAAC;aACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KAPD,0CAOC;KAED;SAGI,YAAY,QAA+B;aACvC,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,YAAY,CAAC;aAChC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KAPD,oCAOC;KAED;SAQI,YAAY,MAA2B,EAAE,IAAiC,EAAE,UAAmB;aAC3F,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,uBAAuB,CAAC;aAC3C,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;aACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;aAC7B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KAjBD,0DAiBC;KAED;SAKI,YAAY,QAAgB,EAAE,IAAgB,EAAE,KAAiB;aAC7D,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,oBAAoB,CAAC;aACxC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KAXD,oDAWC;KAED;SAII,YAAY,IAAwC,EAAE,KAAiB;aACnE,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,iBAAiB,CAAC;aACrC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KATD,8CASC;KAED;SAQI,YAAY,MAA2B,EAAE,IAAiC,EAAE,UAAmB;aAC3F,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,uBAAuB,CAAC;aAC3C,IAAI,CAAC,EAAE,GAAG,IAAI,CAAC;aACf,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aACvB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;aAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SACtB,CAAC;MACJ;KAjBD,oEAiBC;KAED;SAQI,YAAY,EAAqB,EAAE,MAA2B,EAAE,IAAoB;aAChF,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,mBAAmB,CAAC;aACvC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;aACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aACvB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;aACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SACtB,CAAC;MACJ;KAjBD,4DAiBC;KAED;SAQI,YAAY,EAAqB,EAAE,MAA2B,EAAE,IAAoB;aAChF,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,kBAAkB,CAAC;aACtC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;aACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aACvB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;aACxB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC;SACtB,CAAC;MACJ;KAjBD,0DAiBC;KAED;SAGI,YAAY,QAAoB;aAC5B,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,eAAe,CAAC;aACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KAPD,0CAOC;KAED;SAKI,YAAY,QAAgB,EAAE,IAAgB,EAAE,KAAiB;aAC7D,MAAM,OAAO,GAAG,CAAC,QAAQ,KAAK,IAAI,IAAI,QAAQ,KAAK,IAAI,CAAC,CAAC;aACzD,IAAI,CAAC,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,eAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC,eAAM,CAAC,gBAAgB,CAAC;aACzE,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KAZD,4CAYC;KAED;SAGI,YAAY,IAAI;aACZ,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,cAAc,CAAC;aAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KAPD,wCAOC;KAED;SAGI,YAAY,KAAwB;aAChC,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,cAAc,CAAC;aAClC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KAPD,wCAOC;KAED;SAII,YAAY,MAA2B,EAAE,IAA2B;aAChE,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,cAAc,CAAC;aAClC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;SAC1B,CAAC;MACJ;KATD,wCASC;KAED;SAII,YAAY,KAAyC,EAAE,IAAoB;aACvE,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,WAAW,CAAC;aAC/B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KATD,kCASC;KAED;SAGI,YAAY,IAAgB;aACxB,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,SAAS,CAAC;aAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KAPD,8BAOC;KAED;SAMI,YAAY,EAAqB,EAAE,UAA6B,EAAE,QAA6B,EAAC,IAAe;aAC3G,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,gBAAgB,CAAC;aACpC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;aACb,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;aAC7B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KAbD,4CAaC;KAED;SAKI,YAAY,EAAqB,EAAE,UAA6B,EAAE,IAAe;aAC7E,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,eAAe,CAAC;aACnC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;aACb,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;aAC7B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KAXD,0CAWC;KAED;SAKI,YAAY,MAAkB,EAAE,QAAoB;aAChD,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,gBAAgB,CAAC;aACpC,IAAI,CAAC,QAAQ,GAAG,IAAI,CAAC;aACrB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KAXD,4DAWC;KAED;SAKI,YAAY,IAAgB,EAAE,UAAsB,EAAE,SAAqB;aACvE,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,qBAAqB,CAAC;aACzC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;aAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC/B,CAAC;MACJ;KAXD,sDAWC;KAED;SAGI,YAAY,KAAwB;aAChC,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,iBAAiB,CAAC;aACrC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KAPD,8CAOC;KAED;SAEI;aACI,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,iBAAiB,CAAC;SACzC,CAAC;MACJ;KALD,8CAKC;KAED;SAII,YAAY,UAAsB,EAAE,SAAiB;aACjD,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,mBAAmB,CAAC;aACvC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;aAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC/B,CAAC;MACJ;KATD,8BASC;KAED;SAII,YAAY,IAAe,EAAE,IAAgB;aACzC,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,gBAAgB,CAAC;aACpC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KATD,4CASC;KAED;SAEI;aACI,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,cAAc,CAAC;SACtC,CAAC;MACJ;KALD,wCAKC;KAED;SAGI,YAAY,MAAe;aACvB,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,oBAAoB,CAAC;aACxC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SACzB,CAAC;MACJ;KAPD,oDAOC;KAED;SAGI,YAAY,WAAyC;aACjD,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,wBAAwB,CAAC;aAC5C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;SACnC,CAAC;MACJ;KAPD,4DAOC;KAED;SAKI,YAAY,WAA8C,EAAE,UAA6B,EAAE,MAAsB;aAC7G,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,sBAAsB,CAAC;aAC1C,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;aAC/B,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;aAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SACzB,CAAC;MACJ;KAXD,wDAWC;KAED;SAII,YAAY,KAAiB,EAAE,QAAoB;aAC/C,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,eAAe,CAAC;aACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KATD,0CASC;KAED;SAGI,YAAY,UAAsB;aAC9B,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,mBAAmB,CAAC;aACvC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SACjC,CAAC;MACJ;KAPD,kDAOC;KAED;SAMI,YAAY,IAAgB,EAAE,KAAiB,EAAE,IAAe;aAC5D,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,cAAc,CAAC;aAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,IAAI,GAAG,KAAK,CAAC;SACtB,CAAC;MACJ;KAbD,wCAaC;KAED;SAKI,YAAY,IAAgB,EAAE,KAAiB,EAAE,IAAe;aAC5D,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,cAAc,CAAC;aAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KAXD,wCAWC;KAED;SAMI,YAAY,IAAuB,EAAE,IAAuB,EAAE,MAAyB,EAAE,IAAe;aACpG,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,YAAY,CAAC;aAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KAbD,oCAaC;KAED;SAQI,YAAY,EAAqB,EAAE,MAA2B,EAAE,IAAoB,EAAE,SAAkB;aACpG,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,mBAAmB,CAAC;aACvC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;aACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;aAC3B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;aACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KAjBD,kDAiBC;KAED;SAQI,YAAY,EAAqB,EAAE,MAA2B,EAAE,IAAoB,EAAE,SAAkB;aACpG,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,kBAAkB,CAAC;aACtC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;aACb,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;aAC3B,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;aACxB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KAjBD,gDAiBC;KAED;SAGI,YAAY,IAAI;aACZ,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,UAAU,CAAC;aAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KAPD,gCAOC;KAED;SAKI,YAAY,IAAgB,EAAE,UAAqB,EAAE,SAA2B;aAC5E,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,WAAW,CAAC;aAC/B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;aAC7B,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC/B,CAAC;MACJ;KAXD,kCAWC;KAED;SAEI;aACI,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,MAAM,CAAC;SAC9B,CAAC;MACJ;KALD,wBAKC;KAED;SAII,YAAY,UAAU,EAAE,MAAM;aAC1B,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,iBAAiB,CAAC;aACrC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;aAC7B,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SACzB,CAAC;MACJ;KATD,8CASC;KAED;SAGI,YAAY,KAAiB;aACzB,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,sBAAsB,CAAC;aAC1C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KAPD,wDAOC;KAED;SAGI,YAAY,KAAiB;aACzB,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,wBAAwB,CAAC;aAC5C,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KAPD,4DAOC;KAED;SAII,YAAY,KAAiB,EAAE,QAAoB;aAC/C,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,eAAe,CAAC;aACnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KATD,0CASC;KAED;SAII,YAAY,KAAiB,EAAE,IAAe;aAC1C,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,gBAAgB,CAAC;aACpC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KATD,4CASC;KAED;SAII,YAAY,KAAuC,EAAE,GAAW;aAC5D,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,OAAO,CAAC;aAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;SACnB,CAAC;MACJ;KATD,0BASC;KAED;SAII,YAAY,IAAgB,EAAE,QAAoB;aAC9C,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,YAAY,CAAC;aAChC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KATD,oCASC;KAED;SAOI,YAAY,GAAsB,EAAE,QAAiB,EAAE,KAA0D,EAAE,IAAY,EAAE,QAAiB;aAC9I,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,gBAAgB,CAAC;aACpC,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;aACf,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,MAAM,GAAG,QAAQ,CAAC;SAC3B,CAAC;MACJ;KAfD,4CAeC;KAED;SAII,YAAY,IAAyB;aACjC,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,OAAO,CAAC;aAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;SAC/B,CAAC;MACJ;KATD,wBASC;KAED;SAII,YAAY,MAAkB,EAAE,IAA2B;aACvD,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,aAAa,CAAC;aACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;SAC1B,CAAC;MACJ;KATD,sCASC;KAED;SAGI,YAAY,UAAsC;aAC9C,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,gBAAgB,CAAC;aACpC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SACjC,CAAC;MACJ;KAPD,4CAOC;KAED;SAGI,YAAY,UAAmC;aAC3C,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,aAAa,CAAC;aACjC,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SACjC,CAAC;MACJ;KAPD,sCAOC;KAED;SAQI,YAAY,IAAY,EAAE,GAAgB,EAAE,QAAiB,EAAE,KAA2B,EAAE,MAAe,EAAE,SAAkB;aAC3H,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,QAAQ,CAAC;aAC5B,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;aACf,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC/B,CAAC;MACJ;KAjBD,4BAiBC;KAED;SAKI,YAAY,KAAa,EAAE,GAAW,EAAE,OAAe,EAAE,KAAa;aAClE,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,OAAO,CAAC;aAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;aACf,IAAI,CAAC,KAAK,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;SACpC,CAAC;MACJ;KAXD,oCAWC;KAED;SAGI,YAAY,QAA4C;aACpD,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,WAAW,CAAC;aAC/B,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KAPD,kCAOC;KAED;SAGI,YAAY,QAA2B;aACnC,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,eAAe,CAAC;aACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KAPD,0CAOC;KAED;SAII,YAAY,IAAyB;aACjC,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,OAAO,CAAC;aAC3B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,UAAU,GAAG,QAAQ,CAAC;SAC/B,CAAC;MACJ;KATD,wBASC;KAED;SAGI,YAAY,WAAyB;aACjC,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,kBAAkB,CAAC;aACtC,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;SACnC,CAAC;MACJ;KAPD,gDAOC;KAED;SAGI,YAAY,QAAoB;aAC5B,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,aAAa,CAAC;aACjC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KAPD,sCAOC;KAED;SAKI,YAAY,MAAkB,EAAE,QAAoB;aAChD,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,gBAAgB,CAAC;aACpC,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;aACtB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KAXD,wDAWC;KAED;SAEI;aACI,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,KAAK,CAAC;SAC7B,CAAC;MACJ;KALD,sBAKC;KAED;SAII,YAAY,IAAgB,EAAE,UAAuB;aACjD,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,UAAU,CAAC;aAC9B,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,UAAU,GAAG,UAAU,CAAC;SACjC,CAAC;MACJ;KATD,gCASC;KAED;SAII,YAAY,YAAwB,EAAE,KAAmB;aACrD,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,eAAe,CAAC;aACnC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;aACjC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KATD,0CASC;KAED;SAII,YAAY,GAAe,EAAE,KAAsB;aAC/C,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,wBAAwB,CAAC;aAC5C,IAAI,CAAC,GAAG,GAAG,GAAG,CAAC;aACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;SACvB,CAAC;MACJ;KATD,4DASC;KAOD;SAII,YAAY,KAA2B,EAAE,IAAa;aAClD,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,eAAe,CAAC;aACnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KATD,0CASC;KAED;SAII,YAAY,MAAyB,EAAE,WAAyB;aAC5D,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,eAAe,CAAC;aACnC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,WAAW,GAAG,WAAW,CAAC;SACnC,CAAC;MACJ;KATD,0CASC;KAED;SAEI;aACI,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,cAAc,CAAC;SACtC,CAAC;MACJ;KALD,wCAKC;KAED;SAGI,YAAY,QAAoB;aAC5B,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,cAAc,CAAC;aAClC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KAPD,wCAOC;KAED;SAKI,YAAY,KAAqB,EAAE,OAA2B,EAAE,SAAgC;aAC5F,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,YAAY,CAAC;aAChC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;aACnB,IAAI,CAAC,OAAO,GAAG,OAAO,CAAC;aACvB,IAAI,CAAC,SAAS,GAAG,SAAS,CAAC;SAC/B,CAAC;MACJ;KAXD,oCAWC;KAED;SAKI,YAAY,QAAQ,EAAE,QAAQ;aAC1B,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,eAAe,CAAC;aACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;SACvB,CAAC;MACJ;KAXD,0CAWC;KAED;SAKI,YAAY,QAAQ,EAAE,QAAQ,EAAE,MAAM;aAClC,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,gBAAgB,CAAC;aACpC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;SACzB,CAAC;MACJ;KAXD,4CAWC;KAED;SAII,YAAY,YAAkC,EAAE,IAAY;aACxD,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,mBAAmB,CAAC;aACvC,IAAI,CAAC,YAAY,GAAG,YAAY,CAAC;aACjC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KATD,kDASC;KAED;SAII,YAAY,EAAsC,EAAE,IAAuB;aACvE,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,kBAAkB,CAAC;aACtC,IAAI,CAAC,EAAE,GAAG,EAAE,CAAC;aACb,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KATD,gDASC;KAED;SAII,YAAY,IAAgB,EAAE,IAAe;aACzC,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,cAAc,CAAC;aAClC,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;aACjB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KATD,wCASC;KAED;SAII,YAAY,MAAkB,EAAE,IAAe;aAC3C,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,aAAa,CAAC;aACjC,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;aACrB,IAAI,CAAC,IAAI,GAAG,IAAI,CAAC;SACrB,CAAC;MACJ;KATD,sCASC;KAED;SAII,YAAY,QAA2B,EAAE,QAAiB;aACtD,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,eAAe,CAAC;aACnC,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aACzB,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;SAC7B,CAAC;MACJ;KATD,0CASC;;;;;;;;;;;;;;;;;;;KC72BD,qCAAkC;KAClC,mDAA+C;KAC/C,yCAAsC;KACtC,gCAAgC;KAChC,uCAAuE;KACvE,qCAAkC;KAClC,mCAA2C;KAiC3C,MAAM,yBAAyB,GAAG,2BAA2B,CAAC;KAuB9D;SAeI,YAAY,IAAY,EAAE,UAAe,EAAE,EAAE,QAAQ;aACjD,IAAI,CAAC,MAAM,GAAG;iBACV,KAAK,EAAE,CAAC,OAAO,OAAO,CAAC,KAAK,KAAK,SAAS,CAAC,IAAI,OAAO,CAAC,KAAK;iBAC5D,GAAG,EAAE,CAAC,OAAO,OAAO,CAAC,GAAG,KAAK,SAAS,CAAC,IAAI,OAAO,CAAC,GAAG;iBACtD,MAAM,EAAE,IAAI;iBACZ,MAAM,EAAE,CAAC,OAAO,OAAO,CAAC,MAAM,KAAK,SAAS,CAAC,IAAI,OAAO,CAAC,MAAM;iBAC/D,OAAO,EAAE,CAAC,OAAO,OAAO,CAAC,OAAO,KAAK,SAAS,CAAC,IAAI,OAAO,CAAC,OAAO;iBAClE,QAAQ,EAAE,CAAC,OAAO,OAAO,CAAC,QAAQ,KAAK,SAAS,CAAC,IAAI,OAAO,CAAC,QAAQ;cACxE,CAAC;aACF,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,IAAI,OAAO,CAAC,MAAM,IAAI,OAAO,CAAC,MAAM,KAAK,IAAI,CAAC,CAAC,CAAC;iBAC/D,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;aAChD,CAAC;aAED,IAAI,CAAC,QAAQ,GAAG,QAAQ,CAAC;aAEzB,IAAI,CAAC,YAAY,GAAG,IAAI,4BAAY,EAAE,CAAC;aACvC,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC;aAClD,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAO,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;aACpD,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC;aAEhD,IAAI,CAAC,kBAAkB,GAAG;iBACtB,GAAG,EAAE,CAAC;iBACN,GAAG,EAAE,CAAC;iBACN,GAAG,EAAE,CAAC;iBACN,GAAG,EAAE,CAAC;iBACN,GAAG,EAAE,CAAC;iBACN,IAAI,EAAE,CAAC;iBACP,IAAI,EAAE,CAAC;iBACP,GAAG,EAAE,CAAC;iBACN,GAAG,EAAE,CAAC;iBACN,GAAG,EAAE,CAAC;iBACN,IAAI,EAAE,CAAC;iBACP,IAAI,EAAE,CAAC;iBACP,KAAK,EAAE,CAAC;iBACR,KAAK,EAAE,CAAC;iBACR,GAAG,EAAE,CAAC;iBACN,GAAG,EAAE,CAAC;iBACN,IAAI,EAAE,CAAC;iBACP,IAAI,EAAE,CAAC;iBACP,IAAI,EAAE,CAAC;iBACP,IAAI,EAAE,CAAC;iBACP,KAAK,EAAE,CAAC;iBACR,GAAG,EAAE,CAAC;iBACN,GAAG,EAAE,CAAC;iBACN,GAAG,EAAE,EAAE;iBACP,GAAG,EAAE,EAAE;iBACP,GAAG,EAAE,EAAE;cACV,CAAC;aAEF,IAAI,CAAC,SAAS,GAAG;iBACb,IAAI,aAAW;iBACf,KAAK,EAAE,EAAE;iBACT,UAAU,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;iBACnC,SAAS,EAAE,CAAC;iBACZ,KAAK,EAAE,CAAC;iBACR,GAAG,EAAE,CAAC;cACT,CAAC;aACF,IAAI,CAAC,iBAAiB,GAAG,KAAK,CAAC;aAE/B,IAAI,CAAC,OAAO,GAAG;iBACX,QAAQ,EAAE,KAAK;iBACf,KAAK,EAAE,KAAK;iBACZ,OAAO,EAAE,IAAI;iBACb,oBAAoB,EAAE,IAAI;iBAC1B,UAAU,EAAE,IAAI;iBAChB,8BAA8B,EAAE,IAAI;iBACpC,kBAAkB,EAAE,KAAK;iBACzB,gBAAgB,EAAE,KAAK;iBACvB,cAAc,EAAE,KAAK;iBACrB,WAAW,EAAE,KAAK;iBAClB,QAAQ,EAAE,KAAK;iBACf,QAAQ,EAAE,EAAE;iBACZ,MAAM,EAAE,KAAK;cAChB,CAAC;aACF,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;aAEjB,IAAI,CAAC,WAAW,GAAG;iBACf,KAAK,EAAE,CAAC;iBACR,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;iBAC7B,MAAM,EAAE,CAAC;cACZ,CAAC;aACF,IAAI,CAAC,UAAU,GAAG;iBACd,KAAK,EAAE,CAAC;iBACR,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;iBAC7B,MAAM,EAAE,CAAC;cACZ,CAAC;aACF,IAAI,CAAC,SAAS,EAAE,CAAC;aACjB,IAAI,CAAC,UAAU,GAAG;iBACd,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;iBACzB,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;iBAC7B,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;cACtD,CAAC;SACN,CAAC;SAED,UAAU,CAAC,aAAqB,EAAE,GAAG,MAAM;aACvC,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;aACtD,MAAM,GAAG,GAAG,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;iBACvD,eAAM,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,oCAAoC,CAAC,CAAC;iBAChE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACrB,CAAC,CACA,CAAC;aAEF,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;aACpC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;aAClC,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;aAC1C,MAAM,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;SAClE,CAAC;SAED,aAAa,CAAC,aAAa,EAAE,GAAG,MAAM;aAClC,MAAM,IAAI,GAAG,KAAK,CAAC,SAAS,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC,CAAC;aACtD,MAAM,GAAG,GAAG,aAAa,CAAC,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,GAAG,EAAE,EAAE;iBACvD,eAAM,CAAC,GAAG,GAAG,IAAI,CAAC,MAAM,EAAE,oCAAoC,CAAC,CAAC;iBAChE,MAAM,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;aACrB,CAAC,CACA,CAAC;aAEF,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;aACpC,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aACrC,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;aAC1C,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;SAC9D,CAAC;SAED,2CAA2C;SAC3C,oBAAoB,CAAC,KAAW,EAAE,OAAgB;aAC9C,IAAI,GAAG,GAAG,OAAO,IAAI,mBAAQ,CAAC,eAAe,CAAC;aAE9C,IAAI,KAAK,CAAC;aACV,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;iBACR,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;qBACX,GAAG,GAAG,CAAC,KAAK,CAAC,IAAI,gBAAc,CAAC,CAAC,CAAC,CAAC,mBAAQ,CAAC,aAAa,CAAC,CAAC;yBACvD,CAAC,KAAK,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC,CAAC,mBAAQ,CAAC,oBAAoB,CAAC,CAAC;6BAC/D,CAAC,KAAK,CAAC,IAAI,2BAAyB,CAAC,CAAC,CAAC,CAAC,mBAAQ,CAAC,gBAAgB,CAAC,CAAC;iCAC/D,CAAC,KAAK,CAAC,IAAI,0BAAwB,CAAC,CAAC,CAAC,CAAC,mBAAQ,CAAC,gBAAgB,CAAC,CAAC;qCAC9D,CAAC,KAAK,CAAC,IAAI,sBAAmB,CAAC,CAAC,CAAC,CAAC,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;yCAC3D,mBAAQ,CAAC,eAAe,CAAC;qBAE7C,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,oBAAkB,CAAC,CAAC,CAAC;yBAC/B,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;6BACjD,GAAG,GAAG,mBAAQ,CAAC,kBAAkB,CAAC;yBACtC,CAAC;yBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;6BACnF,GAAG,GAAG,mBAAQ,CAAC,kBAAkB,CAAC;yBACtC,CAAC;qBACL,CAAC;iBACL,CAAC;iBAED,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;aACxB,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,KAAK,GAAG,SAAS,CAAC;aACtB,CAAC;aAED,GAAG,GAAG,GAAG,CAAC,OAAO,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;aAE/B,EAAE,CAAC,CAAC,KAAK,IAAI,OAAO,KAAK,CAAC,UAAU,KAAK,QAAQ,CAAC,CAAC,CAAC;iBAChD,MAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;iBAC1B,MAAM,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC;iBAC9B,MAAM,mBAAmB,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,CAAC;iBAC3E,MAAM,MAAM,GAAG,KAAK,CAAC,KAAK,GAAG,mBAAmB,GAAG,CAAC,CAAC;iBACrD,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;aACnE,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC;iBACpC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC;iBAClC,MAAM,MAAM,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC;iBAC1C,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,EAAE,GAAG,CAAC,CAAC;aACnE,CAAC;SACL,CAAC;SAED,oBAAoB,CAAC,KAAM,EAAE,OAAQ;aACjC,MAAM,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC;SACpD,CAAC;SAED,uBAAuB,CAAC,KAAM,EAAE,OAAQ;aACpC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,OAAO,CAAC,CAAC,CAAC;SAC1E,CAAC;SAED,eAAe;aACX,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC;iBACvB,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;aAChC,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,QAAQ,GAAc,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;iBACxD,EAAE,CAAC,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;qBACvC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;yBACvC,MAAM,CAAC,GAAY,QAAQ,CAAC,CAAC,CAAC,CAAC;yBAC/B,IAAI,IAAI,CAAC;yBACT,IAAI,GAAG;6BACH,IAAI,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,aAAa;6BAClD,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;0BAC3D,CAAC;yBACF,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;6BACpB,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;yBACzB,CAAC;yBACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;6BAClB,IAAI,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;yBACrB,CAAC;yBACD,MAAM,QAAQ,GAAG;6BACb,KAAK,EAAE;iCACH,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,IAAI;iCACtB,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,MAAM;iCAC1B,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;8BACrB;6BACD,GAAG,EAAE;iCACD,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,IAAI;iCACpB,MAAM,EAAE,CAAC,CAAC,GAAG,CAAC,GAAG,CAAC,MAAM;iCACxB,MAAM,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;8BACrB;0BACJ,CAAC;yBACF,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;qBAClC,CAAC;iBACL,CAAC;aACL,CAAC;SACL,CAAC;SAED,wDAAwD;SAExD,WAAW,CAAC,KAAK;aACb,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;SAC7D,CAAC;SAED,YAAY,CAAC,KAAe;aACxB,MAAM,CAAC,GAAe;iBAClB,IAAI,EAAE,iBAAS,CAAC,KAAK,CAAC,IAAI,CAAC;iBAC3B,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;cACjC,CAAC;aACF,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;iBACpB,CAAC,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;aACvC,CAAC;aACD,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;iBAClB,CAAC,CAAC,GAAG,GAAG;qBACJ,KAAK,EAAE;yBACH,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;yBAC3B,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM;sBAClC;qBACD,GAAG,EAAE;yBACD,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;yBAC7B,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;sBACtD;kBACJ,CAAC;aACN,CAAC;aACD,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,8BAA4B,CAAC,CAAC,CAAC;iBACzC,MAAM,OAAO,GAAG,KAAK,CAAC,OAAiB,CAAC;iBACxC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAe,CAAC;iBACpC,CAAC,CAAC,KAAK,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;aACjC,CAAC;aAED,MAAM,CAAC,CAAC,CAAC;SACb,CAAC;SAED,SAAS;aACL,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;aAE7B,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aAC3C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aAC/C,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;aAErE,IAAI,CAAC,eAAe,EAAE,CAAC;aAEvB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,KAAK,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,CAAC;iBAChD,IAAI,CAAC,WAAW,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;iBAC5C,IAAI,CAAC,WAAW,CAAC,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;iBAChD,IAAI,CAAC,WAAW,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;aAC1E,CAAC;aAED,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;aAChC,IAAI,CAAC,iBAAiB,GAAG,CAAC,KAAK,CAAC,UAAU,KAAK,IAAI,CAAC,UAAU,CAAC,CAAC;aAEhE,EAAE,CAAC,CAAC,IAAI,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC;iBAChE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,IAAI,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC;qBAC9D,IAAI,CAAC,IAAI,kBAAgB,CAAC;iBAC9B,CAAC;aACL,CAAC;aACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC;aAEtB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,gBAAc,CAAC,CAAC,CAAC;iBAChD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC;aAC9C,CAAC;aAED,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAED,cAAc;aACV,IAAI,CAAC,eAAe,EAAE,CAAC;aAEvB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;aACxC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;iBACrB,sCAAsC;iBACtC,0CAA0C;iBAC1C,IAAI,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;iBAElB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC;aAC/C,CAAC;aAED,4BAA4B;aAC5B,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC;aACvB,IAAI,CAAC,SAAS,EAAE,CAAC;aAEjB,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAED,UAAU;aACN,MAAM,CAAC;iBACH,KAAK,EAAE,IAAI,CAAC,WAAW,CAAC,KAAK;iBAC7B,IAAI,EAAE,IAAI,CAAC,WAAW,CAAC,IAAI;iBAC3B,MAAM,EAAE,IAAI,CAAC,WAAW,CAAC,MAAM;cAClC,CAAC;SACN,CAAC;SAED,SAAS,CAAC,KAAK,EAAE,aAAa,GAAG,CAAC;aAC9B,IAAI,MAAM,GAAG,KAAK,CAAC,KAAK,GAAG,KAAK,CAAC,SAAS,CAAC;aAC3C,IAAI,IAAI,GAAG,KAAK,CAAC,UAAU,CAAC;aAC5B,EAAE,CAAC,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;iBACb,MAAM,IAAI,aAAa,CAAC;iBACxB,IAAI,EAAE,CAAC;aACX,CAAC;aACD,MAAM,CAAC;iBACH,KAAK,EAAE,KAAK,CAAC,KAAK;iBAClB,IAAI,EAAE,IAAI;iBACV,MAAM,EAAE,MAAM;cACjB,CAAC;SACN,CAAC;SAED,QAAQ,CAAC,MAAc,EAAE,IAAI;aACzB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC;iBACpB,IAAI,CAAC,KAAK,GAAG,CAAC,MAAM,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,CAAC;aACvD,CAAC;aAED,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,GAAG,GAAG;qBACP,KAAK,EAAE;yBACH,IAAI,EAAE,MAAM,CAAC,IAAI;yBACjB,MAAM,EAAE,MAAM,CAAC,MAAM;sBACxB;qBACD,GAAG,EAAE;yBACD,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;yBAC1B,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM;sBACjC;kBACJ,CAAC;iBACF,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,CAAC,CAAC;qBACrB,IAAI,CAAC,GAAG,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;iBACzC,CAAC;aACL,CAAC;aAED,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAChB,MAAM,QAAQ,GAAG;qBACb,KAAK,EAAE;yBACH,IAAI,EAAE,MAAM,CAAC,IAAI;yBACjB,MAAM,EAAE,MAAM,CAAC,MAAM;yBACrB,MAAM,EAAE,MAAM,CAAC,KAAK;sBACvB;qBACD,GAAG,EAAE;yBACD,IAAI,EAAE,IAAI,CAAC,UAAU,CAAC,IAAI;yBAC1B,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,MAAM;yBAC9B,MAAM,EAAE,IAAI,CAAC,UAAU,CAAC,KAAK;sBAChC;kBACJ,CAAC;iBACF,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC;aAClC,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,2DAA2D;SAC3D,uCAAuC;SAEvC,MAAM,CAAC,KAAK;aACR,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;aAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC;iBAC3D,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;aACrC,CAAC;SACL,CAAC;SAED,iFAAiF;SAEjF,oBAAoB;aAChB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACvB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;iBAC7B,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,IAAI,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC;qBACzD,IAAI,CAAC,SAAS,EAAE,CAAC;iBACrB,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,IAAI,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC;qBAChE,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;iBACxC,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,eAAe,CAAC,CAAC;iBAClE,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACrB,CAAC;SACL,CAAC;SAED,wDAAwD;SACxD,uCAAuC;SAEvC,aAAa,CAAC,OAAO;aACjB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;aAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,oBAAkB,IAAI,KAAK,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;iBAC1D,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;aACrC,CAAC;SACL,CAAC;SAED,kEAAkE;SAElE,KAAK,CAAC,KAAK;aACP,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,KAAK,CAAC;SACtF,CAAC;SAED,8DAA8D;SAE9D,YAAY,CAAC,OAAO;aAChB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,oBAAkB,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,OAAO,CAAC;SACrF,CAAC;SAED,eAAe,CAAC,UAAU;aACtB,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,UAAU,CAAC;SAC3F,CAAC;SAED,yEAAyE;SACzE,wEAAwE;SAExE,sBAAsB,CAAC,OAAO;aAC1B,MAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,OAAO,CAAC;SACxF,CAAC;SAED,0DAA0D;SAE1D,WAAW;aACP,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC;iBAC3C,MAAM,CAAC,KAAK,CAAC;aACjB,CAAC;aACD,MAAM,EAAE,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;aAChC,MAAM,CAAC,EAAE,KAAK,GAAG;iBACb,EAAE,KAAK,IAAI;iBACX,EAAE,KAAK,KAAK;iBACZ,EAAE,KAAK,IAAI;iBACX,EAAE,KAAK,IAAI;iBACX,EAAE,KAAK,IAAI;iBACX,EAAE,KAAK,IAAI;iBACX,EAAE,KAAK,KAAK;iBACZ,EAAE,KAAK,KAAK;iBACZ,EAAE,KAAK,MAAM;iBACb,EAAE,KAAK,IAAI;iBACX,EAAE,KAAK,IAAI;iBACX,EAAE,KAAK,IAAI,CAAC;SACpB,CAAC;SAED,yBAAyB;SACzB,EAAE;SACF,wGAAwG;SACxG,4GAA4G;SAC5G,8GAA8G;SAC9G,EAAE;SACF,mGAAmG;SACnG,gDAAgD;SAChD,EAAE;SACF,4BAA4B;SAC5B,uBAAuB;SACvB,yBAAyB;SACzB,EAAE;SACF,kGAAkG;SAClG,wCAAwC;SACxC,EAAE;SACF,+CAA+C;SAC/C,EAAE;SACF,+DAA+D;SAC/D,EAAE;SACF,mGAAmG;SACnG,mGAAmG;SACnG,qGAAqG;SACrG,EAAE;SACF,gHAAgH;SAChH,iHAAiH;SACjH,+CAA+C;SAC/C,EAAE;SACF,iHAAiH;SACjH,gHAAgH;SAChH,uDAAuD;SAEvD,mBAAmB,CAAC,aAAa;aAC7B,MAAM,wBAAwB,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;aAC/D,MAAM,0BAA0B,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC;aACnE,MAAM,sCAAsC,GAAG,IAAI,CAAC,OAAO,CAAC,8BAA8B,CAAC;aAE3F,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;aACrC,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC;aACvC,IAAI,CAAC,OAAO,CAAC,8BAA8B,GAAG,IAAI,CAAC;aAEnD,MAAM,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aACxC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,8BAA8B,KAAK,IAAI,CAAC,CAAC,CAAC;iBACvD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,OAAO,CAAC,8BAA8B,CAAC,CAAC;aAC3E,CAAC;aAED,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,wBAAwB,CAAC;aACzD,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,0BAA0B,CAAC;aAC7D,IAAI,CAAC,OAAO,CAAC,8BAA8B,GAAG,sCAAsC,CAAC;aAErF,MAAM,CAAC,MAAM,CAAC;SAClB,CAAC;SAED,mBAAmB,CAAC,aAAa;aAC7B,MAAM,wBAAwB,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC;aAC/D,MAAM,0BAA0B,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC;aACnE,MAAM,sCAAsC,GAAG,IAAI,CAAC,OAAO,CAAC,8BAA8B,CAAC;aAE3F,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;aACrC,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC;aACvC,IAAI,CAAC,OAAO,CAAC,8BAA8B,GAAG,IAAI,CAAC;aAEnD,MAAM,MAAM,GAAG,aAAa,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAExC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,gBAAgB,IAAI,wBAAwB,CAAC;aAC1F,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,kBAAkB,IAAI,0BAA0B,CAAC;aAChG,IAAI,CAAC,OAAO,CAAC,8BAA8B,GAAG,sCAAsC,IAAI,IAAI,CAAC,OAAO,CAAC,8BAA8B,CAAC;aAEpI,MAAM,CAAC,MAAM,CAAC;SAClB,CAAC;SAED,gBAAgB;aACZ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;aACrB,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;iBACjC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,gBAAc,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACxD,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC9C,CAAC;iBACD,IAAI,CAAC,UAAU,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;iBAC/C,IAAI,CAAC,UAAU,CAAC,IAAI,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC;iBAC7C,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,CAAC;aACrD,CAAC;SACL,CAAC;SAED,yDAAyD;SAEzD,sBAAsB;aAClB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,IAAqB,CAAC;aAC1B,IAAI,KAAK,EAAE,GAAG,CAAC;aAEf,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC1B;qBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;yBACpF,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBACjD,CAAC;qBACD,IAAI,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;qBACrI,KAAK,CAAC;iBAEV,4BAA0B;iBAC1B;qBACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;yBAC9C,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;qBAC9E,CAAC;qBACD,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;qBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;qBACtC,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;qBACzB,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;qBAC9B,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,EAAE,GAAG,CAAC,CAAC,CAAC;qBAC/D,KAAK,CAAC;iBAEV;qBACI,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;qBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;qBACtC,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;qBACzB,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;qBAC9B,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,KAAK,MAAM,EAAE,GAAG,CAAC,CAAC,CAAC;qBAC1E,KAAK,CAAC;iBAEV;qBACI,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;qBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;qBACtC,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;qBACzB,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;qBAC9B,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC,CAAC;qBACxD,KAAK,CAAC;iBAEV;qBACI,IAAI,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;qBACnC,KAAK,CAAC;iBAEV;qBACI,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;yBAC3B,KAAK,GAAG;6BACJ,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;6BACtC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;6BAC3D,KAAK,CAAC;yBACV,KAAK,GAAG;6BACJ,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;6BAC5D,KAAK,CAAC;yBACV,KAAK,GAAG;6BACJ,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;6BAC7D,KAAK,CAAC;yBACV,KAAK,GAAG,CAAC;yBACT,KAAK,IAAI;6BACL,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;6BACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;6BACtC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC;6BAC5C,KAAK,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;6BAC9B,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;6BAC9B,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,KAAe,EAAE,GAAG,EAAE,KAAK,CAAC,OAAO,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;6BAC1G,KAAK,CAAC;yBACV;6BACI,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;qBAC3D,CAAC;qBACD,KAAK,CAAC;iBAEV;qBACI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;yBAChF,IAAI,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;qBACtC,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;yBAC1D,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC,CAAC;qBAC5E,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;yBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;yBACtC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;6BAChC,IAAI,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;yBAC1C,CAAC;yBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;6BACnC,IAAI,CAAC,SAAS,EAAE,CAAC;6BACjB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;yBAC1D,CAAC;yBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;6BACpC,IAAI,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;yBACvC,CAAC;yBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;6BAChC,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;yBAClC,CAAC;yBAAC,IAAI,CAAC,CAAC;6BACJ,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;yBACvD,CAAC;qBACL,CAAC;qBACD,KAAK,CAAC;iBAEV;qBACI,IAAI,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;aAC3D,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,wDAAwD;SAExD,kBAAkB;aACd,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACnB,MAAM,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;aACrE,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC,CAAC;SAC5D,CAAC;SAED,qBAAqB;aACjB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,QAAQ,GAAkC,EAAE,CAAC;aAEnD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;iBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACxB,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;qBAC3B,MAAM,OAAO,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;qBAC1C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBACnB,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;yBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;yBACtC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACrB,CAAC;qBACD,QAAQ,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;iBAC3B,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;qBACxE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACrB,CAAC;iBACL,CAAC;aACL,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;SACnE,CAAC;SAED,yDAAyD;SAEzD,mBAAmB,CAAC,MAAM;aACtB,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;aACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;aAEtC,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aAC3C,MAAM,4BAA4B,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;aACvE,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,MAAM,CAAC,MAAM,CAAC;aAClD,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;aACxE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,eAAe,CAAC,CAAC,CAAC;iBAChD,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,eAAe,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;aACzE,CAAC;aACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACzC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,QAAQ,EAAE,MAAM,CAAC,OAAO,CAAC,CAAC;aAClE,CAAC;aACD,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,cAAc,CAAC;aACrC,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,4BAA4B,CAAC;aAEjE,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,2BAA2B;aACvB,MAAM,WAAW,GAAG,KAAK,CAAC;aAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aACnD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;aAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;aAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;aAChD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,kBAAkB,CAAC;aAE7C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;SACtG,CAAC;SAED,gCAAgC;aAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aACnD,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aACzC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC;aAChC,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC;aAC1B,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;aAC5C,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;aAChD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,kBAAkB,CAAC;aAC7C,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,aAAa,CAAC;aAEnC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,uBAAuB,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,CAAC,CAAC,CAAC;SAC9F,CAAC;SAED,sBAAsB;aAClB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;aAE/B,IAAI,GAAqB,CAAC;aAC1B,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;iBACjB,2BAAyB;iBACzB;qBACI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;yBACrC,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;qBACrE,CAAC;qBACD,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;qBACpC,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAe,EAAE,GAAG,CAAC,CAAC,CAAC;qBACxE,KAAK,CAAC;iBAEV,wBAAsB;iBACtB,4BAA0B;iBAC1B,yBAAuB;iBACvB;qBACI,GAAG,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;qBAC5D,KAAK,CAAC;iBAEV;qBACI,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC;yBACtB,GAAG,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;yBAC/D,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACrB,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;qBAC3C,CAAC;qBACD,KAAK,CAAC;iBAEV;qBACI,GAAG,GAAG,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;aAC/C,CAAC;aAED,MAAM,CAAC,GAAG,CAAC;SACf,CAAC;SAED,aAAa,CAAC,GAAG,EAAE,KAAK;aACpB,MAAM,CAAC,CAAC,GAAG,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,IAAI,GAAG,CAAC,IAAI,KAAK,KAAK,CAAC;iBACzD,CAAC,GAAG,CAAC,IAAI,KAAK,eAAM,CAAC,OAAO,IAAI,GAAG,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC;SAC7D,CAAC;SAED,mBAAmB,CAAC,QAAQ;aACxB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;aAE7B,IAAI,IAAY,CAAC;aACjB,IAAI,GAAG,GAA4B,IAAI,CAAC;aACxC,IAAI,KAAK,GAA8B,IAAI,CAAC;aAE5C,IAAI,QAAQ,GAAG,KAAK,CAAC;aACrB,IAAI,MAAM,GAAG,KAAK,CAAC;aACnB,IAAI,SAAS,GAAG,KAAK,CAAC;aACtB,IAAI,OAAO,GAAG,KAAK,CAAC;aAEpB,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC;iBAClC,MAAM,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;iBACvB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC3B,OAAO,GAAG,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,EAAE,KAAK,OAAO,CAAC;qBACjD,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBACjF,GAAG,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,EAAE,CAAC,CAAC,CAAC;aACjG,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACzB,IAAI,CAAC,SAAS,EAAE,CAAC;aACrB,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC3B,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;aACxC,CAAC;aAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACxE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,IAAI,oBAAoB,CAAC,CAAC,CAAC;iBAC/F,IAAI,GAAG,KAAK,CAAC;iBACb,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC3B,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;iBACpC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC;iBAChC,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAErC,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,IAAI,CAAC,OAAO,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,IAAI,oBAAoB,CAAC,CAAC,CAAC;iBACtG,IAAI,GAAG,KAAK,CAAC;iBACb,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC3B,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;iBACpC,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;aAErC,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,IAAI,KAAK,CAAC,KAAK,KAAK,GAAG,IAAI,oBAAoB,CAAC,CAAC,CAAC;iBACxF,IAAI,GAAG,MAAM,CAAC;iBACd,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC3B,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;iBACpC,KAAK,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBACpC,MAAM,GAAG,IAAI,CAAC;aAElB,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,EAAE,CAAC,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;qBACP,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC9C,CAAC;iBAED,IAAI,GAAG,MAAM,CAAC;iBACd,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC,CAAC;qBAC9B,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;yBACpD,EAAE,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;6BACjB,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,sBAAsB,CAAC,CAAC;yBACxD,CAAC;yBACD,QAAQ,CAAC,KAAK,GAAG,IAAI,CAAC;qBAC1B,CAAC;qBACD,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;iBAErE,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACzB,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,gCAAgC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,2BAA2B,EAAE,CAAC;qBAC/F,MAAM,GAAG,IAAI,CAAC;iBAElB,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC;qBACzC,MAAM,EAAE,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;qBACjE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,IAAI,CAAC,OAAO,CAAC,8BAA8B,GAAG,IAAI,CAAC,SAAS,CAAC;yBAC7D,IAAI,CAAC,SAAS,EAAE,CAAC;yBACjB,SAAS,GAAG,IAAI,CAAC;yBACjB,MAAM,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;yBACtE,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;qBACtE,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,SAAS,GAAG,IAAI,CAAC;yBACjB,KAAK,GAAG,EAAE,CAAC;qBACf,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;iBAChD,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,GAAuB,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;SACrH,CAAC;SAED,sBAAsB;aAClB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,UAAU,GAAoC,EAAE,CAAC;aACvD,MAAM,QAAQ,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;aAClC,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;iBACtB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACpG,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACnB,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBAChC,CAAC;aACL,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,UAAU,CAAC,CAAC,CAAC;SACtE,CAAC;SAED,wDAAwD;SAExD,iBAAiB;aACb,eAAM,CAAC,IAAI,CAAC,SAAS,CAAC,IAAe,EAAE,kDAAkD,CAAC,CAAC;aAE3F,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;aAC/B,MAAM,GAAG,GAAG,KAAK,CAAC,KAAe,CAAC;aAClC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAgB,CAAC;aAEtC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,CAAC,IAAe,CAAC,CAAC,CAAC;SACjG,CAAC;SAED,oBAAoB;aAChB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,sBAAmB,CAAC,CAAC,CAAC;iBACzC,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;aAC/B,MAAM,GAAG,GAAG,KAAK,CAAC,KAAe,CAAC;aAClC,MAAM,MAAM,GAAG,KAAK,CAAC,MAAgB,CAAC;aAEtC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE,GAAG,EAAE,MAAM,EAAE,EAAE,KAAK,CAAC,IAAe,CAAC,CAAC,CAAC;SACjG,CAAC;SAED,oBAAoB;aAChB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,WAAW,GAAsB,EAAE,CAAC;aAC1C,MAAM,MAAM,GAA2B,EAAE,CAAC;aAE1C,IAAI,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;aACrC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACnB,OAAO,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC;iBACjB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC;iBACzC,KAAK,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBACpC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACvB,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;SAC9E,CAAC;SAED,wDAAwD;SAExD,8BAA8B,CAAC,IAAI;aAC/B,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;iBAChB,KAAK,eAAM,CAAC,UAAU,CAAC;iBACvB,KAAK,eAAM,CAAC,gBAAgB,CAAC;iBAC7B,KAAK,eAAM,CAAC,WAAW,CAAC;iBACxB,KAAK,eAAM,CAAC,iBAAiB;qBACzB,KAAK,CAAC;iBACV,KAAK,eAAM,CAAC,aAAa;qBACrB,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,WAAW,CAAC;qBAC/B,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBACnD,KAAK,CAAC;iBACV,KAAK,eAAM,CAAC,eAAe;qBACvB,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,YAAY,CAAC;qBAChC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;yBAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;6BAC5B,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;yBAC1D,CAAC;qBACL,CAAC;qBACD,KAAK,CAAC;iBACV,KAAK,eAAM,CAAC,gBAAgB;qBACxB,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,aAAa,CAAC;qBACjC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;yBAC9C,MAAM,QAAQ,GAAG,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;yBACpC,IAAI,CAAC,8BAA8B,CAAC,QAAQ,CAAC,IAAI,KAAK,eAAM,CAAC,aAAa,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;qBAC5G,CAAC;qBACD,KAAK,CAAC;iBACV,KAAK,eAAM,CAAC,oBAAoB;qBAC5B,IAAI,CAAC,IAAI,GAAG,eAAM,CAAC,iBAAiB,CAAC;qBACrC,OAAO,IAAI,CAAC,QAAQ,CAAC;qBACrB,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAC/C,KAAK,CAAC;iBACV;qBACI,8CAA8C;qBAC9C,KAAK,CAAC;aACd,CAAC;SACL,CAAC;SAED,oBAAoB;aAChB,IAAI,IAAI,CAAC;aAET,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iBACtB,CAAC;iBACD,IAAI,GAAG;qBACH,IAAI,EAAE,yBAAyB;qBAC/B,MAAM,EAAE,EAAE;qBACV,KAAK,EAAE,KAAK;kBACf,CAAC;aACN,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;iBAClC,MAAM,MAAM,GAAG,EAAE,CAAC;iBAClB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;qBACpB,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC;qBACrC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;qBACtB,CAAC;qBACD,IAAI,GAAG;yBACH,IAAI,EAAE,yBAAyB;yBAC/B,MAAM,EAAE,CAAC,IAAI,CAAC;yBACd,KAAK,EAAE,KAAK;sBACf,CAAC;iBACN,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,KAAK,GAAG,KAAK,CAAC;qBAClB,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;qBACrC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;qBAEhE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,MAAM,WAAW,GAAsB,EAAE,CAAC;yBAE1C,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;yBACxC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBACvB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,gBAAc,EAAE,CAAC;6BACvC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iCACnB,KAAK,CAAC;6BACV,CAAC;6BACD,IAAI,CAAC,SAAS,EAAE,CAAC;6BACjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iCAClB,IAAI,CAAC,SAAS,EAAE,CAAC;iCACjB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;qCAC1C,IAAI,CAAC,8BAA8B,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;iCACxD,CAAC;iCACD,KAAK,GAAG,IAAI,CAAC;iCACb,IAAI,GAAG;qCACH,IAAI,EAAE,yBAAyB;qCAC/B,MAAM,EAAE,WAAW;qCACnB,KAAK,EAAE,KAAK;kCACf,CAAC;6BACN,CAAC;6BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iCAC3B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;qCACjC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iCAC9C,CAAC;iCACD,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC;iCAChD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iCACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qCACpB,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;iCACtB,CAAC;iCACD,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;iCACtC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;qCAC1C,IAAI,CAAC,8BAA8B,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;iCACxD,CAAC;iCACD,KAAK,GAAG,IAAI,CAAC;iCACb,IAAI,GAAG;qCACH,IAAI,EAAE,yBAAyB;qCAC/B,MAAM,EAAE,WAAW;qCACnB,KAAK,EAAE,KAAK;kCACf,CAAC;6BACN,CAAC;6BAAC,IAAI,CAAC,CAAC;iCACJ,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;6BAC/E,CAAC;6BACD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;iCACR,KAAK,CAAC;6BACV,CAAC;yBACL,CAAC;yBACD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;6BACT,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;yBAC/F,CAAC;qBACL,CAAC;qBAED,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;yBACT,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;yBACjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;6BACnB,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,IAAI,IAAI,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;iCAC3D,KAAK,GAAG,IAAI,CAAC;iCACb,IAAI,GAAG;qCACH,IAAI,EAAE,yBAAyB;qCAC/B,MAAM,EAAE,CAAC,IAAI,CAAC;qCACd,KAAK,EAAE,KAAK;kCACf,CAAC;6BACN,CAAC;6BACD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;iCACT,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,CAAC,CAAC;qCACjC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iCAC9C,CAAC;iCAED,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC;qCAC1C,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,WAAW,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;yCAC/C,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC;qCAC7D,CAAC;iCACL,CAAC;iCAAC,IAAI,CAAC,CAAC;qCACJ,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,CAAC;iCAC9C,CAAC;iCAED,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;iCACzF,IAAI,GAAG;qCACH,IAAI,EAAE,yBAAyB;qCAC/B,MAAM,EAAE,UAAU;qCAClB,KAAK,EAAE,KAAK;kCACf,CAAC;6BACN,CAAC;yBACL,CAAC;yBACD,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;qBAC1C,CAAC;iBACL,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,iEAAiE;SAEjE,cAAc;aACV,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,IAAI,GAA+B,EAAE,CAAC;aAC5C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACnB,OAAO,IAAI,EAAE,CAAC;qBACV,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;yBACxD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;qBAC7D,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAChB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,KAAK,CAAC;qBACV,CAAC;qBACD,IAAI,CAAC,oBAAoB,EAAE,CAAC;qBAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,KAAK,CAAC;qBACV,CAAC;iBACL,CAAC;aACL,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,gBAAgB,CAAC,KAAK;aAClB,MAAM,CAAC,KAAK,CAAC,IAAI,uBAAqB;iBAClC,KAAK,CAAC,IAAI,oBAAkB;iBAC5B,KAAK,CAAC,IAAI,2BAAyB;iBACnC,KAAK,CAAC,IAAI,wBAAsB,CAAC;SACzC,CAAC;SAED,mBAAmB;aACf,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;aAC/B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAChC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;aACrC,CAAC;aACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;SACjE,CAAC;SAED,kBAAkB;aACd,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,EAAE,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;aACtC,eAAM,CAAC,EAAE,CAAC,IAAI,KAAK,KAAK,EAAE,sCAAsC,CAAC,CAAC;aAElE,IAAI,IAAI,CAAC;aACT,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,QAAQ,CAAC,CAAC,CAAC;qBAC/G,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;qBAC5C,IAAI,GAAG,IAAI,IAAI,CAAC,YAAY,CAAC,EAAE,EAAE,QAAQ,CAAC,CAAC;iBAC/C,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC9C,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;iBACrC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC9C,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,2BAA2B,CAAC,CAAC;iBAC1E,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC;iBAC1D,IAAI,GAAG,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;iBAC5C,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;iBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;aAC1C,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC;SACrC,CAAC;SAED,kBAAkB;aACd,MAAM,GAAG,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;aAC7C,IAAI,CAAC,OAAO,CAAC,8BAA8B,GAAG,IAAI,CAAC;aACnD,MAAM,CAAC,GAAG,CAAC;SACf,CAAC;SAED,mBAAmB;aACf,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,IAAI,GAA+B,EAAE,CAAC;aAC5C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACnB,OAAO,IAAI,EAAE,CAAC;qBACV,MAAM,IAAI,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC;yBACxD,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC;qBACtD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBAChB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,KAAK,CAAC;qBACV,CAAC;qBACD,IAAI,CAAC,oBAAoB,EAAE,CAAC;qBAC5B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,KAAK,CAAC;qBACV,CAAC;iBACL,CAAC;aACL,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,eAAe;aACX,IAAI,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC;aACxC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;iBACR,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;iBACvC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;iBAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;iBAChC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;iBACjC,KAAK,GAAG,CAAC,IAAI,CAAC,IAAI,uBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC;aACrE,CAAC;aAED,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAED,eAAe;aACX,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;aAC7B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,MAAM,EAAE,CAAC,CAAC;SAClD,CAAC;SAED,oCAAoC;aAChC,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;aAClC,MAAM,UAAU,GAAG,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;aAExD,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;aAC7C,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;aAE5B,IAAI,IAAI,CAAC;aACT,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;iBAC5D,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;iBACzB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBAC7C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAC3D,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC9C,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;aACtH,CAAC;aAED,OAAO,IAAI,EAAE,CAAC;iBACV,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAClB,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;qBACtC,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC;qBACvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;qBAC5C,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;iBAEtG,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACzB,MAAM,UAAU,GAAG,UAAU,IAAI,CAAC,UAAU,CAAC,UAAU,KAAK,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;qBACvF,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;qBACtC,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;qBACxC,MAAM,IAAI,GAAG,UAAU,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;qBAC7E,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,MAAM,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;yBACnD,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;qBACpD,CAAC;qBACD,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;qBACtF,EAAE,CAAC,CAAC,UAAU,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBACjC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;6BACnC,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;yBACjD,CAAC;yBACD,IAAI,GAAG;6BACH,IAAI,EAAE,yBAAyB;6BAC/B,MAAM,EAAE,IAAI;6BACZ,KAAK,EAAE,IAAI;0BACd,CAAC;qBACN,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACzB,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;qBACtC,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC;qBACvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;qBAChE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACjB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;iBAExG,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,sBAAmB,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;qBACvE,MAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;qBAC1C,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;iBAErG,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,KAAK,CAAC;iBACV,CAAC;aACL,CAAC;aACD,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,eAAe,CAAC;aAEvC,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,UAAU;aACN,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC5B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACvC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC9C,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;SACjD,CAAC;SAED,2BAA2B;aACvB,eAAM,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,EAAE,mDAAmD,CAAC,CAAC;aAElF,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC5C,IAAI,IAAI,GAAG,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC,CAAC;iBACxF,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,CAAC;aAE/G,OAAO,IAAI,EAAE,CAAC;iBACV,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAClB,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;qBACtC,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC;qBACvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,eAAe,CAAC,CAAC;qBAChE,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACjB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;iBAElF,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACzB,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;qBACtC,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC;qBACvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;qBAC5C,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;iBAEhF,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,sBAAmB,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;qBACvE,MAAM,KAAK,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;qBAC1C,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,wBAAwB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;iBAE/E,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,KAAK,CAAC;iBACV,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,yDAAyD;SAEzD,qBAAqB;aACjB,IAAI,IAAI,CAAC;aACT,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;aAElC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACvC,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;iBACxC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;iBAC/B,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;iBAC3D,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACrG,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,eAAe,CAAC,CAAC;iBACjD,CAAC;iBACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;qBACnC,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,sBAAsB,CAAC,CAAC;iBACxD,CAAC;iBACD,MAAM,MAAM,GAAG,IAAI,CAAC;iBACpB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;iBACjF,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;iBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;aAC1C,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;iBAC3E,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC;qBACtE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBACvC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,IAAI,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;6BACrG,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,gBAAgB,CAAC,CAAC;yBAClD,CAAC;yBACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;6BACnC,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,sBAAsB,CAAC,CAAC;yBACxD,CAAC;yBACD,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;yBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;yBACtC,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC;yBACxC,MAAM,MAAM,GAAG,KAAK,CAAC;yBACrB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,EAAE,MAAM,CAAC,CAAC,CAAC;qBACxG,CAAC;iBACL,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,sDAAsD;SAEtD,oBAAoB;aAChB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,SAAS,EAAE,CAAC;aACjB,MAAM,QAAQ,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAC7C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;SACnE,CAAC;SAED,oBAAoB;aAChB,IAAI,IAAI,CAAC;aAET,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;iBACxE,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC;iBAC1F,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;iBAC/B,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;iBAC3D,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;iBACxE,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,KAAK,QAAQ,IAAI,IAAI,CAAC,QAAQ,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,CAAC,CAAC,CAAC;qBAChG,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,YAAY,CAAC,CAAC;iBAC9C,CAAC;iBACD,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;iBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;aAC1C,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,IAAI,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBACpE,IAAI,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;aACvC,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;aACxC,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,6BAA6B;aACzB,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;aAElC,IAAI,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,oBAAoB,CAAC,CAAC;aAC/D,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,eAAe,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBAC3D,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;iBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;iBACtC,MAAM,IAAI,GAAG,IAAI,CAAC;iBAClB,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;iBAC3E,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;aACnG,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,mDAAmD;SACnD,+DAA+D;SAC/D,yDAAyD;SACzD,8DAA8D;SAC9D,2DAA2D;SAC3D,yDAAyD;SACzD,+DAA+D;SAC/D,+DAA+D;SAE/D,gBAAgB,CAAC,KAAK;aAClB,MAAM,EAAE,GAAG,KAAK,CAAC,KAAK,CAAC;aACvB,IAAI,UAAU,CAAC;aACf,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC;iBAClC,UAAU,GAAG,IAAI,CAAC,kBAAkB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC;aAClD,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,oBAAkB,CAAC,CAAC,CAAC;iBACtC,UAAU,GAAG,CAAC,EAAE,KAAK,YAAY,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACxF,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,UAAU,GAAG,CAAC,CAAC;aACnB,CAAC;aACD,MAAM,CAAC,UAAU,CAAC;SACtB,CAAC;SAED,qBAAqB;aACjB,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;aAElC,IAAI,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;aAExE,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;aAC7B,IAAI,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,KAAK,CAAC,CAAC;aACxC,EAAE,CAAC,CAAC,IAAI,GAAG,CAAC,CAAC,CAAC,CAAC;iBACX,IAAI,CAAC,SAAS,EAAE,CAAC;iBAEjB,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;iBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;iBAEtC,MAAM,OAAO,GAAG,CAAC,UAAU,EAAE,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC7C,IAAI,IAAI,GAAG,IAAI,CAAC;iBAChB,IAAI,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC;iBAEzE,MAAM,KAAK,GAAG,CAAC,IAAI,EAAE,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,CAAC;iBACzC,MAAM,WAAW,GAAa,CAAC,IAAI,CAAC,CAAC;iBACrC,OAAO,IAAI,EAAE,CAAC;qBACV,IAAI,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBAC7C,EAAE,CAAC,CAAC,IAAI,IAAI,CAAC,CAAC,CAAC,CAAC;yBACZ,KAAK,CAAC;qBACV,CAAC;qBAED,mEAAmE;qBACnE,OAAO,CAAC,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,WAAW,CAAC,WAAW,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,EAAE,CAAC;yBACzE,KAAK,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;yBACpB,MAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;yBAC7B,WAAW,CAAC,GAAG,EAAE,CAAC;yBAClB,IAAI,GAAG,KAAK,CAAC,GAAG,EAAE,CAAC;yBACnB,OAAO,CAAC,GAAG,EAAE,CAAC;yBACd,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;yBACzD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC,CAAC;qBACtF,CAAC;qBAED,SAAS;qBACT,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,KAAK,CAAC,CAAC;qBACnC,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;qBACvB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBAC7B,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,6BAA6B,CAAC,CAAC,CAAC;iBAC7E,CAAC;iBAED,sCAAsC;iBACtC,IAAI,CAAC,GAAG,KAAK,CAAC,MAAM,GAAG,CAAC,CAAC;iBACzB,IAAI,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;iBAEhB,IAAI,UAAU,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;iBAC/B,OAAO,CAAC,GAAG,CAAC,EAAE,CAAC;qBACX,MAAM,MAAM,GAAG,OAAO,CAAC,GAAG,EAAE,CAAC;qBAC7B,MAAM,aAAa,GAAG,UAAU,IAAI,UAAU,CAAC,SAAS,CAAC;qBACzD,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,MAAM,EAAE,aAAa,CAAC,CAAC;qBACnD,MAAM,QAAQ,GAAG,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;qBAC9B,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,QAAQ,EAAE,KAAK,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC,CAAC;qBACpF,CAAC,IAAI,CAAC,CAAC;qBACP,UAAU,GAAG,MAAM,CAAC;iBACxB,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,2DAA2D;SAE3D,0BAA0B;aACtB,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;aAElC,IAAI,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,qBAAqB,CAAC,CAAC;aAChE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;iBAEjB,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;iBAC7C,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;iBAC5B,MAAM,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;iBAC5E,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,eAAe,CAAC;iBAEvC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBACjB,MAAM,SAAS,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;iBAE3E,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;iBAC9G,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;iBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;aAC1C,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,2DAA2D;SAE3D,iBAAiB,CAAC,OAAO,EAAE,KAAK;aAC5B,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;iBACjB,KAAK,eAAM,CAAC,UAAU;qBAClB,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,KAAK,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;qBAC/C,KAAK,CAAC;iBACV,KAAK,eAAM,CAAC,WAAW;qBACnB,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC;qBAChD,KAAK,CAAC;iBACV,KAAK,eAAM,CAAC,iBAAiB;qBACzB,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;qBAC5C,KAAK,CAAC;iBACV,KAAK,eAAM,CAAC,YAAY;qBACpB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,QAAQ,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;yBAC7C,EAAE,CAAC,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;6BAC7B,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;yBACvD,CAAC;qBACL,CAAC;qBACD,KAAK,CAAC;iBACV,KAAK,eAAM,CAAC,aAAa;qBACrB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,KAAK,CAAC,UAAU,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;yBAC/C,MAAM,QAAQ,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;yBACrC,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,CAAC,QAAQ,CAAC,IAAI,KAAK,eAAM,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC;qBACxG,CAAC;qBACD,KAAK,CAAC;iBACV;qBACI,KAAK,CAAC;aACd,CAAC;aACD,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,KAAK,YAAY,IAAI,CAAC,UAAU,CAAC,CAAC;SAC1E,CAAC;SAED,6BAA6B,CAAC,IAAI;aAC9B,IAAI,MAAM,GAAG,CAAC,IAAI,CAAC,CAAC;aACpB,IAAI,OAAO,CAAC;aAEZ,IAAI,UAAU,GAAG,KAAK,CAAC;aACvB,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC,CAAC;iBAChB,KAAK,eAAM,CAAC,UAAU;qBAClB,KAAK,CAAC;iBACV,KAAK,yBAAyB;qBAC1B,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;qBACrB,UAAU,GAAG,IAAI,CAAC,KAAK,CAAC;qBACxB,KAAK,CAAC;iBACV;qBACI,MAAM,CAAC,IAAI,CAAC;aACpB,CAAC;aAED,OAAO,GAAG;iBACN,MAAM,EAAE,IAAI;iBACZ,QAAQ,EAAE,EAAE;cACf,CAAC;aAEF,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;iBACrC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;iBACxB,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,eAAM,CAAC,iBAAiB,CAAC,CAAC,CAAC;qBAC1C,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,KAAK,eAAM,CAAC,eAAe,CAAC,CAAC,CAAC;yBAC9C,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC,CAAC,CAAC;6BACvB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;yBAC9C,CAAC;yBACD,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,eAAM,CAAC,UAAU,CAAC;yBACrC,KAAK,CAAC,KAAK,CAAC,IAAI,GAAG,OAAO,CAAC;yBAC3B,OAAO,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;yBAC5B,OAAO,KAAK,CAAC,KAAK,CAAC,QAAQ,CAAC;qBAChC,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,UAAU,IAAI,KAAK,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,IAAI,KAAK,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;qBAClF,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC9C,CAAC;iBACD,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;iBACvC,MAAM,CAAC,CAAC,CAAC,GAAG,KAAK,CAAC;aACtB,CAAC;aAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;iBAClD,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;qBACrC,MAAM,KAAK,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC;qBACxB,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,KAAK,eAAM,CAAC,eAAe,CAAC,CAAC,CAAC;yBACxC,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBAC9C,CAAC;iBACL,CAAC;aACL,CAAC;aAED,EAAE,CAAC,CAAC,OAAO,CAAC,OAAO,KAAK,mBAAQ,CAAC,eAAe,CAAC,CAAC,CAAC;iBAC/C,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC;iBAC/E,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,OAAO,CAAC,OAAO,CAAC,CAAC;aACtD,CAAC;aAED,MAAM,CAAC;iBACH,MAAM,EAAE,OAAO,CAAC,MAAM;iBACtB,MAAM,EAAE,MAAM;iBACd,QAAQ,EAAE,OAAO,CAAC,QAAQ;iBAC1B,eAAe,EAAE,OAAO,CAAC,eAAe;iBACxC,OAAO,EAAE,OAAO,CAAC,OAAO;cAC3B,CAAC;SACN,CAAC;SAED,yBAAyB;aACrB,IAAI,IAAI,CAAC;aAET,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;iBACzD,IAAI,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;aACvC,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;iBAClC,IAAI,KAAK,GAAG,UAAU,CAAC;iBACvB,IAAI,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;iBAEzC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,IAAI,CAAC,KAAK,CAAC,UAAU,KAAK,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,IAAI,KAAK,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;qBACjH,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;yBACzE,MAAM,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;yBAC1C,IAAI,CAAC,8BAA8B,CAAC,GAAG,CAAC,CAAC;yBACzC,IAAI,GAAG;6BACH,IAAI,EAAE,yBAAyB;6BAC/B,MAAM,EAAE,CAAC,GAAG,CAAC;6BACb,KAAK,EAAE,IAAI;0BACd,CAAC;qBACN,CAAC;iBACL,CAAC;iBAED,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,yBAAyB,IAAI,IAAI,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAE9D,iEAAiE;qBACjE,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;qBACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;qBACtC,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;qBAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,6BAA6B,CAAC,IAAI,CAAC,CAAC;qBAEtD,EAAE,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;yBACP,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;6BACzB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;yBACjD,CAAC;yBACD,IAAI,CAAC,OAAO,CAAC,8BAA8B,GAAG,IAAI,CAAC;yBAEnD,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;yBAC3C,MAAM,4BAA4B,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;yBACvE,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,IAAI,CAAC,MAAM,CAAC;yBAEhD,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;yBACnD,MAAM,aAAa,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;yBACzC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;yBAC/B,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;yBAE7B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,CAAC;yBACxC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC;yBAClB,IAAI,IAA2C,CAAC;yBAChD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;6BAClB,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;6BAC7C,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,IAAI,CAAC;6BAC5B,IAAI,GAAG,IAAI,CAAC,2BAA2B,EAAE,CAAC;6BAC1C,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,eAAe,CAAC;yBAC3C,CAAC;yBAAC,IAAI,CAAC,CAAC;6BACJ,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;yBACpE,CAAC;yBACD,MAAM,UAAU,GAAG,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,cAAc,CAAC;yBAEvD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,eAAe,CAAC,CAAC,CAAC;6BAC9C,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,eAAe,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;yBAClE,CAAC;yBACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;6BACvC,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,QAAQ,EAAE,IAAI,CAAC,OAAO,CAAC,CAAC;yBAC9D,CAAC;yBACD,IAAI,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,4BAA4B,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC,CAAC;6BACxG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,MAAM,EAAE,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;yBAEzF,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,cAAc,CAAC;yBACrC,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,4BAA4B,CAAC;yBACjE,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,kBAAkB,CAAC;yBAC7C,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,aAAa,CAAC;qBACvC,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,CAAC;qBAEJ,EAAE,CAAC,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,CAAC,CAAC;yBACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC,CAAC;6BACnC,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,sBAAsB,CAAC,CAAC;yBACxD,CAAC;yBAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,CAAC,CAAC,CAAC;6BACzD,MAAM,EAAE,GAAG,IAAuB,CAAC;6BACnC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iCACzC,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,mBAAmB,CAAC,CAAC;6BACtE,CAAC;6BACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,EAAE,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iCACjD,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;6BACrE,CAAC;yBACL,CAAC;yBAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;6BACnB,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,KAAK,CAAC;6BACxC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,KAAK,CAAC;yBAC1C,CAAC;yBAAC,IAAI,CAAC,CAAC;6BACJ,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,CAAC;yBAC9C,CAAC;yBAED,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;yBACzB,MAAM,QAAQ,GAAG,KAAK,CAAC,KAAe,CAAC;yBACvC,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;yBACvE,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,oBAAoB,CAAC,QAAQ,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,CAAC;yBACvG,IAAI,CAAC,OAAO,CAAC,8BAA8B,GAAG,IAAI,CAAC;qBACvD,CAAC;iBACL,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,qDAAqD;SAErD,eAAe;aACX,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;aAClC,IAAI,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;aAEpE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,MAAM,WAAW,GAAsB,EAAE,CAAC;iBAC1C,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACvB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,gBAAc,EAAE,CAAC;qBACvC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBACnB,KAAK,CAAC;qBACV,CAAC;qBACD,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,WAAW,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;iBAC/E,CAAC;iBAED,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,WAAW,CAAC,CAAC,CAAC;aAC/F,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,4CAA4C;SAE5C,sBAAsB;aAClB,IAAI,SAAiC,CAAC;aACtC,IAAI,CAAC,OAAO,CAAC,kBAAkB,GAAG,IAAI,CAAC;aACvC,IAAI,CAAC,OAAO,CAAC,gBAAgB,GAAG,IAAI,CAAC;aACrC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,oBAAkB,CAAC,CAAC,CAAC;iBACxC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;qBAC3B,KAAK,QAAQ;yBACT,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;6BACzB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAQ,CAAC,wBAAwB,CAAC,CAAC;yBACpF,CAAC;yBACD,SAAS,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;yBAC1C,KAAK,CAAC;qBACV,KAAK,QAAQ;yBACT,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC;6BACzB,SAAS,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;yBAChD,CAAC;yBAAC,IAAI,CAAC,CAAC;6BACJ,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;iCACzB,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAQ,CAAC,wBAAwB,CAAC,CAAC;6BACpF,CAAC;6BACD,SAAS,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;yBAC9C,CAAC;yBACD,KAAK,CAAC;qBACV,KAAK,OAAO;yBACR,SAAS,GAAG,IAAI,CAAC,uBAAuB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;yBAC3D,KAAK,CAAC;qBACV,KAAK,UAAU;yBACX,SAAS,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;yBAC5C,KAAK,CAAC;qBACV,KAAK,OAAO;yBACR,SAAS,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;yBACzC,KAAK,CAAC;qBACV,KAAK,KAAK;yBACN,SAAS,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;yBACjH,KAAK,CAAC;qBACV;yBACI,SAAS,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;yBAClC,KAAK,CAAC;iBACd,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,SAAS,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;aACtC,CAAC;aAED,MAAM,CAAC,SAAS,CAAC;SACrB,CAAC;SAED,UAAU;aACN,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,KAAK,GAA6B,EAAE,CAAC;aAC3C,OAAO,IAAI,EAAE,CAAC;iBACV,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAClB,KAAK,CAAC;iBACV,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;aAC9C,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/D,CAAC;SAED,iEAAiE;SAEjE,mBAAmB,CAAC,IAAY,EAAE,OAAO;aACrC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,MAAM,GAAG,EAAE,CAAC;aAClB,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;aAE3C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,CAAC,CAAC,CAAC;iBACvD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAE,EAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAC9D,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,aAAa,CAAC,CAAC;iBAC/C,CAAC;aACL,CAAC;aAED,IAAI,IAAI,GAA2B,IAAI,CAAC;aACxC,EAAE,CAAC,CAAC,IAAI,KAAK,OAAO,CAAC,CAAC,CAAC;iBACnB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACjE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;yBACjB,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;qBACpE,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,6BAA6B,EAAE,OAAO,CAAC,CAAC;qBACrE,CAAC;iBACL,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,IAAI,EAAE,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC9E,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBACjB,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;aACpE,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;SACtE,CAAC;SAED,gBAAgB,CAAC,IAAY,EAAE,OAAO;aAClC,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;aAEvD,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;iBACrB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC,CAAC;aACvD,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,oBAAoB;aAChB,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;aACvC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;aAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;aAChC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;aAEjC,MAAM,CAAC,CAAC,IAAI,CAAC,IAAI,uBAAqB,CAAC;iBACnC,CAAC,IAAI,CAAC,IAAI,uBAAqB,IAAI,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC;iBACtD,CAAC,IAAI,CAAC,IAAI,uBAAqB,IAAI,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC;iBACtD,CAAC,IAAI,CAAC,IAAI,oBAAkB,IAAI,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC;iBACrD,CAAC,IAAI,CAAC,IAAI,oBAAkB,IAAI,IAAI,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC;SAChE,CAAC;SAED,uBAAuB,CAAC,OAAO;aAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,KAAe,CAAC;aAC9C,eAAM,CAAC,IAAI,KAAK,KAAK,IAAI,IAAI,KAAK,OAAO,EAAE,iDAAiD,CAAC,CAAC;aAE9F,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,OAAO,CAAC,CAAC;aAC1D,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAExB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;SACjF,CAAC;SAED,qEAAqE;SAErE,uBAAuB,CAAC,MAAM,EAAE,IAAa;aACzC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACnB,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;aAE5C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;SAC1D,CAAC;SAED,iBAAiB,CAAC,MAAM,EAAE,IAAa;aACnC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,QAAQ,GAA+B,EAAE,CAAC;aAChD,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;iBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;iBACxB,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;yBACpB,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;yBAC1D,KAAK,CAAC;qBACV,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,QAAQ,CAAC,IAAI,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;qBAC9D,CAAC;qBACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACrB,CAAC;iBACL,CAAC;aAEL,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC;SAChE,CAAC;SAED,oBAAoB,CAAC,MAAM,EAAE,IAAa;aACtC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,QAAQ,GAAG,KAAK,CAAC;aACrB,IAAI,SAAS,GAAG,KAAK,CAAC;aACtB,MAAM,MAAM,GAAG,KAAK,CAAC;aAErB,IAAI,GAA4B,CAAC;aACjC,IAAI,KAAyB,CAAC;aAE9B,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC;iBAC3C,MAAM,QAAQ,GAAG,IAAI,CAAC,SAAS,CAAC;iBAChC,GAAG,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;iBACrC,MAAM,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,QAAQ,CAAC,KAAK,CAAC,CAAC,CAAC;iBACtE,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAClB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBACtB,SAAS,GAAG,IAAI,CAAC;qBACjB,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,MAAM,IAAI,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;qBAC9C,KAAK,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,QAAQ,CAAC,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;iBAC5F,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAC1B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC;qBACtB,SAAS,GAAG,IAAI,CAAC;qBACjB,KAAK,GAAG,IAAI,CAAC;iBACjB,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACjB,KAAK,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;iBACvD,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC3B,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;iBACpC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBACjB,KAAK,GAAG,IAAI,CAAC,uBAAuB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;aACvD,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,QAAQ,CAAC,MAAM,EAAE,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,MAAM,EAAE,SAAS,CAAC,CAAC,CAAC;SACnG,CAAC;SAED,iBAAiB,CAAC,MAAM,EAAE,IAAI;aAC1B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACnB,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aACtC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,mBAAmB,CAAC,CAAC;aAClD,CAAC;aACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACnB,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,yBAAyB,CAAC,CAAC;aACxD,CAAC;aACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;SAC1D,CAAC;SAED,kBAAkB,CAAC,MAAM,EAAE,IAAa;aACpC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,UAAU,GAAiC,EAAE,CAAC;aAEpD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;iBACtB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;iBACpH,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBACrB,CAAC;aACL,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC,CAAC;SACnE,CAAC;SAED,YAAY,CAAC,MAAM,EAAE,IAAa;aAC9B,IAAI,OAAO,CAAC;aAEZ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,OAAO,GAAG,IAAI,CAAC,iBAAiB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;aACnD,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACzB,OAAO,GAAG,IAAI,CAAC,kBAAkB,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;aACpD,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,KAAK,OAAO,IAAI,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC,CAAC;qBACnE,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,mBAAQ,CAAC,mBAAmB,CAAC,CAAC;iBAC/E,CAAC;iBACD,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAC5B,OAAO,GAAG,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,CAAC;aACjD,CAAC;aAED,MAAM,CAAC,OAAO,CAAC;SACnB,CAAC;SAED,uBAAuB,CAAC,MAAM,EAAE,IAAa;aACzC,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC;aAElC,IAAI,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC;aAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;iBACnD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;iBAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;iBACvE,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,kBAAkB,CAAC;iBAC7C,OAAO,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,UAAU,CAAC,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC,CAAC;aACpG,CAAC;aAED,MAAM,CAAC,OAAO,CAAC;SACnB,CAAC;SAED,yDAAyD;SAEzD,uBAAuB,CAAC,IAAa;aACjC,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;aAC/B,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,oBAAkB,IAAI,KAAK,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;iBAC1D,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;qBACtB,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;iBACrE,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC,CAAC;qBAClC,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;iBACrC,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC;iBACzC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC,IAAI,oBAAkB,IAAI,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,KAAK,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC;qBACtH,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;iBACrE,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,CAAC,CAAC,CAAC;yBACjE,IAAI,CAAC,oBAAoB,CAAC,KAAK,CAAC,CAAC;qBACrC,CAAC;iBACL,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,IAAI,KAAK,CAAC,IAAI,uBAAqB,IAAI,KAAK,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC;iBACrH,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;aACxC,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;SACjE,CAAC;SAED,wBAAwB,CAAC,OAA2B;aAChD,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,MAAM,GAAG,EAAE,CAAC;aAClB,MAAM,EAAE,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,EAAE,KAAK,CAAC,CAAC;aAE5C,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,EAAE,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,CAAC,CAAC,CAAC;iBACvD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAE,EAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBAC9D,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,aAAa,CAAC,CAAC;iBAC/C,CAAC;aACL,CAAC;aAED,IAAI,IAAI,GAAG,IAAI,CAAC;aAChB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;aACpE,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;iBACzD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACrB,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;SACtE,CAAC;SAED,4BAA4B,CAAC,OAAO;aAChC,MAAM,GAAG,GAAuB,EAAE,KAAK,EAAE,OAAO,CAAC,KAAK,EAAE,CAAC;aAEzD,MAAM,IAAI,GAA8B,EAAE,CAAC;aAC3C,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC,CAAC;aAC9C,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;iBACrB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,wBAAwB,CAAC,GAAG,CAAC,CAAC,CAAC;aAClD,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,sBAAsB;aAClB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAC1B,MAAM,YAAY,GAAG,IAAI,CAAC,4BAA4B,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;aACzE,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAExB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC;SAClF,CAAC;SAED,sDAAsD;SAEtD,mBAAmB;aACf,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;SAC1D,CAAC;SAED,2DAA2D;SAE3D,wBAAwB;aACpB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aACpC,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACxB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;SACnE,CAAC;SAED,mDAAmD;SAEnD,aAAa;aACT,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;iBACvD,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,cAAc,CAAC,CAAC;aAChD,CAAC;aACD,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;SACjC,CAAC;SAED,gBAAgB;aACZ,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,UAA0B,CAAC;aAC/B,IAAI,SAAS,GAA0B,IAAI,CAAC;aAE5C,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;aACzB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aAEpC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAC3C,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;iBAC/C,UAAU,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;aAC7E,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBACjB,UAAU,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;iBAClC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBAC5B,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,SAAS,GAAG,IAAI,CAAC,aAAa,EAAE,CAAC;iBACrC,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,IAAI,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;SAClF,CAAC;SAED,yDAAyD;SAEzD,qBAAqB;aACjB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;aAEzB,MAAM,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;aACrD,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;aAChC,MAAM,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;aACnC,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,mBAAmB,CAAC;aAE/C,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC5B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aAEpC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAC3C,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;aACnD,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBACjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACrB,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;SACtE,CAAC;SAED,sDAAsD;SAEtD,mBAAmB;aACf,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,IAAI,CAAC;aAET,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC5B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aAEpC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAC3C,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;iBAC/C,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;aACvE,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBAEjB,MAAM,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;iBACrD,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;iBAChC,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;iBAC7B,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,mBAAmB,CAAC;aACnD,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,IAAI,CAAC,CAAC,CAAC;SACpE,CAAC;SAED,oDAAoD;SACpD,mEAAmE;SAEnE,iBAAiB;aACb,IAAI,IAAI,GAAQ,IAAI,CAAC;aACrB,IAAI,IAAI,GAA2B,IAAI,CAAC;aACxC,IAAI,MAAM,GAA2B,IAAI,CAAC;aAC1C,IAAI,KAAK,GAAG,IAAI,CAAC;aACjB,IAAI,IAAI,EAAE,KAAK,CAAC;aAEhB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAC1B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;aACrB,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;qBAC3B,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;qBACzB,IAAI,CAAC,SAAS,EAAE,CAAC;qBAEjB,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;qBAC7C,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;qBAC7B,MAAM,YAAY,GAAG,IAAI,CAAC,4BAA4B,CAAC,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;qBACxE,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,eAAe,CAAC;qBAEvC,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBACvD,MAAM,IAAI,GAAG,YAAY,CAAC,CAAC,CAAC,CAAC;yBAC7B,EAAE,CAAC,CAAC,IAAI,CAAC,IAAI,IAAI,CAAC,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,eAAM,CAAC,YAAY,IAAI,IAAI,CAAC,EAAE,CAAC,IAAI,KAAK,eAAM,CAAC,aAAa,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;6BACtH,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CAAC;yBAClE,CAAC;yBACD,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC;yBAC9E,IAAI,CAAC,SAAS,EAAE,CAAC;yBACjB,IAAI,GAAG,IAAI,CAAC;yBACZ,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;yBAC/B,IAAI,GAAG,IAAI,CAAC;qBAChB,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBACzG,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC;yBAC9E,IAAI,CAAC,SAAS,EAAE,CAAC;yBACjB,IAAI,GAAG,IAAI,CAAC;yBACZ,KAAK,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;yBACzC,IAAI,GAAG,IAAI,CAAC;yBACZ,KAAK,GAAG,KAAK,CAAC;qBAClB,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC;yBAC9E,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACrB,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;qBAChE,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;qBACzB,MAAM,IAAI,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC,KAAe,CAAC;qBAE9C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,SAAS,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAC;yBACxD,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,CAAC,CAAC;yBACtD,IAAI,CAAC,SAAS,EAAE,CAAC;yBACjB,IAAI,GAAG,IAAI,CAAC;yBACZ,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;yBAC/B,IAAI,GAAG,IAAI,CAAC;qBAChB,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;yBAC7C,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;yBAC7B,MAAM,YAAY,GAAG,IAAI,CAAC,gBAAgB,CAAC,IAAI,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,CAAC;yBAClE,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,eAAe,CAAC;yBAEvC,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;6BACxF,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;6BAC7E,IAAI,CAAC,SAAS,EAAE,CAAC;6BACjB,IAAI,GAAG,IAAI,CAAC;6BACZ,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;6BAC/B,IAAI,GAAG,IAAI,CAAC;yBAChB,CAAC;yBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,YAAY,CAAC,MAAM,KAAK,CAAC,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC,IAAI,KAAK,IAAI,IAAI,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;6BACzG,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;6BAC7E,IAAI,CAAC,SAAS,EAAE,CAAC;6BACjB,IAAI,GAAG,IAAI,CAAC;6BACZ,KAAK,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;6BACzC,IAAI,GAAG,IAAI,CAAC;6BACZ,KAAK,GAAG,KAAK,CAAC;yBAClB,CAAC;yBAAC,IAAI,CAAC,CAAC;6BACJ,IAAI,CAAC,gBAAgB,EAAE,CAAC;6BACxB,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,mBAAmB,CAAC,YAAY,EAAE,IAAI,CAAC,CAAC,CAAC;yBACjF,CAAC;qBACL,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,MAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC;qBACtC,MAAM,eAAe,GAAG,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;qBAC7C,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,KAAK,CAAC;qBAC7B,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC;qBAChE,IAAI,CAAC,OAAO,CAAC,OAAO,GAAG,eAAe,CAAC;qBAEvC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBAC1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,IAAI,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;6BAChF,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,iBAAiB,CAAC,CAAC;yBACnD,CAAC;yBAED,IAAI,CAAC,SAAS,EAAE,CAAC;yBACjB,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,CAAC;yBAC1C,IAAI,GAAG,IAAI,CAAC;yBACZ,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;yBAC/B,IAAI,GAAG,IAAI,CAAC;qBAChB,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;yBAC3C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,kBAAkB,IAAI,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,oBAAoB,CAAC,CAAC,CAAC;6BAChF,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,mBAAmB,CAAC,CAAC;yBACrD,CAAC;yBAED,IAAI,CAAC,SAAS,EAAE,CAAC;yBACjB,IAAI,CAAC,8BAA8B,CAAC,IAAI,CAAC,CAAC;yBAC1C,IAAI,GAAG,IAAI,CAAC;yBACZ,KAAK,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;yBACzC,IAAI,GAAG,IAAI,CAAC;yBACZ,KAAK,GAAG,KAAK,CAAC;qBAClB,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;6BAClB,MAAM,OAAO,GAAG,CAAC,IAAI,CAAC,CAAC;6BACvB,OAAO,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;iCACrB,IAAI,CAAC,SAAS,EAAE,CAAC;iCACjB,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,yBAAyB,CAAC,CAAC,CAAC;6BAC3E,CAAC;6BACD,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,SAAS,CAAC,cAAc,CAAC,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,OAAO,CAAC,CAAC,CAAC;yBAC/F,CAAC;yBACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACrB,CAAC;iBACL,CAAC;aACL,CAAC;aAED,EAAE,CAAC,CAAC,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC;iBAC9B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACnB,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;iBAClC,CAAC;iBACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACnB,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;iBACpC,CAAC;aACL,CAAC;aAED,IAAI,IAAI,CAAC;aACT,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAC3C,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;iBAC/C,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;aACvE,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBAEjB,MAAM,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;iBACrD,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,IAAI,CAAC;iBAChC,IAAI,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;iBACrD,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,mBAAmB,CAAC;aACnD,CAAC;aAED,MAAM,CAAC,CAAC,OAAO,IAAI,KAAK,WAAW,CAAC,CAAC,CAAC;iBAClC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,IAAI,EAAE,IAAI,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;iBACtE,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;qBACrE,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;SAC5E,CAAC;SAED,yDAAyD;SAEzD,sBAAsB;aAClB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;aAE/B,IAAI,KAAK,GAA2B,IAAI,CAAC;aACzC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;iBACtE,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;iBAC1C,KAAK,GAAG,EAAE,CAAC;iBAEX,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC;iBAC1B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;qBACpE,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;iBACpD,CAAC;aACL,CAAC;aAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACxB,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC;iBAC9C,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,eAAe,CAAC,CAAC;aAC9C,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC,CAAC;SAClE,CAAC;SAED,sDAAsD;SAEtD,mBAAmB;aACf,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAE5B,IAAI,KAAK,GAA2B,IAAI,CAAC;aACzC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;iBACtE,MAAM,EAAE,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;iBAE1C,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC;iBAC1B,EAAE,CAAC,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;qBACpE,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,YAAY,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;iBACpD,CAAC;iBACD,KAAK,GAAG,EAAE,CAAC;aACf,CAAC;aAED,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACxB,EAAE,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,WAAW,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACxE,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,YAAY,CAAC,CAAC;aAC3C,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;SAC/D,CAAC;SAED,uDAAuD;SAEvD,oBAAoB;aAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;iBAC/B,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,aAAa,CAAC,CAAC;aAC/C,CAAC;aAED,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;aAE7B,MAAM,WAAW,GAAG,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC;iBACrD,CAAC,IAAI,CAAC,iBAAiB,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,gBAAc,CAAC;iBAC7D,IAAI,CAAC,SAAS,CAAC,IAAI,sBAAmB,CAAC;aAE3C,MAAM,QAAQ,GAAG,WAAW,CAAC,CAAC,CAAC,IAAI,CAAC,eAAe,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;aAC7D,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAExB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,CAAC,CAAC,CAAC;SACnE,CAAC;SAED,qDAAqD;SAErD,kBAAkB;aACd,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;iBACtB,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,cAAc,CAAC,CAAC;aAChD,CAAC;aAED,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,IAAI,CAAC;aAET,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;aAC3B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aAEtC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC;iBAC3C,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;iBAC/C,IAAI,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,CAAC,UAAU,EAAE,EAAE,IAAI,IAAI,CAAC,cAAc,EAAE,CAAC,CAAC;aACvE,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBACjB,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;aACjC,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,aAAa,CAAC,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC;SACrE,CAAC;SAED,uDAAuD;SAEvD,eAAe;aACX,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,IAAI,CAAC;aACT,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;iBAC/B,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,IAAI,GAAG,IAAI,CAAC;aAChB,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,aAAa,CAAC,MAAM,CAAC,CAAC;iBAC3B,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aAClC,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,MAAM,UAAU,GAA6B,EAAE,CAAC;aAChD,OAAO,IAAI,EAAE,CAAC;iBACV,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBAC/E,KAAK,CAAC;iBACV,CAAC;iBACD,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;aACnD,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,EAAE,UAAU,CAAC,CAAC,CAAC;SACtE,CAAC;SAED,oBAAoB;aAChB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;aAE7B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,YAAY,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aAC5C,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;aAC/C,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;aAE7B,MAAM,KAAK,GAAsB,EAAE,CAAC;aACpC,IAAI,YAAY,GAAG,KAAK,CAAC;aACzB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,OAAO,IAAI,EAAE,CAAC;iBACV,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAClB,KAAK,CAAC;iBACV,CAAC;iBACD,MAAM,MAAM,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;iBACtC,EAAE,CAAC,CAAC,MAAM,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;qBACvB,EAAE,CAAC,CAAC,YAAY,CAAC,CAAC,CAAC;yBACf,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,wBAAwB,CAAC,CAAC;qBACvD,CAAC;qBACD,YAAY,GAAG,IAAI,CAAC;iBACxB,CAAC;iBACD,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;aACvB,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,gBAAgB,CAAC;aAEzC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,YAAY,EAAE,KAAK,CAAC,CAAC,CAAC;SAC9E,CAAC;SAED,0DAA0D;SAE1D,sBAAsB;aAClB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aAEpC,IAAI,SAA2D,CAAC;aAChE,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACvD,IAAI,CAAC,SAAS,EAAE,CAAC;iBAEjB,MAAM,EAAE,GAAG,IAAuB,CAAC;iBACnC,MAAM,GAAG,GAAG,GAAG,GAAG,EAAE,CAAC,IAAI,CAAC;iBAC1B,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;qBACnE,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,aAAa,EAAE,OAAO,EAAE,EAAE,CAAC,IAAI,CAAC,CAAC;iBAC9D,CAAC;iBAED,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;iBAClC,IAAI,IAAoB,CAAC;iBACzB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;qBAC7B,IAAI,CAAC,uBAAuB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;qBAC7C,IAAI,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;iBACxC,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;qBACvC,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;qBAC7B,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;qBACpD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;yBACtB,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,cAAc,CAAC,CAAC;qBACjE,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,SAAS,CAAC,CAAC,CAAC;yBAC/B,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,wBAAwB,CAAC,CAAC;qBAC3E,CAAC;qBACD,IAAI,GAAG,WAAW,CAAC;iBACvB,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;iBACjC,CAAC;iBACD,OAAO,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,CAAC;iBAElC,SAAS,GAAG,IAAI,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,IAAI,CAAC,CAAC;aACpD,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,gBAAgB,EAAE,CAAC;iBACxB,SAAS,GAAG,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC;aACnD,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;SAC1C,CAAC;SAED,sDAAsD;SAEtD,mBAAmB;aACf,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAE5B,EAAE,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;iBACzB,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,iBAAiB,CAAC,CAAC;aAChD,CAAC;aAED,MAAM,QAAQ,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aACxC,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAExB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC,CAAC;SAClE,CAAC;SAED,oDAAoD;SAEpD,gBAAgB;aACZ,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAE5B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC9C,CAAC;aAED,MAAM,MAAM,GAAU,EAAE,CAAC;aACzB,MAAM,KAAK,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aACxC,MAAM,QAAQ,GAAG,EAAE,CAAC;aACpB,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;iBACrC,MAAM,GAAG,GAAG,GAAG,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;iBAClC,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;qBACtD,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,gBAAgB,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;iBACnE,CAAC;iBACD,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;aACzB,CAAC;aAED,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,KAAK,CAAC,IAAI,KAAK,eAAM,CAAC,UAAU,CAAC,CAAC,CAAC;iBAC1D,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAE,KAAyB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACjE,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,mBAAmB,CAAC,CAAC;iBACrD,CAAC;aACL,CAAC;aAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,KAAK,EAAE,IAAI,CAAC,CAAC,CAAC;SAClE,CAAC;SAED,kBAAkB;aACd,IAAI,CAAC,aAAa,CAAC,SAAS,CAAC,CAAC;aAC9B,MAAM,CAAC,IAAI,CAAC,UAAU,EAAE,CAAC;SAC7B,CAAC;SAED,iBAAiB;aACb,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,KAAK,CAAC,CAAC;aAE1B,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAChC,MAAM,OAAO,GAAG,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;aAC5E,MAAM,SAAS,GAAG,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;aAElF,EAAE,CAAC,CAAC,CAAC,OAAO,IAAI,CAAC,SAAS,CAAC,CAAC,CAAC;iBACzB,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,gBAAgB,CAAC,CAAC;aAC/C,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,YAAY,CAAC,KAAK,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC,CAAC;SACjF,CAAC;SAED,yDAAyD;SAEzD,sBAAsB;aAClB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;aAC/B,IAAI,CAAC,gBAAgB,EAAE,CAAC;aACxB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;SAC7D,CAAC;SAED,sFAAsF;SAEtF,cAAc;aACV,IAAI,SAAyB,CAAC;aAC9B,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC1B,4BAA0B;iBAC1B,yBAAuB;iBACvB,4BAA0B;iBAC1B,2BAAyB;iBACzB,uBAAoB;iBACpB;qBACI,SAAS,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;qBAC5C,KAAK,CAAC;iBAEV;qBACI,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;qBACnC,EAAE,CAAC,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC;yBAChB,SAAS,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;qBAClC,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC;yBACvB,SAAS,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;qBAChD,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC;yBACvB,SAAS,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;qBAC3C,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,SAAS,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;qBAChD,CAAC;qBACD,KAAK,CAAC;iBAEV;qBACI,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC;qBACxG,KAAK,CAAC;iBAEV;qBACI,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;yBAC3B,KAAK,OAAO;6BACR,SAAS,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;6BACvC,KAAK,CAAC;yBACV,KAAK,UAAU;6BACX,SAAS,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;6BAC1C,KAAK,CAAC;yBACV,KAAK,UAAU;6BACX,SAAS,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;6BAC1C,KAAK,CAAC;yBACV,KAAK,IAAI;6BACL,SAAS,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;6BACzC,KAAK,CAAC;yBACV,KAAK,KAAK;6BACN,SAAS,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;6BACrC,KAAK,CAAC;yBACV,KAAK,UAAU;6BACX,SAAS,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;6BAC5C,KAAK,CAAC;yBACV,KAAK,IAAI;6BACL,SAAS,GAAG,IAAI,CAAC,gBAAgB,EAAE,CAAC;6BACpC,KAAK,CAAC;yBACV,KAAK,QAAQ;6BACT,SAAS,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;6BACxC,KAAK,CAAC;yBACV,KAAK,QAAQ;6BACT,SAAS,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;6BACxC,KAAK,CAAC;yBACV,KAAK,OAAO;6BACR,SAAS,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;6BACvC,KAAK,CAAC;yBACV,KAAK,KAAK;6BACN,SAAS,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;6BACrC,KAAK,CAAC;yBACV,KAAK,KAAK;6BACN,SAAS,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;6BAC1C,KAAK,CAAC;yBACV,KAAK,OAAO;6BACR,SAAS,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;6BACvC,KAAK,CAAC;yBACV,KAAK,MAAM;6BACP,SAAS,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC;6BACtC,KAAK,CAAC;yBACV;6BACI,SAAS,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;6BAC5C,KAAK,CAAC;qBACd,CAAC;qBACD,KAAK,CAAC;iBAEV;qBACI,SAAS,GAAG,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC9D,CAAC;aAED,MAAM,CAAC,SAAS,CAAC;SACrB,CAAC;SAED,2DAA2D;SAE3D,2BAA2B;aACvB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,IAAI,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;aAE5C,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;aAC/C,MAAM,mBAAmB,GAAG,IAAI,CAAC,OAAO,CAAC,WAAW,CAAC;aACrD,MAAM,gBAAgB,GAAG,IAAI,CAAC,OAAO,CAAC,QAAQ,CAAC;aAC/C,MAAM,sBAAsB,GAAG,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC;aAE3D,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;aAC3B,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,KAAK,CAAC;aACjC,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;aAC9B,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,IAAI,CAAC;aAEnC,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,gBAAc,EAAE,CAAC;iBACvC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAClB,KAAK,CAAC;iBACV,CAAC;iBACD,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;aAC7C,CAAC;aAED,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,gBAAgB,CAAC;aACzC,IAAI,CAAC,OAAO,CAAC,WAAW,GAAG,mBAAmB,CAAC;aAC/C,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,gBAAgB,CAAC;aACzC,IAAI,CAAC,OAAO,CAAC,cAAc,GAAG,sBAAsB,CAAC;aAErD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,cAAc,CAAC,IAAI,CAAC,CAAC,CAAC;SAC9D,CAAC;SAED,aAAa,CAAC,OAAO,EAAE,KAAK,EAAE,IAAI;aAC9B,MAAM,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC;aACvB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;iBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACtC,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;qBACzB,OAAO,CAAC,OAAO,GAAG,mBAAQ,CAAC,eAAe,CAAC;iBAC/C,CAAC;iBACD,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;qBAC9D,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;qBACzB,OAAO,CAAC,OAAO,GAAG,mBAAQ,CAAC,eAAe,CAAC;iBAC/C,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,eAAe,CAAC,CAAC,CAAC;iBAClC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACtC,OAAO,CAAC,eAAe,GAAG,KAAK,CAAC;qBAChC,OAAO,CAAC,OAAO,GAAG,mBAAQ,CAAC,eAAe,CAAC;iBAC/C,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACrD,OAAO,CAAC,eAAe,GAAG,KAAK,CAAC;qBAChC,OAAO,CAAC,OAAO,GAAG,mBAAQ,CAAC,kBAAkB,CAAC;iBAClD,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,MAAM,CAAC,SAAS,CAAC,cAAc,CAAC,IAAI,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,CAAC,CAAC,CAAC,CAAC;qBACrE,OAAO,CAAC,QAAQ,GAAG,KAAK,CAAC;qBACzB,OAAO,CAAC,OAAO,GAAG,mBAAQ,CAAC,eAAe,CAAC;iBAC/C,CAAC;aACL,CAAC;aAED,0BAA0B;aAC1B,EAAE,CAAC,CAAC,OAAO,MAAM,CAAC,cAAc,KAAK,UAAU,CAAC,CAAC,CAAC;iBAC9C,MAAM,CAAC,cAAc,CAAC,OAAO,CAAC,QAAQ,EAAE,GAAG,EAAE,EAAE,KAAK,EAAE,IAAI,EAAE,UAAU,EAAE,IAAI,EAAE,QAAQ,EAAE,IAAI,EAAE,YAAY,EAAE,IAAI,EAAE,CAAC,CAAC;aACxH,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,OAAO,CAAC,QAAQ,CAAC,GAAG,CAAC,GAAG,IAAI,CAAC;aACjC,CAAC;SACL,CAAC;SAED,gBAAgB,CAAC,MAAM;aACnB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aACnB,MAAM,GAAG,GAAG,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC,CAAC;aACtC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,oBAAoB,CAAC,CAAC;aACnD,CAAC;aACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACnB,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,2BAA2B,CAAC,CAAC;aAC1D,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,WAAW,CAAC,GAAG,CAAC,CAAC,CAAC;SAC1D,CAAC;SAED,oBAAoB,CAAC,OAAO;aACxB,MAAM,MAAM,GAAU,EAAE,CAAC;aACzB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,CAAC,MAAM,CAAC,CAAC;aACvG,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,MAAM,CAAC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC;iBACrC,IAAI,CAAC,aAAa,CAAC,OAAO,EAAE,MAAM,CAAC,CAAC,CAAC,EAAE,MAAM,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC;aAC5D,CAAC;aACD,OAAO,CAAC,MAAM,GAAG,OAAO,CAAC,MAAM,IAAI,CAAC,KAAK,YAAY,IAAI,CAAC,UAAU,CAAC,CAAC;aACtE,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;SAC/B,CAAC;SAED,qBAAqB,CAAC,eAAgB;aAClC,IAAI,OAAO,CAAC;aAEZ,OAAO,GAAG;iBACN,MAAM,EAAE,IAAI;iBACZ,MAAM,EAAE,EAAE;iBACV,eAAe,EAAE,eAAe;cACnC,CAAC;aAEF,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACnB,OAAO,CAAC,QAAQ,GAAG,EAAE,CAAC;iBACtB,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,gBAAc,EAAE,CAAC;qBACvC,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,CAAC;qBACnC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,KAAK,CAAC;qBACV,CAAC;qBACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,KAAK,CAAC;qBACV,CAAC;iBACL,CAAC;aACL,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,MAAM,CAAC;iBACH,MAAM,EAAE,OAAO,CAAC,MAAM;iBACtB,MAAM,EAAE,OAAO,CAAC,MAAM;iBACtB,QAAQ,EAAE,OAAO,CAAC,QAAQ;iBAC1B,eAAe,EAAE,OAAO,CAAC,eAAe;iBACxC,OAAO,EAAE,OAAO,CAAC,OAAO;cAC3B,CAAC;SACN,CAAC;SAED,kBAAkB;aACd,IAAI,KAAK,GAAG,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;aACjD,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC;iBACR,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;iBACvC,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;iBAC5B,MAAM,IAAI,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;iBAChC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;iBAEjC,KAAK,GAAG,CAAC,KAAK,CAAC,UAAU,KAAK,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,oBAAkB,CAAC,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,UAAU,CAAC,CAAC;aACnH,CAAC;aAED,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAED,wBAAwB,CAAC,oBAA8B;aACnD,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,OAAO,GAAG,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;aACrD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;iBACV,IAAI,CAAC,SAAS,EAAE,CAAC;aACrB,CAAC;aAED,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;aAE/B,MAAM,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACtD,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;iBACd,IAAI,CAAC,SAAS,EAAE,CAAC;aACrB,CAAC;aAED,IAAI,OAAO,CAAC;aACZ,IAAI,EAAE,GAA2B,IAAI,CAAC;aACtC,IAAI,eAAe,GAAoB,IAAI,CAAC;aAE5C,EAAE,CAAC,CAAC,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;iBAC7B,EAAE,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;iBACpC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;qBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC;yBACvD,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;qBACrE,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC;yBACvD,eAAe,GAAG,KAAK,CAAC;yBACxB,OAAO,GAAG,mBAAQ,CAAC,kBAAkB,CAAC;qBAC1C,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,KAAK,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC;yBACtE,eAAe,GAAG,KAAK,CAAC;yBACxB,OAAO,GAAG,mBAAQ,CAAC,kBAAkB,CAAC;qBAC1C,CAAC;iBACL,CAAC;aACL,CAAC;aAED,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aAC9C,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aACnD,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;aAC7B,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,WAAW,CAAC;aAEvC,MAAM,gBAAgB,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;aACrE,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC;aACvC,MAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;aAC3C,eAAe,GAAG,gBAAgB,CAAC,eAAe,CAAC;aACnD,EAAE,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;iBAC3B,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC;aACvC,CAAC;aAED,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aAC3C,MAAM,4BAA4B,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;aACvE,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,gBAAgB,CAAC,MAAM,CAAC;aAC5D,MAAM,IAAI,GAAG,IAAI,CAAC,2BAA2B,EAAE,CAAC;aAChD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,eAAe,CAAC,CAAC,CAAC;iBACzC,IAAI,CAAC,oBAAoB,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;aACxD,CAAC;aACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC;iBAClC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;aACpD,CAAC;aAED,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,cAAc,CAAC;aACrC,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,4BAA4B,CAAC;aACjE,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,kBAAkB,CAAC;aACxC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,kBAAkB,CAAC;aAE7C,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,wBAAwB,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;iBACvF,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,mBAAmB,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;SACzF,CAAC;SAED,uBAAuB;aACnB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,OAAO,GAAG,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC;aACrD,EAAE,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC;iBACV,IAAI,CAAC,SAAS,EAAE,CAAC;aACrB,CAAC;aAED,IAAI,CAAC,aAAa,CAAC,UAAU,CAAC,CAAC;aAE/B,MAAM,WAAW,GAAG,OAAO,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;aACtD,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;iBACd,IAAI,CAAC,SAAS,EAAE,CAAC;aACrB,CAAC;aAED,IAAI,OAAO,CAAC;aACZ,IAAI,EAAE,GAA2B,IAAI,CAAC;aACtC,IAAI,eAAe,CAAC;aAEpB,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC;aAC9C,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aACnD,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,OAAO,CAAC;aAC7B,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,WAAW,CAAC;aAEvC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACnB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;iBAC7B,EAAE,GAAG,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,CAAC,WAAW,IAAI,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;iBACxI,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,CAAC;qBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC;yBACvD,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;qBACrE,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,gBAAgB,CAAC,KAAK,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC;yBACvD,eAAe,GAAG,KAAK,CAAC;yBACxB,OAAO,GAAG,mBAAQ,CAAC,kBAAkB,CAAC;qBAC1C,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,wBAAwB,CAAC,KAAK,CAAC,KAAe,CAAC,CAAC,CAAC,CAAC;yBACtE,eAAe,GAAG,KAAK,CAAC;yBACxB,OAAO,GAAG,mBAAQ,CAAC,kBAAkB,CAAC;qBAC1C,CAAC;iBACL,CAAC;aACL,CAAC;aAED,MAAM,gBAAgB,GAAG,IAAI,CAAC,qBAAqB,CAAC,eAAe,CAAC,CAAC;aACrE,MAAM,MAAM,GAAG,gBAAgB,CAAC,MAAM,CAAC;aACvC,MAAM,QAAQ,GAAG,gBAAgB,CAAC,QAAQ,CAAC;aAC3C,eAAe,GAAG,gBAAgB,CAAC,eAAe,CAAC;aACnD,EAAE,CAAC,CAAC,gBAAgB,CAAC,OAAO,CAAC,CAAC,CAAC;iBAC3B,OAAO,GAAG,gBAAgB,CAAC,OAAO,CAAC;aACvC,CAAC;aAED,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aAC3C,MAAM,4BAA4B,GAAG,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC;aACvE,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,gBAAgB,CAAC,MAAM,CAAC;aAC5D,MAAM,IAAI,GAAG,IAAI,CAAC,2BAA2B,EAAE,CAAC;aAChD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,eAAe,CAAC,CAAC,CAAC;iBACzC,IAAI,CAAC,oBAAoB,CAAC,eAAe,EAAE,OAAO,CAAC,CAAC;aACxD,CAAC;aACD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,IAAI,QAAQ,CAAC,CAAC,CAAC;iBAClC,IAAI,CAAC,uBAAuB,CAAC,QAAQ,EAAE,OAAO,CAAC,CAAC;aACpD,CAAC;aACD,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,cAAc,CAAC;aACrC,IAAI,CAAC,OAAO,CAAC,oBAAoB,GAAG,4BAA4B,CAAC;aACjE,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,kBAAkB,CAAC;aACxC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,kBAAkB,CAAC;aAE7C,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,uBAAuB,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,CAAC,CAAC,CAAC,CAAC;iBACtF,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,EAAE,EAAE,MAAM,EAAE,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC;SACxF,CAAC;SAED,uFAAuF;SAEvF,cAAc;aACV,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;aAE7B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aACpC,MAAM,SAAS,GAAG,CAAC,IAAI,CAAC,IAAI,KAAK,eAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;aAC/F,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAExB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,SAAS,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC,CAAC,CAAC,IAAI,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,CAAC,CAAC;SACrH,CAAC;SAED,uBAAuB;aACnB,IAAI,eAAe,GAAoB,IAAI,CAAC;aAE5C,MAAM,IAAI,GAAqB,EAAE,CAAC;aAClC,OAAO,IAAI,EAAE,CAAC;iBACV,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;iBAC7B,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,0BAAwB,CAAC,CAAC,CAAC;qBACrC,KAAK,CAAC;iBACV,CAAC;iBAED,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;iBACxC,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBACrB,MAAM,SAAS,GAAI,SAA4B,CAAC,SAAS,CAAC;iBAC1D,EAAE,CAAC,CAAC,OAAO,SAAS,KAAK,QAAQ,CAAC,CAAC,CAAC;qBAChC,KAAK,CAAC;iBACV,CAAC;iBAED,EAAE,CAAC,CAAC,SAAS,KAAK,YAAY,CAAC,CAAC,CAAC;qBAC7B,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;qBAC3B,EAAE,CAAC,CAAC,eAAe,CAAC,CAAC,CAAC;yBAClB,IAAI,CAAC,uBAAuB,CAAC,eAAe,EAAE,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;qBAC/E,CAAC;qBACD,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,oBAAoB,CAAC,CAAC,CAAC;yBACrC,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,4BAA4B,CAAC,CAAC;qBAC/E,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,EAAE,CAAC,CAAC,CAAC,eAAe,IAAI,KAAK,CAAC,KAAK,CAAC,CAAC,CAAC;yBAClC,eAAe,GAAG,KAAK,CAAC;qBAC5B,CAAC;iBACL,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,yDAAyD;SAEzD,qBAAqB,CAAC,KAAK;aACvB,MAAM,CAAC,CAAC,KAAK,CAAC,IAAI,CAAC,CAAC,CAAC;iBACjB,wBAAsB;iBACtB,2BAAyB;iBACzB,4BAA0B;iBAC1B,yBAAuB;iBACvB,4BAA0B;iBAC1B;qBACI,MAAM,CAAC,IAAI,CAAC;iBAChB;qBACI,MAAM,CAAC,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC;iBAC/B;qBACI,KAAK,CAAC;aACd,CAAC;aACD,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAED,iBAAiB;aACb,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,WAAW,GAAG,KAAK,CAAC;aAC1B,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aACnD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,WAAW,CAAC;aACvC,MAAM,gBAAgB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;aACtD,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC;iBACrC,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,cAAc,CAAC,CAAC;aAChD,CAAC;aACD,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;aAC1D,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,kBAAkB,CAAC;aAE7C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;SAChH,CAAC;SAED,iBAAiB;aACb,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,WAAW,GAAG,KAAK,CAAC;aAC1B,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aACnD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,CAAC,WAAW,CAAC;aACvC,MAAM,gBAAgB,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;aACtD,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;iBACvC,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,cAAc,CAAC,CAAC;aAChD,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,gBAAgB,CAAC,MAAM,CAAC,CAAC,CAAC,YAAY,IAAI,CAAC,WAAW,CAAC,CAAC,CAAC;iBAChE,IAAI,CAAC,aAAa,CAAC,mBAAQ,CAAC,sBAAsB,CAAC,CAAC;aACxD,CAAC;aACD,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,gBAAgB,CAAC,CAAC;aAC1D,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,kBAAkB,CAAC;aAE7C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,gBAAgB,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;SAChH,CAAC;SAED,oBAAoB;aAChB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,WAAW,GAAG,IAAI,CAAC;aACzB,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;aAEnD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,IAAI,CAAC;aAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;aAC5C,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC;aAChC,MAAM,MAAM,GAAG,IAAI,CAAC,mBAAmB,CAAC,MAAM,CAAC,CAAC;aAChD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,kBAAkB,CAAC;aAE7C,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,kBAAkB,CAAC,IAAI,EAAE,MAAM,CAAC,MAAM,EAAE,MAAM,EAAE,WAAW,CAAC,CAAC,CAAC;SACtG,CAAC;SAED,qEAAqE;SAErE,mBAAmB;aACf,IAAI,KAAK,GAAG,IAAI,CAAC;aAEjB,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;aACnC,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,CAAC,CAAC;iBAC1B;qBACI,KAAK,GAAG,CAAC,KAAK,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC;yBACzD,CAAC,KAAK,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC;yBAClC,CAAC,KAAK,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,GAAG,CAAC;yBAClC,CAAC,KAAK,KAAK,IAAI,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC;yBACpC,CAAC,KAAK,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,IAAI,CAAC,CAAC,CAAE,6BAA6B;qBACvE,KAAK,CAAC;iBAEV;qBACI,KAAK,GAAG,CAAC,KAAK,KAAK,OAAO,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC;yBAC/C,CAAC,KAAK,KAAK,UAAU,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC;yBAChE,CAAC,KAAK,KAAK,OAAO,CAAC,IAAI,CAAC,KAAK,KAAK,MAAM,CAAC,IAAI,CAAC,KAAK,KAAK,QAAQ,CAAC;yBACjE,CAAC,KAAK,KAAK,MAAM,CAAC,IAAI,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC;qBAC9C,KAAK,CAAC;iBAEV;qBACI,KAAK,CAAC;aACd,CAAC;aAED,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAED,oBAAoB;aAChB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAE5B,IAAI,QAAQ,GAA2B,IAAI,CAAC;aAC5C,IAAI,QAAQ,GAAG,KAAK,CAAC;aACrB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,iBAAiB,CAAC,CAAC,CAAC;iBAC1B,MAAM,kBAAkB,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;iBACnD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC;iBAChC,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC3B,EAAE,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;qBACX,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,QAAQ,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;iBAChD,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC,CAAC,CAAC;qBACpC,QAAQ,GAAG,IAAI,CAAC,yBAAyB,EAAE,CAAC;iBAChD,CAAC;iBACD,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,kBAAkB,CAAC;aACjD,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,QAAQ,EAAE,QAAQ,CAAC,CAAC,CAAC;SAC7E,CAAC;SAED,wDAAwD;SAExD,iBAAiB,CAAC,cAAc;aAC5B,IAAI,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;aAC3B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,IAAI,GAAW,EAAE,CAAC;aACtB,IAAI,GAAG,GAA4B,IAAI,CAAC;aACxC,IAAI,KAAK,GAAmC,IAAI,CAAC;aACjD,IAAI,QAAQ,GAAG,KAAK,CAAC;aACrB,IAAI,MAAM,GAAG,KAAK,CAAC;aACnB,IAAI,QAAQ,GAAG,KAAK,CAAC;aACrB,IAAI,OAAO,GAAG,KAAK,CAAC;aAEpB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;aACrB,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC3B,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;iBACpC,MAAM,EAAE,GAAG,GAAsB,CAAC;iBAClC,EAAE,CAAC,CAAC,EAAE,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC1F,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;qBACvB,QAAQ,GAAG,IAAI,CAAC;qBAChB,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;qBACrB,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;qBACxC,CAAC;iBACL,CAAC;iBACD,EAAE,CAAC,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,IAAI,CAAC,KAAK,CAAC,KAAK,KAAK,OAAO,CAAC,CAAC,CAAC,CAAC;qBAC5F,MAAM,UAAU,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC;qBACxC,EAAE,CAAC,CAAC,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,IAAI,UAAU,KAAK,GAAG,CAAC,CAAC,CAAC;yBACjE,OAAO,GAAG,IAAI,CAAC;yBACf,KAAK,GAAG,IAAI,CAAC,SAAS,CAAC;yBACvB,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;yBACpC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC;6BAClC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,KAAK,IAAI,KAAK,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC;iCACjD,IAAI,CAAC,uBAAuB,CAAC,KAAK,CAAC,CAAC;6BACxC,CAAC;6BAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,aAAa,CAAC,CAAC,CAAC;iCACvC,IAAI,CAAC,uBAAuB,CAAC,KAAK,EAAE,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;6BACrE,CAAC;yBACL,CAAC;qBACL,CAAC;iBACL,CAAC;aACL,CAAC;aAED,MAAM,oBAAoB,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACxE,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC;iBAClC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,KAAK,IAAI,oBAAoB,CAAC,CAAC,CAAC;qBAChD,IAAI,GAAG,KAAK,CAAC;qBACb,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBAC3B,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;qBACpC,IAAI,CAAC,OAAO,CAAC,UAAU,GAAG,KAAK,CAAC;qBAChC,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBACrC,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,KAAK,IAAI,oBAAoB,CAAC,CAAC,CAAC;qBACvD,IAAI,GAAG,KAAK,CAAC;qBACb,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;qBAC3B,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;qBACpC,KAAK,GAAG,IAAI,CAAC,iBAAiB,EAAE,CAAC;iBACrC,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,IAAI,KAAK,CAAC,KAAK,KAAK,GAAG,IAAI,oBAAoB,CAAC,CAAC,CAAC;iBACxF,IAAI,GAAG,MAAM,CAAC;iBACd,QAAQ,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;iBAC3B,GAAG,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;iBACpC,KAAK,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBACpC,MAAM,GAAG,IAAI,CAAC;aAClB,CAAC;aAED,EAAE,CAAC,CAAC,CAAC,IAAI,IAAI,GAAG,IAAI,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBAClC,IAAI,GAAG,MAAM,CAAC;iBACd,KAAK,GAAG,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,gCAAgC,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,2BAA2B,EAAE,CAAC;iBAC/F,MAAM,GAAG,IAAI,CAAC;aAClB,CAAC;aAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;iBACR,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aAC9C,CAAC;aAED,EAAE,CAAC,CAAC,IAAI,KAAK,MAAM,CAAC,CAAC,CAAC;iBAClB,IAAI,GAAG,QAAQ,CAAC;aACpB,CAAC;aAED,EAAE,CAAC,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACZ,EAAE,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC;qBACnD,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,mBAAQ,CAAC,eAAe,CAAC,CAAC;iBAC/D,CAAC;iBACD,EAAE,CAAC,CAAC,CAAC,QAAQ,IAAI,IAAI,CAAC,aAAa,CAAC,GAAG,EAAE,aAAa,CAAC,CAAC,CAAC,CAAC;qBACtD,EAAE,CAAC,CAAC,IAAI,KAAK,QAAQ,IAAI,CAAC,MAAM,IAAI,CAAC,KAAK,IAAI,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;yBAC7D,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,mBAAQ,CAAC,wBAAwB,CAAC,CAAC;qBACxE,CAAC;qBACD,EAAE,CAAC,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC,CAAC;yBACvB,IAAI,CAAC,oBAAoB,CAAC,KAAK,EAAE,mBAAQ,CAAC,oBAAoB,CAAC,CAAC;qBACpE,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,cAAc,CAAC,KAAK,GAAG,IAAI,CAAC;qBAChC,CAAC;qBACD,IAAI,GAAG,aAAa,CAAC;iBACzB,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,GAAG,EAAE,QAAQ,EAAE,KAAK,EAAE,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC;SAChG,CAAC;SAED,qBAAqB;aACjB,MAAM,IAAI,GAAoB,EAAE,CAAC;aACjC,MAAM,cAAc,GAAG,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC;aACxC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;iBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACrB,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,iBAAiB,CAAC,cAAc,CAAC,CAAC,CAAC;iBACtD,CAAC;aACL,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAED,cAAc;aACV,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,EAAE,CAAC;aAEjD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,SAAS,CAAC,WAAW,CAAC,CAAC,CAAC;SAChE,CAAC;SAED,qBAAqB,CAAC,oBAA8B;aAChD,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aAC3C,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;aAC3B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAE5B,MAAM,EAAE,GAAG,CAAC,oBAAoB,IAAI,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC;aACxH,IAAI,UAAU,GAA2B,IAAI,CAAC;aAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;iBAC/B,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;aACrF,CAAC;aACD,IAAI,QAAQ,GAA2B,IAAI,CAAC;aAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,eAAe,CAAC,GAAG,CAAC,CAAC,EAAC;iBAC3B,QAAQ,GAAC,EAAE,CAAC;iBACZ,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,IAAI,UAAU,GAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;iBAC1C,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC;iBAC1B,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;qBACtB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;yBACjB,IAAI,UAAU,GAAC,IAAI,CAAC,mBAAmB,EAAE,CAAC;yBAC1C,QAAQ,CAAC,IAAI,CAAC,UAAU,CAAC;qBAC7B,CAAC;iBACL,CAAC;iBACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACrB,CAAC;aAED,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;aACxC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,cAAc,CAAC;aAErC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,UAAU,EAAE,QAAQ,EAAE,SAAS,CAAC,CAAC,CAAC;SAC/F,CAAC;SAED,oBAAoB;aAChB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,cAAc,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aAC3C,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;aAC3B,IAAI,CAAC,aAAa,CAAC,OAAO,CAAC,CAAC;aAC5B,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,uBAAuB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;aAC9F,IAAI,UAAU,GAA2B,IAAI,CAAC;aAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;iBAC/B,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,UAAU,GAAG,IAAI,CAAC,mBAAmB,CAAC,IAAI,CAAC,oCAAoC,CAAC,CAAC;aACrF,CAAC;aACD,MAAM,SAAS,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;aACxC,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,cAAc,CAAC;aAErC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,EAAE,EAAE,UAAU,EAAE,SAAS,CAAC,CAAC,CAAC;SACpF,CAAC;SAED,8CAA8C;SAC9C,8CAA8C;SAE9C,WAAW;aACP,IAAI,CAAC,OAAO,CAAC,MAAM,GAAG,IAAI,CAAC;aAC3B,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;aAC7B,IAAI,CAAC,OAAO,CAAC,QAAQ,GAAG,IAAI,CAAC;aAC7B,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;aAC5C,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,gBAAc,EAAE,CAAC;iBACvC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;aAC7C,CAAC;aACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;SACtD,CAAC;SAED,WAAW;aACP,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,IAAI,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;aAC5C,OAAO,IAAI,CAAC,SAAS,CAAC,IAAI,gBAAc,EAAE,CAAC;iBACvC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;aAC7C,CAAC;aACD,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,CAAC,CAAC;SACtD,CAAC;SAED,8CAA8C;SAE9C,oBAAoB;aAChB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,0BAAwB,CAAC,CAAC,CAAC;iBAC9C,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,sBAAsB,CAAC,CAAC;aACrD,CAAC;aAED,MAAM,KAAK,GAAG,IAAI,CAAC,SAAS,EAAE,CAAC;aAC/B,MAAM,GAAG,GAAG,IAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;aACpC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAe,EAAE,GAAG,CAAC,CAAC,CAAC;SAC7E,CAAC;SAED,6BAA6B;SAC7B,oBAAoB;aAChB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,QAAyB,CAAC;aAC9B,IAAI,KAAsB,CAAC;aAC3B,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,uBAAqB,CAAC,CAAC,CAAC;iBAC3C,QAAQ,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;iBAC1C,KAAK,GAAG,QAAQ,CAAC;iBACjB,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACpC,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,KAAK,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;iBAC3C,CAAC;aACL,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;iBACtC,KAAK,GAAG,QAAQ,CAAC;iBACjB,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qBACpC,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,KAAK,GAAG,IAAI,CAAC,uBAAuB,EAAE,CAAC;iBAC3C,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;iBAChD,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;SAC1E,CAAC;SAED,oBAAoB;SACpB,iBAAiB;aACb,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,MAAM,UAAU,GAA2B,EAAE,CAAC;aAC9C,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;iBACtB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;iBAC7C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBACrB,CAAC;aACL,CAAC;aACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aAEjB,MAAM,CAAC,UAAU,CAAC;SACtB,CAAC;SAED,oBAAoB;SACpB,2BAA2B;aACvB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;aACzC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,sBAAsB,CAAC,KAAK,CAAC,CAAC,CAAC;SACvE,CAAC;SAED,yBAAyB;SACzB,6BAA6B;aACzB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;aACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACrC,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,wBAAwB,CAAC,CAAC;aACvD,CAAC;aACD,IAAI,CAAC,SAAS,EAAE,CAAC;aACjB,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;aAEzC,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC;SACzE,CAAC;SAED,sBAAsB;aAClB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;iBAC9B,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,wBAAwB,CAAC,CAAC;aACvD,CAAC;aAED,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;aAE7B,IAAI,GAAiB,CAAC;aACtB,IAAI,UAAU,GAAsC,EAAE,CAAC;aACvD,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,0BAAwB,CAAC,CAAC,CAAC;iBAC9C,gBAAgB;iBAChB,GAAG,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;aACtC,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBAClB,eAAe;qBACf,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;iBAC7D,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;qBACzB,kBAAkB;qBAClB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,6BAA6B,EAAE,CAAC,CAAC;iBAC1D,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,gBAAgB,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;qBAChF,aAAa;qBACb,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,2BAA2B,EAAE,CAAC,CAAC;qBACpD,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBAClB,IAAI,CAAC,SAAS,EAAE,CAAC;yBACjB,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;6BAClB,uBAAuB;6BACvB,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,6BAA6B,EAAE,CAAC,CAAC;yBAC1D,CAAC;yBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;6BACzB,oBAAoB;6BACpB,UAAU,GAAG,UAAU,CAAC,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC,CAAC;yBAC7D,CAAC;yBAAC,IAAI,CAAC,CAAC;6BACJ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;yBAC9C,CAAC;qBACL,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,EAAE,CAAC,CAAC;iBAChD,CAAC;iBAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBACvC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,mBAAQ,CAAC,iBAAiB,CAAC;qBAC7F,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;iBACnD,CAAC;iBACD,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,GAAG,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;aACtC,CAAC;aACD,IAAI,CAAC,gBAAgB,EAAE,CAAC;aAExB,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,iBAAiB,CAAC,UAAU,EAAE,GAAG,CAAC,CAAC,CAAC;SAC5E,CAAC;SAED,8CAA8C;SAE9C,oBAAoB;aAChB,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAE/B,MAAM,KAAK,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;aACzC,IAAI,QAAQ,GAAG,KAAK,CAAC;aACrB,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBACpC,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,QAAQ,GAAG,IAAI,CAAC,mBAAmB,EAAE,CAAC;aAC1C,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,eAAe,CAAC,KAAK,EAAE,QAAQ,CAAC,CAAC,CAAC;SAC1E,CAAC;SAED,sBAAsB;aAClB,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,cAAc,CAAC,CAAC,CAAC;iBAC9B,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,wBAAwB,CAAC,CAAC;aACvD,CAAC;aAED,MAAM,IAAI,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;aAC/B,IAAI,CAAC,aAAa,CAAC,QAAQ,CAAC,CAAC;aAE7B,IAAI,iBAAiB,CAAC;aACtB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;iBAC/B,qBAAqB;iBACrB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;qBAChC,oCAAoC;qBACpC,gCAAgC;qBAChC,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC;qBACxD,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC,CAAC;iBAC5F,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;qBACpC,8BAA8B;qBAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,qBAAqB,CAAC,IAAI,CAAC,CAAC;qBACrD,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC,CAAC;iBAC5F,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC;qBAC9C,wCAAwC;qBACxC,sCAAsC;qBACtC,8BAA8B;qBAC9B,MAAM,WAAW,GAAG,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC;qBACvH,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC,CAAC;iBAC5F,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;yBACtC,IAAI,CAAC,UAAU,CAAC,mBAAQ,CAAC,eAAe,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;qBACpE,CAAC;qBACD,qBAAqB;qBACrB,qBAAqB;qBACrB,0BAA0B;qBAC1B,MAAM,WAAW,GAAG,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC;yBACjE,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,yBAAyB,EAAE,CAAC;qBACtF,IAAI,CAAC,gBAAgB,EAAE,CAAC;qBACxB,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,wBAAwB,CAAC,WAAW,CAAC,CAAC,CAAC;iBAC5F,CAAC;aAEL,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;iBACzB,uBAAuB;iBACvB,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBACvC,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,mBAAQ,CAAC,iBAAiB,CAAC;qBAC7F,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;iBACnD,CAAC;iBACD,IAAI,CAAC,SAAS,EAAE,CAAC;iBACjB,MAAM,GAAG,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBACxC,IAAI,CAAC,gBAAgB,EAAE,CAAC;iBACxB,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,oBAAoB,CAAC,GAAG,CAAC,CAAC,CAAC;aAEhF,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,IAAI,oBAAkB,CAAC,CAAC,CAAC;iBAC/C,oBAAoB;iBACpB,IAAI,WAAW,CAAC;iBAChB,MAAM,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC;qBAC3B,KAAK,KAAK,CAAC;qBACX,KAAK,OAAO;yBACR,WAAW,GAAG,IAAI,CAAC,uBAAuB,CAAC,EAAE,KAAK,EAAE,KAAK,EAAE,CAAC,CAAC;yBAC7D,KAAK,CAAC;qBACV,KAAK,KAAK,CAAC;qBACX,KAAK,OAAO,CAAC;qBACb,KAAK,UAAU;yBACX,WAAW,GAAG,IAAI,CAAC,sBAAsB,EAAE,CAAC;yBAC5C,KAAK,CAAC;qBACV;yBACI,IAAI,CAAC,oBAAoB,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;iBAClD,CAAC;iBACD,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;aAEpG,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC,CAAC,CAAC;iBACnC,MAAM,WAAW,GAAG,IAAI,CAAC,wBAAwB,EAAE,CAAC;iBACpD,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,sBAAsB,CAAC,WAAW,EAAE,EAAE,EAAE,IAAI,CAAC,CAAC,CAAC;aAEpG,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,MAAM,UAAU,GAA2B,EAAE,CAAC;iBAC9C,IAAI,MAAM,GAAwB,IAAI,CAAC;iBACvC,IAAI,sBAAsB,GAAG,KAAK,CAAC;iBAEnC,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBACjB,OAAO,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,EAAE,CAAC;qBACtB,sBAAsB,GAAG,sBAAsB,IAAI,IAAI,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;qBAChF,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC;qBAC7C,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC;yBACnB,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;qBACrB,CAAC;iBACL,CAAC;iBACD,IAAI,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC;iBAEjB,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;qBACtC,+BAA+B;qBAC/B,2BAA2B;qBAC3B,IAAI,CAAC,SAAS,EAAE,CAAC;qBACjB,MAAM,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;qBACrC,IAAI,CAAC,gBAAgB,EAAE,CAAC;iBAC5B,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,sBAAsB,CAAC,CAAC,CAAC;qBAChC,0CAA0C;qBAC1C,MAAM,OAAO,GAAG,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,CAAC,mBAAQ,CAAC,eAAe,CAAC,CAAC,CAAC,mBAAQ,CAAC,iBAAiB,CAAC;qBAC7F,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC;iBACnD,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,gBAAgB;qBAChB,IAAI,CAAC,gBAAgB,EAAE,CAAC;iBAC5B,CAAC;iBACD,iBAAiB,GAAG,IAAI,CAAC,QAAQ,CAAC,IAAI,EAAE,IAAI,IAAI,CAAC,sBAAsB,CAAC,IAAI,EAAE,UAAU,EAAE,MAAM,CAAC,CAAC,CAAC;aACvG,CAAC;aAED,MAAM,CAAC,iBAAiB,CAAC;SAC7B,CAAC;MAEJ;KAlhHD,wBAkhHC;;;;;;;;;;;;;;;;;;;KChlHD,qCAAkC;KAClC,2CAAwC;KAExC,yCAAsC;KAGtC,kBAAkB,EAAU;SACxB,MAAM,CAAC,kBAAkB,CAAC,OAAO,CAAC,EAAE,CAAC,WAAW,EAAE,CAAC,CAAC;KACxD,CAAC;KAED,oBAAoB,EAAU;SAC1B,MAAM,CAAC,UAAU,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;KAClC,CAAC;KA0CD;SAcI,YAAY,IAAY,EAAE,OAAqB;aAC3C,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC;aACnB,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;aAC5B,IAAI,CAAC,YAAY,GAAG,KAAK,CAAC;aAC1B,IAAI,CAAC,QAAQ,GAAG,KAAK,CAAC;aAEtB,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;aAC1B,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;aACf,IAAI,CAAC,UAAU,GAAG,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC5C,IAAI,CAAC,SAAS,GAAG,CAAC,CAAC;aACnB,IAAI,CAAC,UAAU,GAAG,EAAE,CAAC;SACzB,CAAC;SAEM,SAAS;aACZ,MAAM,CAAC;iBACH,KAAK,EAAE,IAAI,CAAC,KAAK;iBACjB,UAAU,EAAE,IAAI,CAAC,UAAU;iBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;cAC5B,CAAC;SACN,CAAC;SAEM,YAAY,CAAC,KAAmB;aACnC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;aACzB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC,UAAU,CAAC;aACnC,IAAI,CAAC,SAAS,GAAG,KAAK,CAAC,SAAS,CAAC;SACrC,CAAC;SAEM,GAAG;aACN,MAAM,CAAC,IAAI,CAAC,KAAK,IAAI,IAAI,CAAC,MAAM,CAAC;SACrC,CAAC;SAEM,oBAAoB,CAAC,OAAO,GAAG,mBAAQ,CAAC,sBAAsB;aACjE,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EAC3D,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;SAClD,CAAC;SAEO,uBAAuB,CAAC,OAAO,GAAG,mBAAQ,CAAC,sBAAsB;aACrE,IAAI,CAAC,YAAY,CAAC,aAAa,CAAC,IAAI,CAAC,KAAK,EAAE,IAAI,CAAC,UAAU,EACvD,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC,EAAE,OAAO,CAAC,CAAC;SAClD,CAAC;SAED,+CAA+C;SAEvC,qBAAqB,CAAC,MAAc;aACxC,IAAI,QAAQ,GAAc,EAAE,CAAC;aAC7B,IAAI,KAAK,EAAE,GAAG,CAAC;aAEf,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;iBACpB,QAAQ,GAAG,EAAE,CAAC;iBACd,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,MAAM,CAAC;iBAC5B,GAAG,GAAG;qBACF,KAAK,EAAE;yBACH,IAAI,EAAE,IAAI,CAAC,UAAU;yBACrB,MAAM,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,MAAM;sBAC/C;qBACD,GAAG,EAAE,EAAE;kBACV,CAAC;aACN,CAAC;aAED,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC9C,EAAE,IAAI,CAAC,KAAK,CAAC;iBACb,EAAE,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBACjC,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;yBACpB,GAAG,CAAC,GAAG,GAAG;6BACN,IAAI,EAAE,IAAI,CAAC,UAAU;6BACrB,MAAM,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC;0BAC1C,CAAC;yBACF,MAAM,KAAK,GAAY;6BACnB,SAAS,EAAE,KAAK;6BAChB,KAAK,EAAE,CAAC,KAAK,GAAG,MAAM,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;6BACvC,KAAK,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;6BAC9B,GAAG,EAAE,GAAG;0BACX,CAAC;yBACF,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACzB,CAAC;qBACD,EAAE,CAAC,CAAC,EAAE,KAAK,EAAE,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;yBACzD,EAAE,IAAI,CAAC,KAAK,CAAC;qBACjB,CAAC;qBACD,EAAE,IAAI,CAAC,UAAU,CAAC;qBAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;qBAC5B,MAAM,CAAC,QAAQ,CAAC;iBACpB,CAAC;aACL,CAAC;aAED,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;iBACpB,GAAG,CAAC,GAAG,GAAG;qBACN,IAAI,EAAE,IAAI,CAAC,UAAU;qBACrB,MAAM,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS;kBACtC,CAAC;iBACF,MAAM,KAAK,GAAY;qBACnB,SAAS,EAAE,KAAK;qBAChB,KAAK,EAAE,CAAC,KAAK,GAAG,MAAM,EAAE,IAAI,CAAC,KAAK,CAAC;qBACnC,KAAK,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC;qBAC1B,GAAG,EAAE,GAAG;kBACX,CAAC;iBACF,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACzB,CAAC;aAED,MAAM,CAAC,QAAQ,CAAC;SACpB,CAAC;SAEO,oBAAoB;aACxB,IAAI,QAAQ,GAAc,EAAE,CAAC;aAC7B,IAAI,KAAK,EAAE,GAAG,CAAC;aAEf,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;iBACpB,QAAQ,GAAG,EAAE,CAAC;iBACd,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;iBACvB,GAAG,GAAG;qBACF,KAAK,EAAE;yBACH,IAAI,EAAE,IAAI,CAAC,UAAU;yBACrB,MAAM,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS,GAAG,CAAC;sBAC1C;qBACD,GAAG,EAAE,EAAE;kBACV,CAAC;aACN,CAAC;aAED,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC9C,EAAE,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBACjC,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;yBACjE,EAAE,IAAI,CAAC,KAAK,CAAC;qBACjB,CAAC;qBACD,EAAE,IAAI,CAAC,UAAU,CAAC;qBAClB,EAAE,IAAI,CAAC,KAAK,CAAC;qBACb,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;iBAChC,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;qBACrB,gCAAgC;qBAChC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;yBAClD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;yBAChB,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;6BACpB,GAAG,CAAC,GAAG,GAAG;iCACN,IAAI,EAAE,IAAI,CAAC,UAAU;iCACrB,MAAM,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS;8BACtC,CAAC;6BACF,MAAM,KAAK,GAAY;iCACnB,SAAS,EAAE,IAAI;iCACf,KAAK,EAAE,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC;iCAClC,KAAK,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC;iCAC1B,GAAG,EAAE,GAAG;8BACX,CAAC;6BACF,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;yBACzB,CAAC;yBACD,MAAM,CAAC,QAAQ,CAAC;qBACpB,CAAC;qBACD,EAAE,IAAI,CAAC,KAAK,CAAC;iBACjB,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,EAAE,IAAI,CAAC,KAAK,CAAC;iBACjB,CAAC;aACL,CAAC;aAED,6DAA6D;aAC7D,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;iBACpB,GAAG,CAAC,GAAG,GAAG;qBACN,IAAI,EAAE,IAAI,CAAC,UAAU;qBACrB,MAAM,EAAE,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,SAAS;kBACtC,CAAC;iBACF,MAAM,KAAK,GAAY;qBACnB,SAAS,EAAE,IAAI;qBACf,KAAK,EAAE,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,CAAC;qBAC9B,KAAK,EAAE,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC;qBAC1B,GAAG,EAAE,GAAG;kBACX,CAAC;iBACF,QAAQ,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACzB,CAAC;aAED,IAAI,CAAC,uBAAuB,EAAE,CAAC;aAC/B,MAAM,CAAC,QAAQ,CAAC;SACpB,CAAC;SAEM,YAAY;aACf,IAAI,QAAQ,CAAC;aACb,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;iBACpB,QAAQ,GAAG,EAAE,CAAC;aAClB,CAAC;aAED,IAAI,KAAK,GAAG,CAAC,IAAI,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;aAC/B,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAE5C,EAAE,CAAC,CAAC,qBAAS,CAAC,YAAY,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBAC7B,EAAE,IAAI,CAAC,KAAK,CAAC;iBACjB,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBACxC,EAAE,IAAI,CAAC,KAAK,CAAC;qBACb,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;yBAC7D,EAAE,IAAI,CAAC,KAAK,CAAC;qBACjB,CAAC;qBACD,EAAE,IAAI,CAAC,UAAU,CAAC;qBAClB,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;qBAC5B,KAAK,GAAG,IAAI,CAAC;iBACjB,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;qBACrB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;qBAC5C,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;yBACd,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;yBAChB,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;yBAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;6BACpB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;yBACxC,CAAC;yBACD,KAAK,GAAG,IAAI,CAAC;qBACjB,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;yBACrB,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;yBAChB,MAAM,OAAO,GAAG,IAAI,CAAC,oBAAoB,EAAE,CAAC;yBAC5C,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;6BACpB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;yBACxC,CAAC;qBACL,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,KAAK,CAAC;qBACV,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,IAAI,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;qBAC9B,gBAAgB;qBAChB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;yBACzG,iCAAiC;yBACjC,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;yBAChB,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;yBAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;6BACpB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;yBACxC,CAAC;qBACL,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,KAAK,CAAC;qBACV,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;qBACvC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,KAAK,CAAC,CAAC,CAAC;yBAC9D,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,SAAS;yBAC1B,MAAM,OAAO,GAAG,IAAI,CAAC,qBAAqB,CAAC,CAAC,CAAC,CAAC;yBAC9C,EAAE,CAAC,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC,CAAC;6BACpB,QAAQ,GAAG,QAAQ,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;yBACxC,CAAC;qBACL,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,KAAK,CAAC;qBACV,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,KAAK,CAAC;iBACV,CAAC;aACL,CAAC;aAED,MAAM,CAAC,QAAQ,CAAC;SACpB,CAAC;SAED,4DAA4D;SAErD,oBAAoB,CAAC,EAAU;aAClC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBACT,KAAK,MAAM,CAAC;iBACZ,KAAK,QAAQ,CAAC;iBACd,KAAK,QAAQ,CAAC;iBACd,KAAK,OAAO;qBACR,MAAM,CAAC,IAAI,CAAC;iBAChB;qBACI,MAAM,CAAC,KAAK,CAAC;aACrB,CAAC;SACL,CAAC;SAEM,wBAAwB,CAAC,EAAU;aACtC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBACT,KAAK,YAAY,CAAC;iBAClB,KAAK,WAAW,CAAC;iBACjB,KAAK,SAAS,CAAC;iBACf,KAAK,SAAS,CAAC;iBACf,KAAK,WAAW,CAAC;iBACjB,KAAK,QAAQ,CAAC;iBACd,KAAK,QAAQ,CAAC;iBACd,KAAK,OAAO,CAAC;iBACb,KAAK,KAAK;qBACN,MAAM,CAAC,IAAI,CAAC;iBAChB;qBACI,MAAM,CAAC,KAAK,CAAC;aACrB,CAAC;SACL,CAAC;SAEM,gBAAgB,CAAC,EAAU;aAC9B,MAAM,CAAC,EAAE,KAAK,MAAM,IAAI,EAAE,KAAK,WAAW,CAAC;SAC/C,CAAC;SAED,+CAA+C;SAEvC,SAAS,CAAC,EAAU;aACxB,MAAM,CAAC,CAAC,EAAE,CAAC,MAAM,CAAC,CAAC,CAAC;iBAChB,KAAK,CAAC;qBACF,MAAM,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,IAAI,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC;iBAC3D,KAAK,CAAC;qBACF,MAAM,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC;yBACrD,CAAC,EAAE,KAAK,KAAK,CAAC,IAAI,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC;iBACzC,KAAK,CAAC;qBACF,MAAM,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC;yBACxD,CAAC,EAAE,KAAK,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,IAAI,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC;iBAC9D,KAAK,CAAC;qBACF,MAAM,CAAC,CAAC,EAAE,KAAK,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,OAAO,CAAC;yBAC3D,CAAC,EAAE,KAAK,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,OAAO,CAAC;yBACxD,CAAC,EAAE,KAAK,OAAO,CAAC,IAAI,CAAC,EAAE,KAAK,OAAO,CAAC,CAAC;iBAC7C,KAAK,CAAC;qBACF,MAAM,CAAC,CAAC,EAAE,KAAK,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,QAAQ,CAAC;yBAC9D,CAAC,EAAE,KAAK,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,QAAQ,CAAC,IAAI,CAAC,EAAE,KAAK,QAAQ,CAAC,CAAC;iBACpE,KAAK,CAAC;qBACF,MAAM,CAAC,CAAC,EAAE,KAAK,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,SAAS,CAAC,IAAI,CAAC,EAAE,KAAK,SAAS,CAAC,CAAC;iBAC1E,KAAK,CAAC;qBACF,MAAM,CAAC,CAAC,EAAE,KAAK,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,UAAU,CAAC,IAAI,CAAC,EAAE,KAAK,UAAU,CAAC,CAAC;iBAC7E,KAAK,EAAE;qBACH,MAAM,CAAC,CAAC,EAAE,KAAK,YAAY,CAAC,CAAC;iBACjC;qBACI,MAAM,CAAC,KAAK,CAAC;aACrB,CAAC;SACL,CAAC;SAEO,WAAW,CAAC,CAAS;aACzB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC;aAEnC,EAAE,CAAC,CAAC,EAAE,IAAI,MAAM,IAAI,EAAE,IAAI,MAAM,CAAC,CAAC,CAAC;iBAC/B,MAAM,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBAC7C,EAAE,CAAC,CAAC,MAAM,IAAI,MAAM,IAAI,MAAM,IAAI,MAAM,CAAC,CAAC,CAAC;qBACvC,MAAM,KAAK,GAAG,EAAE,CAAC;qBACjB,EAAE,GAAG,CAAC,KAAK,GAAG,MAAM,CAAC,GAAG,KAAK,GAAG,MAAM,GAAG,MAAM,GAAG,OAAO,CAAC;iBAC9D,CAAC;aACL,CAAC;aAED,MAAM,CAAC,EAAE,CAAC;SACd,CAAC;SAEO,aAAa,CAAC,MAAc;aAChC,MAAM,GAAG,GAAG,CAAC,MAAM,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aACrC,IAAI,IAAI,GAAG,CAAC,CAAC;aAEb,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,GAAG,EAAE,EAAE,CAAC,EAAE,CAAC;iBAC3B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,qBAAS,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC1E,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,QAAQ,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;iBAC3D,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,MAAM,CAAC,IAAI,CAAC;iBAChB,CAAC;aACL,CAAC;aACD,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,IAAI,CAAC,CAAC;SACrC,CAAC;SAEO,0BAA0B;aAC9B,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACjC,IAAI,IAAI,GAAG,CAAC,CAAC;aAEb,uCAAuC;aACvC,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;iBACb,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBAC/B,EAAE,CAAC,CAAC,CAAC,qBAAS,CAAC,UAAU,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC1C,KAAK,CAAC;iBACV,CAAC;iBACD,IAAI,GAAG,IAAI,GAAG,EAAE,GAAG,QAAQ,CAAC,EAAE,CAAC,CAAC;aACpC,CAAC;aAED,EAAE,CAAC,CAAC,IAAI,GAAG,QAAQ,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;iBAChC,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,MAAM,CAAC,qBAAS,CAAC,aAAa,CAAC,IAAI,CAAC,CAAC;SACzC,CAAC;SAEO,aAAa;aACjB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,EAAE,CAAC;aAC3B,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC9C,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;qBACd,qDAAqD;qBACrD,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;qBACnB,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBACvC,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,IAAI,MAAM,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;qBACrC,kCAAkC;qBAClC,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;qBACnB,MAAM,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBACvC,CAAC;iBACD,EAAE,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBACjC,EAAE,IAAI,CAAC,KAAK,CAAC;iBACjB,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,KAAK,CAAC;iBACV,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;SAChD,CAAC;SAEO,oBAAoB;aACxB,IAAI,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACtC,IAAI,EAAE,GAAG,qBAAS,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;aACrC,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,CAAC;aAExB,sDAAsD;aACtD,IAAI,EAAE,CAAC;aACP,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;iBACd,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;qBAC9C,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBAChC,CAAC;iBACD,EAAE,IAAI,CAAC,KAAK,CAAC;iBACb,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;qBAClC,EAAE,IAAI,CAAC,KAAK,CAAC;qBACb,EAAE,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;iBAC3C,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;qBAC7B,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,IAAI,CAAC,qBAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;yBAC/E,IAAI,CAAC,oBAAoB,EAAE,CAAC;qBAChC,CAAC;iBACL,CAAC;iBACD,EAAE,GAAG,EAAE,CAAC;aACZ,CAAC;aAED,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,EAAE,GAAG,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAClC,EAAE,CAAC,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBAClC,KAAK,CAAC;iBACV,CAAC;iBACD,EAAE,GAAG,qBAAS,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;iBACjC,EAAE,IAAI,EAAE,CAAC;iBACT,IAAI,CAAC,KAAK,IAAI,EAAE,CAAC,MAAM,CAAC;iBAExB,sDAAsD;iBACtD,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;qBACd,EAAE,GAAG,EAAE,CAAC,MAAM,CAAC,CAAC,EAAE,EAAE,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;qBACjC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;yBAC9C,IAAI,CAAC,oBAAoB,EAAE,CAAC;qBAChC,CAAC;qBACD,EAAE,IAAI,CAAC,KAAK,CAAC;qBACb,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;yBAClC,EAAE,IAAI,CAAC,KAAK,CAAC;yBACb,EAAE,GAAG,IAAI,CAAC,0BAA0B,EAAE,CAAC;qBAC3C,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,EAAE,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;yBAC7B,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,IAAI,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;6BAC9E,IAAI,CAAC,oBAAoB,EAAE,CAAC;yBAChC,CAAC;qBACL,CAAC;qBACD,EAAE,IAAI,EAAE,CAAC;iBACb,CAAC;aACL,CAAC;aAED,MAAM,CAAC,EAAE,CAAC;SACd,CAAC;SAEO,cAAc,CAAC,EAAU;aAC7B,kCAAkC;aAClC,IAAI,KAAK,GAAG,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC;aACzB,IAAI,IAAI,GAAG,UAAU,CAAC,EAAE,CAAC,CAAC;aAE1B,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,qBAAS,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC5E,KAAK,GAAG,IAAI,CAAC;iBACb,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;iBAExD,+CAA+C;iBAC/C,kBAAkB;iBAClB,EAAE,CAAC,CAAC,MAAM,CAAC,OAAO,CAAC,EAAE,CAAC,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,IAAI,qBAAS,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;qBACvG,IAAI,GAAG,IAAI,GAAG,CAAC,GAAG,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;iBAC5D,CAAC;aACL,CAAC;aAED,MAAM,CAAC;iBACH,IAAI,EAAE,IAAI;iBACV,KAAK,EAAE,KAAK;cACf,CAAC;SACN,CAAC;SAED,yDAAyD;SAEjD,cAAc;aAClB,IAAI,IAAW,CAAC;aAChB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;aAEzB,kDAAkD;aAClD,MAAM,EAAE,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,oBAAoB,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,aAAa,EAAE,CAAC;aAEzG,0DAA0D;aAC1D,kCAAkC;aAClC,EAAE,CAAC,CAAC,EAAE,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;iBAClB,IAAI,qBAAmB,CAAC;aAC5B,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;iBAC5B,IAAI,kBAAgB,CAAC;aACzB,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,MAAM,CAAC,CAAC,CAAC;iBACvB,IAAI,sBAAoB,CAAC;aAC7B,CAAC;aAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,MAAM,IAAI,EAAE,KAAK,OAAO,CAAC,CAAC,CAAC;iBACzC,IAAI,yBAAuB,CAAC;aAChC,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,qBAAmB,CAAC;aAC5B,CAAC;aAED,EAAE,CAAC,CAAC,IAAI,uBAAqB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC,MAAM,KAAK,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC;iBAClE,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;iBAC3B,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;iBACnB,IAAI,CAAC,uBAAuB,CAAC,mBAAQ,CAAC,0BAA0B,CAAC,CAAC;iBAClE,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;aACzB,CAAC;aAED,MAAM,CAAC;iBACH,IAAI,EAAE,IAAI;iBACV,KAAK,EAAE,EAAE;iBACT,UAAU,EAAE,IAAI,CAAC,UAAU;iBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;iBACzB,KAAK,EAAE,KAAK;iBACZ,GAAG,EAAE,IAAI,CAAC,KAAK;cAClB,CAAC;SACN,CAAC;SAED,kDAAkD;SAE1C,cAAc;aAClB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;aAEzB,sDAAsD;aACtD,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAClC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC;iBAEV,KAAK,GAAG,CAAC;iBACT,KAAK,GAAG;qBACJ,EAAE,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;yBACd,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,GAAG,CAAC,CAAC;qBAC9B,CAAC;qBACD,EAAE,IAAI,CAAC,KAAK,CAAC;qBACb,KAAK,CAAC;iBAEV,KAAK,GAAG;qBACJ,EAAE,IAAI,CAAC,KAAK,CAAC;qBACb,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;yBACzE,uBAAuB;yBACvB,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;yBAChB,GAAG,GAAG,KAAK,CAAC;qBAChB,CAAC;qBACD,KAAK,CAAC;iBAEV,KAAK,GAAG;qBACJ,EAAE,IAAI,CAAC,KAAK,CAAC;qBACb,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;qBACtB,KAAK,CAAC;iBACV,KAAK,GAAG,CAAC;iBACT,KAAK,GAAG,CAAC;iBACT,KAAK,GAAG,CAAC;iBACT,KAAK,GAAG,CAAC;iBACT,KAAK,GAAG,CAAC;iBACT,KAAK,GAAG,CAAC;iBACT,KAAK,GAAG,CAAC;iBACT,KAAK,GAAG;qBACJ,EAAE,IAAI,CAAC,KAAK,CAAC;qBACb,KAAK,CAAC;iBAEV;qBACI,0BAA0B;qBAC1B,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC,CAAC;qBACxC,EAAE,CAAC,CAAC,GAAG,KAAK,MAAM,CAAC,CAAC,CAAC;yBACjB,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;qBACpB,CAAC;qBAAC,IAAI,CAAC,CAAC;yBAEJ,2BAA2B;yBAC3B,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;yBACvB,EAAE,CAAC,CAAC,GAAG,KAAK,KAAK,IAAI,GAAG,KAAK,KAAK,IAAI,GAAG,KAAK,KAAK;6BAC/C,GAAG,KAAK,KAAK,IAAI,GAAG,KAAK,KAAK,IAAI,GAAG,KAAK,KAAK,CAAC,CAAC,CAAC;6BAClD,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;yBACpB,CAAC;yBAAC,IAAI,CAAC,CAAC;6BAEJ,2BAA2B;6BAC3B,GAAG,GAAG,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;6BACvB,EAAE,CAAC,CAAC,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI;iCAC5D,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI;iCAC5D,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI;iCAC5D,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI;iCAC5D,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,IAAI,GAAG,KAAK,IAAI,CAAC,CAAC,CAAC;iCAC/D,IAAI,CAAC,KAAK,IAAI,CAAC,CAAC;6BACpB,CAAC;6BAAC,IAAI,CAAC,CAAC;iCAEJ,2BAA2B;iCAC3B,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iCAC9B,EAAE,CAAC,CAAC,cAAc,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;qCACnC,EAAE,IAAI,CAAC,KAAK,CAAC;iCACjB,CAAC;6BACL,CAAC;yBACL,CAAC;qBACL,CAAC;aACT,CAAC;aAED,EAAE,CAAC,CAAC,IAAI,CAAC,KAAK,KAAK,KAAK,CAAC,CAAC,CAAC;iBACvB,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,MAAM,CAAC;iBACH,IAAI,oBAAkB;iBACtB,KAAK,EAAE,GAAG;iBACV,UAAU,EAAE,IAAI,CAAC,UAAU;iBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;iBACzB,KAAK,EAAE,KAAK;iBACZ,GAAG,EAAE,IAAI,CAAC,KAAK;cAClB,CAAC;SACN,CAAC;SAED,gEAAgE;SAExD,cAAc,CAAC,KAAa;aAChC,IAAI,GAAG,GAAG,EAAE,CAAC;aAEb,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,EAAE,CAAC,CAAC,CAAC,qBAAS,CAAC,UAAU,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC5D,KAAK,CAAC;iBACV,CAAC;iBACD,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;aACrC,CAAC;aAED,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;iBACnB,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,EAAE,CAAC,CAAC,qBAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClE,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,MAAM,CAAC;iBACH,IAAI,wBAAsB;iBAC1B,KAAK,EAAE,QAAQ,CAAC,IAAI,GAAG,GAAG,EAAE,EAAE,CAAC;iBAC/B,UAAU,EAAE,IAAI,CAAC,UAAU;iBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;iBACzB,KAAK,EAAE,KAAK;iBACZ,GAAG,EAAE,IAAI,CAAC,KAAK;cAClB,CAAC;SACN,CAAC;SAEO,iBAAiB,CAAC,KAAa;aACnC,IAAI,GAAG,GAAG,EAAE,CAAC;aACb,IAAI,EAAE,CAAC;aAEP,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC7B,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;qBAC3B,KAAK,CAAC;iBACV,CAAC;iBACD,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;aACrC,CAAC;aAED,EAAE,CAAC,CAAC,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;iBACnB,gBAAgB;iBAChB,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;iBACd,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACxC,0BAA0B;iBAC1B,EAAE,CAAC,CAAC,qBAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC,IAAI,qBAAS,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;qBAClE,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBAChC,CAAC;aACL,CAAC;aAED,MAAM,CAAC;iBACH,IAAI,wBAAsB;iBAC1B,KAAK,EAAE,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;iBACvB,UAAU,EAAE,IAAI,CAAC,UAAU;iBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;iBACzB,KAAK,EAAE,KAAK;iBACZ,GAAG,EAAE,IAAI,CAAC,KAAK;cAClB,CAAC;SACN,CAAC;SAEO,gBAAgB,CAAC,MAAc,EAAE,KAAa;aAClD,IAAI,GAAG,GAAG,EAAE,CAAC;aACb,IAAI,KAAK,GAAG,KAAK,CAAC;aAElB,EAAE,CAAC,CAAC,qBAAS,CAAC,YAAY,CAAC,MAAM,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBAC/C,KAAK,GAAG,IAAI,CAAC;iBACb,GAAG,GAAG,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;aAC1C,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,EAAE,IAAI,CAAC,KAAK,CAAC;aACjB,CAAC;aAED,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,EAAE,CAAC,CAAC,CAAC,qBAAS,CAAC,YAAY,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC9D,KAAK,CAAC;iBACV,CAAC;iBACD,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;aACrC,CAAC;aAED,EAAE,CAAC,CAAC,CAAC,KAAK,IAAI,GAAG,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;iBAC7B,gBAAgB;iBAChB,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,EAAE,CAAC,CAAC,qBAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,IAAI,qBAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClI,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,MAAM,CAAC;iBACH,IAAI,wBAAsB;iBAC1B,KAAK,EAAE,QAAQ,CAAC,GAAG,EAAE,CAAC,CAAC;iBACvB,KAAK,EAAE,KAAK;iBACZ,UAAU,EAAE,IAAI,CAAC,UAAU;iBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;iBACzB,KAAK,EAAE,KAAK;iBACZ,GAAG,EAAE,IAAI,CAAC,KAAK;cAClB,CAAC;SACN,CAAC;SAEO,sBAAsB;aAC1B,qDAAqD;aACrD,oCAAoC;aACpC,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,EAAE,CAAC,GAAG,IAAI,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;iBAChD,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,CAAC,CAAC,CAAC;iBAC1B,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;qBAC3B,MAAM,CAAC,KAAK,CAAC;iBACjB,CAAC;iBACD,EAAE,CAAC,CAAC,CAAC,qBAAS,CAAC,YAAY,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC5C,MAAM,CAAC,IAAI,CAAC;iBAChB,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC;SAChB,CAAC;SAEO,kBAAkB;aACtB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;aACzB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC5B,eAAM,CAAC,qBAAS,CAAC,cAAc,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,GAAG,CAAC,EAC7D,oEAAoE,CAAC,CAAC;aAE1E,IAAI,GAAG,GAAG,EAAE,CAAC;aACb,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;iBACb,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBAChC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAE7B,+BAA+B;iBAC/B,gCAAgC;iBAChC,wCAAwC;iBACxC,yCAAyC;iBACzC,EAAE,CAAC,CAAC,GAAG,KAAK,GAAG,CAAC,CAAC,CAAC;qBACd,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;yBAC3B,EAAE,IAAI,CAAC,KAAK,CAAC;yBACb,MAAM,CAAC,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,CAAC;qBACtC,CAAC;qBACD,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;yBAC3B,EAAE,IAAI,CAAC,KAAK,CAAC;yBACb,MAAM,CAAC,IAAI,CAAC,iBAAiB,CAAC,KAAK,CAAC,CAAC;qBACzC,CAAC;qBACD,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;yBAC3B,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;qBAC5C,CAAC;qBAED,EAAE,CAAC,CAAC,EAAE,IAAI,qBAAS,CAAC,YAAY,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;yBACjD,EAAE,CAAC,CAAC,IAAI,CAAC,sBAAsB,EAAE,CAAC,CAAC,CAAC;6BAChC,MAAM,CAAC,IAAI,CAAC,gBAAgB,CAAC,EAAE,EAAE,KAAK,CAAC,CAAC;yBAC5C,CAAC;qBACL,CAAC;iBACL,CAAC;iBAED,OAAO,qBAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;qBAClE,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBACrC,CAAC;iBACD,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACjC,CAAC;aAED,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;iBACb,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBACjC,OAAO,qBAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;qBAClE,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBACrC,CAAC;iBACD,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACjC,CAAC;aAED,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;iBAC3B,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBAEjC,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC7B,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,IAAI,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;qBAC3B,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBACrC,CAAC;iBACD,EAAE,CAAC,CAAC,qBAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC/D,OAAO,qBAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,EAAE,CAAC;yBAClE,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;qBACrC,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,IAAI,CAAC,oBAAoB,EAAE,CAAC;iBAChC,CAAC;aACL,CAAC;aAED,EAAE,CAAC,CAAC,qBAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;iBAClE,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,MAAM,CAAC;iBACH,IAAI,wBAAsB;iBAC1B,KAAK,EAAE,UAAU,CAAC,GAAG,CAAC;iBACtB,UAAU,EAAE,IAAI,CAAC,UAAU;iBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;iBACzB,KAAK,EAAE,KAAK;iBACZ,GAAG,EAAE,IAAI,CAAC,KAAK;cAClB,CAAC;SACN,CAAC;SAED,+DAA+D;SAEvD,iBAAiB;aACrB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;aACzB,IAAI,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC;aAC/B,eAAM,CAAC,CAAC,KAAK,KAAK,IAAI,IAAI,KAAK,KAAK,GAAG,CAAC,EACpC,yCAAyC,CAAC,CAAC;aAE/C,EAAE,IAAI,CAAC,KAAK,CAAC;aACb,IAAI,KAAK,GAAG,KAAK,CAAC;aAClB,IAAI,GAAG,GAAG,EAAE,CAAC;aAEb,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBAEnC,EAAE,CAAC,CAAC,EAAE,KAAK,KAAK,CAAC,CAAC,CAAC;qBACf,KAAK,GAAG,EAAE,CAAC;qBACX,KAAK,CAAC;iBACV,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;qBACrB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;qBAC/B,EAAE,CAAC,CAAC,CAAC,EAAE,IAAI,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;yBACvD,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;6BACT,KAAK,GAAG;iCACJ,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;qCAClC,EAAE,IAAI,CAAC,KAAK,CAAC;qCACb,GAAG,IAAI,IAAI,CAAC,0BAA0B,EAAE,CAAC;iCAC7C,CAAC;iCAAC,IAAI,CAAC,CAAC;qCACJ,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;qCAC7C,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC;yCACzB,IAAI,CAAC,oBAAoB,EAAE,CAAC;qCAChC,CAAC;qCACD,GAAG,IAAI,aAAa,CAAC;iCACzB,CAAC;iCACD,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;iCACzC,EAAE,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC;qCACrB,IAAI,CAAC,oBAAoB,CAAC,mBAAQ,CAAC,wBAAwB,CAAC,CAAC;iCACjE,CAAC;iCACD,GAAG,IAAI,SAAS,CAAC;iCACjB,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,GAAG,IAAI,IAAI,CAAC;iCACZ,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,GAAG,IAAI,IAAI,CAAC;iCACZ,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,GAAG,IAAI,IAAI,CAAC;iCACZ,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,GAAG,IAAI,IAAI,CAAC;iCACZ,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,GAAG,IAAI,IAAI,CAAC;iCACZ,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,GAAG,IAAI,MAAM,CAAC;iCACd,KAAK,CAAC;6BACV,KAAK,GAAG,CAAC;6BACT,KAAK,GAAG;iCACJ,GAAG,IAAI,EAAE,CAAC;iCACV,IAAI,CAAC,uBAAuB,EAAE,CAAC;iCAC/B,KAAK,CAAC;6BAEV;iCACI,EAAE,CAAC,CAAC,EAAE,IAAI,qBAAS,CAAC,YAAY,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qCACjD,MAAM,QAAQ,GAAG,IAAI,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC;qCAEzC,KAAK,GAAG,QAAQ,CAAC,KAAK,IAAI,KAAK,CAAC;qCAChC,GAAG,IAAI,MAAM,CAAC,YAAY,CAAC,QAAQ,CAAC,IAAI,CAAC,CAAC;iCAC9C,CAAC;iCAAC,IAAI,CAAC,CAAC;qCACJ,GAAG,IAAI,EAAE,CAAC;iCACd,CAAC;iCACD,KAAK,CAAC;yBACd,CAAC;qBACL,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,EAAE,IAAI,CAAC,UAAU,CAAC;yBAClB,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;6BAClD,EAAE,IAAI,CAAC,KAAK,CAAC;yBACjB,CAAC;yBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;qBAChC,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBACtD,KAAK,CAAC;iBACV,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,GAAG,IAAI,EAAE,CAAC;iBACd,CAAC;aACL,CAAC;aAED,EAAE,CAAC,CAAC,KAAK,KAAK,EAAE,CAAC,CAAC,CAAC;iBACf,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;iBACnB,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,MAAM,CAAC;iBACH,IAAI,uBAAqB;iBACzB,KAAK,EAAE,GAAG;iBACV,KAAK,EAAE,KAAK;iBACZ,UAAU,EAAE,IAAI,CAAC,UAAU;iBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;iBACzB,KAAK,EAAE,KAAK;iBACZ,GAAG,EAAE,IAAI,CAAC,KAAK;cAClB,CAAC;SACN,CAAC;SAED,0EAA0E;SAElE,YAAY;aAChB,IAAI,MAAM,GAAG,EAAE,CAAC;aAChB,IAAI,UAAU,GAAG,KAAK,CAAC;aACvB,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;aAEzB,MAAM,IAAI,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC;aAC1C,IAAI,IAAI,GAAG,KAAK,CAAC;aACjB,IAAI,SAAS,GAAG,CAAC,CAAC;aAElB,EAAE,IAAI,CAAC,KAAK,CAAC;aAEb,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBACnC,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;qBACb,SAAS,GAAG,CAAC,CAAC;qBACd,IAAI,GAAG,IAAI,CAAC;qBACZ,UAAU,GAAG,IAAI,CAAC;qBAClB,KAAK,CAAC;iBACV,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;qBACpB,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;yBAClC,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;yBAC3B,EAAE,IAAI,CAAC,KAAK,CAAC;yBACb,UAAU,GAAG,IAAI,CAAC;yBAClB,KAAK,CAAC;qBACV,CAAC;qBACD,MAAM,IAAI,EAAE,CAAC;iBACjB,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;qBACrB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;qBAC/B,EAAE,CAAC,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;yBAChD,MAAM,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;6BACT,KAAK,GAAG;iCACJ,MAAM,IAAI,IAAI,CAAC;iCACf,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,MAAM,IAAI,IAAI,CAAC;iCACf,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,MAAM,IAAI,IAAI,CAAC;iCACf,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;qCAClC,EAAE,IAAI,CAAC,KAAK,CAAC;qCACb,MAAM,IAAI,IAAI,CAAC,0BAA0B,EAAE,CAAC;iCAChD,CAAC;iCAAC,IAAI,CAAC,CAAC;qCACJ,MAAM,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;qCAC3B,MAAM,aAAa,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;qCAC7C,EAAE,CAAC,CAAC,aAAa,KAAK,IAAI,CAAC,CAAC,CAAC;yCACzB,MAAM,IAAI,aAAa,CAAC;qCAC5B,CAAC;qCAAC,IAAI,CAAC,CAAC;yCACJ,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;yCACrB,MAAM,IAAI,EAAE,CAAC;qCACjB,CAAC;iCACL,CAAC;iCACD,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,MAAM,SAAS,GAAG,IAAI,CAAC,aAAa,CAAC,EAAE,CAAC,CAAC;iCACzC,EAAE,CAAC,CAAC,SAAS,KAAK,IAAI,CAAC,CAAC,CAAC;qCACrB,IAAI,CAAC,oBAAoB,CAAC,mBAAQ,CAAC,wBAAwB,CAAC,CAAC;iCACjE,CAAC;iCACD,MAAM,IAAI,SAAS,CAAC;iCACpB,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,MAAM,IAAI,IAAI,CAAC;iCACf,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,MAAM,IAAI,IAAI,CAAC;iCACf,KAAK,CAAC;6BACV,KAAK,GAAG;iCACJ,MAAM,IAAI,IAAI,CAAC;iCACf,KAAK,CAAC;6BAEV;iCACI,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;qCACb,EAAE,CAAC,CAAC,qBAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;yCAC/D,6BAA6B;yCAC7B,IAAI,CAAC,oBAAoB,CAAC,mBAAQ,CAAC,oBAAoB,CAAC,CAAC;qCAC7D,CAAC;qCACD,MAAM,IAAI,IAAI,CAAC;iCACnB,CAAC;iCAAC,IAAI,CAAC,EAAE,CAAC,CAAC,qBAAS,CAAC,YAAY,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qCAClD,iBAAiB;qCACjB,IAAI,CAAC,oBAAoB,CAAC,mBAAQ,CAAC,oBAAoB,CAAC,CAAC;iCAC7D,CAAC;iCAAC,IAAI,CAAC,CAAC;qCACJ,MAAM,IAAI,EAAE,CAAC;iCACjB,CAAC;iCACD,KAAK,CAAC;yBACd,CAAC;qBACL,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,EAAE,IAAI,CAAC,UAAU,CAAC;yBAClB,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;6BAClD,EAAE,IAAI,CAAC,KAAK,CAAC;yBACjB,CAAC;yBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;qBAChC,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBACtD,EAAE,IAAI,CAAC,UAAU,CAAC;qBAClB,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC;yBAClD,EAAE,IAAI,CAAC,KAAK,CAAC;qBACjB,CAAC;qBACD,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,KAAK,CAAC;qBAC5B,MAAM,IAAI,IAAI,CAAC;iBACnB,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,MAAM,IAAI,EAAE,CAAC;iBACjB,CAAC;aACL,CAAC;aAED,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;iBACd,IAAI,CAAC,oBAAoB,EAAE,CAAC;aAChC,CAAC;aAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC,CAAC;iBACR,IAAI,CAAC,UAAU,CAAC,GAAG,EAAE,CAAC;aAC1B,CAAC;aAED,MAAM,CAAC;iBACH,IAAI,mBAAgB;iBACpB,KAAK,EAAE,IAAI,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,EAAE,IAAI,CAAC,KAAK,GAAG,SAAS,CAAC;iBAC3D,MAAM,EAAE,MAAM;iBACd,IAAI,EAAE,IAAI;iBACV,IAAI,EAAE,IAAI;iBACV,UAAU,EAAE,IAAI,CAAC,UAAU;iBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;iBACzB,KAAK,EAAE,KAAK;iBACZ,GAAG,EAAE,IAAI,CAAC,KAAK;cAClB,CAAC;SACN,CAAC;SAED,2EAA2E;SAEnE,UAAU,CAAC,OAAe,EAAE,KAAa;aAC7C,oEAAoE;aACpE,8DAA8D;aAC9D,iBAAiB;aACjB,oEAAoE;aACpE,gEAAgE;aAChE,2DAA2D;aAC3D,MAAM,gBAAgB,GAAG,QAAQ,CAAC;aAClC,IAAI,GAAG,GAAG,OAAO,CAAC;aAClB,MAAM,IAAI,GAAG,IAAI,CAAC;aAElB,EAAE,CAAC,CAAC,KAAK,CAAC,OAAO,CAAC,GAAG,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC;iBAC1B,GAAG,GAAG,GAAG;sBAKJ,OAAO,CAAC,4CAA4C,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE;qBAClE,MAAM,SAAS,GAAG,QAAQ,CAAC,EAAE,IAAI,EAAE,EAAE,EAAE,CAAC,CAAC;qBACzC,EAAE,CAAC,CAAC,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC;yBACvB,IAAI,CAAC,oBAAoB,CAAC,mBAAQ,CAAC,aAAa,CAAC,CAAC;qBACtD,CAAC;qBACD,EAAE,CAAC,CAAC,SAAS,IAAI,MAAM,CAAC,CAAC,CAAC;yBACtB,MAAM,CAAC,MAAM,CAAC,YAAY,CAAC,SAAS,CAAC,CAAC;qBAC1C,CAAC;qBACD,MAAM,CAAC,gBAAgB,CAAC;iBAC5B,CAAC,CAAC;sBAID,OAAO,CACR,iCAAiC,EACjC,gBAAgB,CACf,CAAC;aACV,CAAC;aAED,6CAA6C;aAC7C,IAAI,CAAC;iBACD,MAAM,CAAC,GAAG,CAAC,CAAC;aAChB,CAAC;aAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;iBACT,IAAI,CAAC,oBAAoB,CAAC,mBAAQ,CAAC,aAAa,CAAC,CAAC;aACtD,CAAC;aAED,oEAAoE;aACpE,sEAAsE;aACtE,QAAQ;aACR,IAAI,CAAC;iBACD,MAAM,CAAC,IAAI,MAAM,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aACtC,CAAC;aAAC,KAAK,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC;iBACjB,0BAA0B;iBAC1B,MAAM,CAAC,IAAI,CAAC;aAChB,CAAC;SACL,CAAC;SAEO,cAAc;aAClB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACjC,eAAM,CAAC,EAAE,KAAK,GAAG,EAAE,oDAAoD,CAAC,CAAC;aAEzE,IAAI,GAAG,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;aACpC,IAAI,WAAW,GAAG,KAAK,CAAC;aACxB,IAAI,UAAU,GAAG,KAAK,CAAC;aAEvB,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;iBAC/B,GAAG,IAAI,EAAE,CAAC;iBACV,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;qBACd,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,EAAE,CAAC,CAAC;qBAC/B,2EAA2E;qBAC3E,EAAE,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;yBAC/C,IAAI,CAAC,oBAAoB,CAAC,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;qBAC3D,CAAC;qBACD,GAAG,IAAI,EAAE,CAAC;iBACd,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBACtD,IAAI,CAAC,oBAAoB,CAAC,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;iBAC3D,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC;qBACrB,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;yBACb,WAAW,GAAG,KAAK,CAAC;qBACxB,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;yBACb,UAAU,GAAG,IAAI,CAAC;yBAClB,KAAK,CAAC;qBACV,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;yBACpB,WAAW,GAAG,IAAI,CAAC;qBACvB,CAAC;iBACL,CAAC;aACL,CAAC;aAED,EAAE,CAAC,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;iBACd,IAAI,CAAC,oBAAoB,CAAC,mBAAQ,CAAC,kBAAkB,CAAC,CAAC;aAC3D,CAAC;aAED,sCAAsC;aACtC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,EAAE,GAAG,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;SACzC,CAAC;SAEO,eAAe;aACnB,IAAI,GAAG,GAAG,EAAE,CAAC;aACb,IAAI,KAAK,GAAG,EAAE,CAAC;aACf,OAAO,CAAC,IAAI,CAAC,GAAG,EAAE,EAAE,CAAC;iBACjB,IAAI,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBACjC,EAAE,CAAC,CAAC,CAAC,qBAAS,CAAC,gBAAgB,CAAC,EAAE,CAAC,UAAU,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBAChD,KAAK,CAAC;iBACV,CAAC;iBAED,EAAE,IAAI,CAAC,KAAK,CAAC;iBACb,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;qBAC7B,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBAC7B,EAAE,CAAC,CAAC,EAAE,KAAK,GAAG,CAAC,CAAC,CAAC;yBACb,EAAE,IAAI,CAAC,KAAK,CAAC;yBACb,IAAI,OAAO,GAAG,IAAI,CAAC,KAAK,CAAC;yBACzB,MAAM,IAAI,GAAG,IAAI,CAAC,aAAa,CAAC,GAAG,CAAC,CAAC;yBACrC,EAAE,CAAC,CAAC,IAAI,KAAK,IAAI,CAAC,CAAC,CAAC;6BAChB,KAAK,IAAI,IAAI,CAAC;6BACd,GAAG,CAAC,CAAC,GAAG,IAAI,KAAK,EAAE,OAAO,GAAG,IAAI,CAAC,KAAK,EAAE,EAAE,OAAO,EAAE,CAAC;iCACjD,GAAG,IAAI,IAAI,CAAC,MAAM,CAAC,OAAO,CAAC,CAAC;6BAChC,CAAC;yBACL,CAAC;yBAAC,IAAI,CAAC,CAAC;6BACJ,IAAI,CAAC,KAAK,GAAG,OAAO,CAAC;6BACrB,KAAK,IAAI,GAAG,CAAC;6BACb,GAAG,IAAI,KAAK,CAAC;yBACjB,CAAC;yBACD,IAAI,CAAC,uBAAuB,EAAE,CAAC;qBACnC,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,GAAG,IAAI,IAAI,CAAC;yBACZ,IAAI,CAAC,uBAAuB,EAAE,CAAC;qBACnC,CAAC;iBACL,CAAC;iBAAC,IAAI,CAAC,CAAC;qBACJ,KAAK,IAAI,EAAE,CAAC;qBACZ,GAAG,IAAI,EAAE,CAAC;iBACd,CAAC;aACL,CAAC;aAED,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAEM,UAAU;aACb,MAAM,KAAK,GAAG,IAAI,CAAC,KAAK,CAAC;aAEzB,MAAM,OAAO,GAAG,IAAI,CAAC,cAAc,EAAE,CAAC;aACtC,MAAM,KAAK,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;aACrC,MAAM,KAAK,GAAG,IAAI,CAAC,UAAU,CAAC,OAAO,EAAE,KAAK,CAAC,CAAC;aAE9C,MAAM,CAAC;iBACH,IAAI,2BAAyB;iBAC7B,KAAK,EAAE,EAAE;iBACT,OAAO,EAAE,OAAO;iBAChB,KAAK,EAAE,KAAK;iBACZ,KAAK,EAAE,KAAK;iBACZ,UAAU,EAAE,IAAI,CAAC,UAAU;iBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;iBACzB,KAAK,EAAE,KAAK;iBACZ,GAAG,EAAE,IAAI,CAAC,KAAK;cAClB,CAAC;SACN,CAAC;SAEM,GAAG;aACN,EAAE,CAAC,CAAC,IAAI,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;iBACb,MAAM,CAAC;qBACH,IAAI,aAAW;qBACf,KAAK,EAAE,EAAE;qBACT,UAAU,EAAE,IAAI,CAAC,UAAU;qBAC3B,SAAS,EAAE,IAAI,CAAC,SAAS;qBACzB,KAAK,EAAE,IAAI,CAAC,KAAK;qBACjB,GAAG,EAAE,IAAI,CAAC,KAAK;kBAClB,CAAC;aACN,CAAC;aAED,MAAM,EAAE,GAAG,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aAE9C,EAAE,CAAC,CAAC,qBAAS,CAAC,iBAAiB,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;iBAClC,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;aACjC,CAAC;aAED,6BAA6B;aAC7B,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;iBAC5C,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;aACjC,CAAC;aAED,6EAA6E;aAC7E,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;iBAC7B,MAAM,CAAC,IAAI,CAAC,iBAAiB,EAAE,CAAC;aACpC,CAAC;aAED,wEAAwE;aACxE,+BAA+B;aAC/B,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,CAAC,CAAC,CAAC;iBACd,EAAE,CAAC,CAAC,qBAAS,CAAC,cAAc,CAAC,IAAI,CAAC,MAAM,CAAC,UAAU,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;qBACnE,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;iBACrC,CAAC;iBACD,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;aACjC,CAAC;aAED,EAAE,CAAC,CAAC,qBAAS,CAAC,cAAc,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC;iBAC/B,MAAM,CAAC,IAAI,CAAC,kBAAkB,EAAE,CAAC;aACrC,CAAC;aAED,4DAA4D;aAC5D,sDAAsD;aACtD,EAAE,CAAC,CAAC,EAAE,KAAK,IAAI,IAAI,CAAC,EAAE,KAAK,IAAI,IAAI,IAAI,CAAC,UAAU,CAAC,IAAI,CAAC,UAAU,CAAC,MAAM,GAAG,CAAC,CAAC,KAAK,IAAI,CAAC,CAAC,CAAC,CAAC;iBACvF,MAAM,CAAC,IAAI,CAAC,YAAY,EAAE,CAAC;aAC/B,CAAC;aAED,iDAAiD;aACjD,EAAE,CAAC,CAAC,EAAE,IAAI,MAAM,IAAI,EAAE,GAAG,MAAM,CAAC,CAAC,CAAC;iBAC9B,EAAE,CAAC,CAAC,qBAAS,CAAC,iBAAiB,CAAC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;qBAC5D,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;iBACjC,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,cAAc,EAAE,CAAC;SACjC,CAAC;MAEJ;KA/tCD,0BA+tCC;;;;;;;;;;;;;;;;;;;KCrxCD,4CAA4C;KAC/B,gBAAQ,GAAG;SACpB,kBAAkB,EAAE,kBAAkB;SACtC,cAAc,EAAE,4CAA4C;SAC5D,cAAc,EAAE,+CAA+C;SAC/D,sBAAsB,EAAE,uDAAuD;SAC/E,kBAAkB,EAAE,8CAA8C;SAClE,wBAAwB,EAAE,0CAA0C;SACpE,6BAA6B,EAAE,uCAAuC;SACtE,oBAAoB,EAAE,oBAAoB;SAC1C,mBAAmB,EAAE,oBAAoB;SACzC,gBAAgB,EAAE,sBAAsB;SACxC,oBAAoB,EAAE,uCAAuC;SAC7D,sBAAsB,EAAE,+DAA+D;SACvF,sBAAsB,EAAE,0DAA0D;SAClF,wBAAwB,EAAE,2DAA2D;SACrF,YAAY,EAAE,yBAAyB;SACvC,eAAe,EAAE,4BAA4B;SAC7C,wBAAwB,EAAE,kBAAkB;SAC5C,wBAAwB,EAAE,kBAAkB;SAC5C,4BAA4B,EAAE,6EAA6E;SAC3G,aAAa,EAAE,0BAA0B;SACzC,0BAA0B,EAAE,6CAA6C;SACzE,wBAAwB,EAAE,qCAAqC;SAC/D,sBAAsB,EAAE,sCAAsC;SAC9D,iBAAiB,EAAE,kCAAkC;SACrD,mBAAmB,EAAE,oCAAoC;SACzD,sBAAsB,EAAE,kBAAkB;SAC1C,aAAa,EAAE,4BAA4B;SAC3C,mBAAmB,EAAE,6CAA6C;SAClE,iBAAiB,EAAE,kBAAkB;SACrC,wBAAwB,EAAE,kDAAkD;SAC5E,iBAAiB,EAAE,6BAA6B;SAChD,wBAAwB,EAAE,kBAAkB;SAC5C,gBAAgB,EAAE,oCAAoC;SACtD,2BAA2B,EAAE,8CAA8C;SAC3E,yBAAyB,EAAE,kBAAkB;SAC7C,aAAa,EAAE,qCAAqC;SACpD,eAAe,EAAE,sDAAsD;SACvE,mBAAmB,EAAE,4DAA4D;SACjF,YAAY,EAAE,qDAAqD;SACnE,cAAc,EAAE,oFAAoF;SACpG,kBAAkB,EAAE,2DAA2D;SAC/E,mBAAmB,EAAE,+DAA+D;SACpF,gBAAgB,EAAE,mFAAmF;SACrG,eAAe,EAAE,kFAAkF;SACnG,cAAc,EAAE,mDAAmD;SACnE,kBAAkB,EAAE,gDAAgD;SACpE,eAAe,EAAE,6DAA6D;SAC9E,eAAe,EAAE,gEAAgE;SACjF,kBAAkB,EAAE,4CAA4C;SAChE,aAAa,EAAE,2DAA2D;SAC1E,oBAAoB,EAAE,qDAAqD;SAC3E,aAAa,EAAE,yBAAyB;SACxC,oBAAoB,EAAE,uBAAuB;SAC7C,gBAAgB,EAAE,mBAAmB;SACrC,kBAAkB,EAAE,0BAA0B;SAC9C,gBAAgB,EAAE,mBAAmB;SACrC,kBAAkB,EAAE,qBAAqB;SACzC,eAAe,EAAE,qBAAqB;SACtC,sBAAsB,EAAE,0BAA0B;SAClD,YAAY,EAAE,wBAAwB;SACtC,kBAAkB,EAAE,uCAAuC;MAC9D,CAAC;;;;;;;;;;;;;;;;;;;KClDS,iBAAS,GAAG,EAAE,CAAC;KAC1B,iBAAS,wBAAsB,GAAG,SAAS,CAAC;KAC5C,iBAAS,aAAW,GAAG,OAAO,CAAC;KAC/B,iBAAS,oBAAkB,GAAG,YAAY,CAAC;KAC3C,iBAAS,iBAAe,GAAG,SAAS,CAAC;KACrC,iBAAS,qBAAmB,GAAG,MAAM,CAAC;KACtC,iBAAS,wBAAsB,GAAG,SAAS,CAAC;KAC5C,iBAAS,oBAAkB,GAAG,YAAY,CAAC;KAC3C,iBAAS,uBAAqB,GAAG,QAAQ,CAAC;KAC1C,iBAAS,2BAAyB,GAAG,mBAAmB,CAAC;KACzD,iBAAS,mBAAgB,GAAG,UAAU,CAAC;;;;;;;;ACvBvC,2JAA0D;;;;;;;;;;;;KAE7C,qBAAa,GAAG;SACzB,IAAI,EAAE,QAAQ;SACd,GAAG,EAAE,QAAQ;SACb,IAAI,EAAE,QAAQ;SACd,EAAE,EAAE,QAAQ;SACZ,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,GAAG,EAAE,QAAQ;SACb,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,GAAG,EAAE,QAAQ;SACb,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,IAAI,EAAE,QAAQ;SACd,GAAG,EAAE,QAAQ;SACb,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,GAAG,EAAE,QAAQ;SACb,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,GAAG,EAAE,QAAQ;SACb,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,OAAO,EAAE,QAAQ;SACjB,IAAI,EAAE,QAAQ;SACd,GAAG,EAAE,QAAQ;SACb,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,EAAE,EAAE,QAAQ;SACZ,EAAE,EAAE,QAAQ;SACZ,EAAE,EAAE,QAAQ;SACZ,OAAO,EAAE,QAAQ;SACjB,EAAE,EAAE,QAAQ;SACZ,GAAG,EAAE,QAAQ;SACb,KAAK,EAAE,QAAQ;SACf,GAAG,EAAE,QAAQ;SACb,OAAO,EAAE,QAAQ;SACjB,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,OAAO,EAAE,QAAQ;SACjB,IAAI,EAAE,QAAQ;SACd,GAAG,EAAE,QAAQ;SACb,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,EAAE,EAAE,QAAQ;SACZ,EAAE,EAAE,QAAQ;SACZ,EAAE,EAAE,QAAQ;SACZ,OAAO,EAAE,QAAQ;SACjB,EAAE,EAAE,QAAQ;SACZ,GAAG,EAAE,QAAQ;SACb,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,GAAG,EAAE,QAAQ;SACb,OAAO,EAAE,QAAQ;SACjB,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,KAAK,EAAE,QAAQ;SACf,QAAQ,EAAE,QAAQ;SAClB,KAAK,EAAE,QAAQ;SACf,GAAG,EAAE,QAAQ;SACb,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,OAAO,EAAE,QAAQ;SACjB,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,EAAE,EAAE,QAAQ;SACZ,IAAI,EAAE,QAAQ;SACd,GAAG,EAAE,QAAQ;SACb,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,EAAE,EAAE,QAAQ;SACZ,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,MAAM,EAAE,QAAQ;SAChB,GAAG,EAAE,QAAQ;SACb,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,EAAE,EAAE,QAAQ;SACZ,KAAK,EAAE,QAAQ;SACf,EAAE,EAAE,QAAQ;SACZ,EAAE,EAAE,QAAQ;SACZ,GAAG,EAAE,QAAQ;SACb,GAAG,EAAE,QAAQ;SACb,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;SACd,KAAK,EAAE,QAAQ;SACf,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,MAAM,EAAE,QAAQ;SAChB,GAAG,EAAE,QAAQ;SACb,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,MAAM,EAAE,QAAQ;SAChB,KAAK,EAAE,QAAQ;SACf,IAAI,EAAE,QAAQ;SACd,IAAI,EAAE,QAAQ;MACjB,CAAC;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;KC/PF,mDAA+C;KAC/C,uCAAuE;KACvE,mCAA2C;KAe3C;SAKI;aACI,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;aACjB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;SACjC,CAAC;SAED,6DAA6D;SAC7D,wBAAwB,CAAC,CAAS;aAC9B,MAAM,CAAC,CAAC,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,QAAQ,EAAE,YAAY,EAAE,KAAK;iBACtD,QAAQ,EAAE,MAAM,EAAE,QAAQ,EAAE,OAAO,EAAE,MAAM;iBAC3C,uBAAuB;iBACvB,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,KAAK,EAAE,MAAM;iBAC9D,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG;iBACrB,yBAAyB;iBACzB,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG;iBACjE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,KAAK,EAAE,IAAI,EAAE,IAAI;iBAC3D,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,IAAI,EAAE,KAAK,CAAC,CAAC,OAAO,CAAC,CAAC,CAAC,IAAI,CAAC,CAAC;SACrD,CAAC;SAED,gFAAgF;SAChF,kDAAkD;SAClD,YAAY;aACR,MAAM,QAAQ,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC;aACrD,IAAI,KAAK,GAAG,CAAC,QAAQ,KAAK,IAAI,CAAC,CAAC;aAEhC,MAAM,CAAC,CAAC,QAAQ,CAAC,CAAC,CAAC;iBACf,KAAK,MAAM,CAAC;iBACZ,KAAK,GAAG;qBACJ,KAAK,GAAG,KAAK,CAAC;qBACd,KAAK,CAAC;iBAEV,KAAK,GAAG;qBACJ,MAAM,OAAO,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;qBAC5C,KAAK,GAAG,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,KAAK,OAAO,IAAI,OAAO,KAAK,KAAK,IAAI,OAAO,KAAK,MAAM,CAAC,CAAC;qBAC7F,KAAK,CAAC;iBAEV,KAAK,GAAG;qBACJ,sDAAsD;qBACtD,iCAAiC;qBACjC,KAAK,GAAG,IAAI,CAAC;qBACb,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;yBAC7C,4CAA4C;yBAC5C,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;yBAC1C,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;qBAClE,CAAC;qBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,UAAU,CAAC,CAAC,CAAC;yBACpD,2CAA2C;yBAC3C,MAAM,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,GAAG,CAAC,CAAC,CAAC;yBAC1C,KAAK,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC,wBAAwB,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,IAAI,CAAC;qBACjE,CAAC;qBACD,KAAK,CAAC;iBACV;qBACI,KAAK,CAAC;aACd,CAAC;aAED,MAAM,CAAC,KAAK,CAAC;SACjB,CAAC;SAED,IAAI,CAAC,KAAK;aACN,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,uBAAqB,IAAI,KAAK,CAAC,IAAI,oBAAkB,CAAC,CAAC,CAAC;iBAClE,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC;qBACtB,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;iBACpC,CAAC;iBAAC,IAAI,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,KAAK,KAAK,GAAG,CAAC,CAAC,CAAC;qBAC7B,IAAI,CAAC,KAAK,GAAG,IAAI,CAAC,MAAM,CAAC,MAAM,CAAC;iBACpC,CAAC;iBACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,CAAC;aAClC,CAAC;aAAC,IAAI,CAAC,CAAC;iBACJ,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;aAC3B,CAAC;SACL,CAAC;MAEJ;KAWD;SAQI,YAAY,IAAY,EAAE,MAAc;aACpC,IAAI,CAAC,YAAY,GAAG,IAAI,4BAAY,EAAE,CAAC;aACvC,IAAI,CAAC,YAAY,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,MAAM,CAAC,QAAQ,KAAK,SAAS,IAAI,MAAM,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;aAExG,IAAI,CAAC,OAAO,GAAG,IAAI,iBAAO,CAAC,IAAI,EAAE,IAAI,CAAC,YAAY,CAAC,CAAC;aACpD,IAAI,CAAC,OAAO,CAAC,YAAY,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,MAAM,CAAC,OAAO,KAAK,SAAS,IAAI,MAAM,CAAC,OAAO,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;aAErG,IAAI,CAAC,UAAU,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,MAAM,CAAC,KAAK,KAAK,SAAS,IAAI,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;aACvF,IAAI,CAAC,QAAQ,GAAG,MAAM,CAAC,CAAC,CAAC,CAAC,OAAO,MAAM,CAAC,GAAG,KAAK,SAAS,IAAI,MAAM,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,KAAK,CAAC;aACjF,IAAI,CAAC,MAAM,GAAG,EAAE,CAAC;aACjB,IAAI,CAAC,MAAM,GAAG,IAAI,MAAM,EAAE,CAAC;SAC/B,CAAC;SAED,MAAM;aACF,MAAM,CAAC,IAAI,CAAC,YAAY,CAAC,MAAM,CAAC;SACpC,CAAC;SAED,YAAY;aACR,EAAE,CAAC,CAAC,IAAI,CAAC,MAAM,CAAC,MAAM,KAAK,CAAC,CAAC,CAAC,CAAC;iBAE3B,MAAM,QAAQ,GAAc,IAAI,CAAC,OAAO,CAAC,YAAY,EAAE,CAAC;iBACxD,EAAE,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,CAAC,CAAC;qBAC5B,GAAG,CAAC,CAAC,IAAI,CAAC,GAAG,CAAC,EAAE,CAAC,GAAG,QAAQ,CAAC,MAAM,EAAE,EAAE,CAAC,EAAE,CAAC;yBACvC,MAAM,CAAC,GAAY,QAAQ,CAAC,CAAC,CAAC,CAAC;yBAC/B,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC;yBAChE,MAAM,OAAO,GAAgB;6BACzB,IAAI,EAAE,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,cAAc,CAAC,CAAC,CAAC,aAAa;6BAClD,KAAK,EAAE,KAAK;0BACf,CAAC;yBACF,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;6BAClB,OAAO,CAAC,KAAK,GAAG,CAAC,CAAC,KAAK,CAAC;yBAC5B,CAAC;yBACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;6BAChB,OAAO,CAAC,GAAG,GAAG,CAAC,CAAC,GAAG,CAAC;yBACxB,CAAC;yBACD,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,CAAC;qBAC9B,CAAC;iBACL,CAAC;iBAED,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC,CAAC,CAAC;qBACtB,IAAI,GAAG,CAAC;qBAER,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;yBAChB,GAAG,GAAG;6BACF,KAAK,EAAE;iCACH,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;iCAC7B,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;8BACtD;6BACD,GAAG,EAAE,EAAE;0BACV,CAAC;qBACN,CAAC;qBAED,MAAM,UAAU,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,OAAO,CAAC,KAAK,CAAC,KAAK,GAAG,CAAC,IAAI,IAAI,CAAC,MAAM,CAAC,YAAY,EAAE,CAAC;qBACnG,IAAI,KAAe,CAAC;qBACpB,EAAE,CAAC,CAAC,UAAU,CAAC,CAAC,CAAC;yBACb,MAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE,CAAC;yBACvC,IAAI,CAAC;6BACD,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE,CAAC;yBACtC,CAAC;yBAAC,KAAK,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;6BACT,IAAI,CAAC,OAAO,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC;6BACjC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;yBAC/B,CAAC;qBACL,CAAC;qBAAC,IAAI,CAAC,CAAC;yBACJ,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,GAAG,EAAE,CAAC;qBAC/B,CAAC;qBAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;qBACxB,MAAM,KAAK,GAAgB;yBACvB,IAAI,EAAE,iBAAS,CAAC,KAAK,CAAC,IAAI,CAAC;yBAC3B,KAAK,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,KAAK,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC;sBAC3D,CAAC;qBACF,EAAE,CAAC,CAAC,IAAI,CAAC,UAAU,CAAC,CAAC,CAAC;yBAClB,KAAK,CAAC,KAAK,GAAG,CAAC,KAAK,CAAC,KAAK,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;qBAC3C,CAAC;qBACD,EAAE,CAAC,CAAC,IAAI,CAAC,QAAQ,CAAC,CAAC,CAAC;yBAChB,GAAG,CAAC,GAAG,GAAG;6BACN,IAAI,EAAE,IAAI,CAAC,OAAO,CAAC,UAAU;6BAC7B,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS;0BACtD,CAAC;yBACF,KAAK,CAAC,GAAG,GAAG,GAAG,CAAC;qBACpB,CAAC;qBACD,EAAE,CAAC,CAAC,KAAK,CAAC,IAAI,8BAA4B,CAAC,CAAC,CAAC;yBACzC,MAAM,OAAO,GAAG,KAAK,CAAC,OAAiB,CAAC;yBACxC,MAAM,KAAK,GAAG,KAAK,CAAC,KAAe,CAAC;yBACpC,KAAK,CAAC,KAAK,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,CAAC;qBACrC,CAAC;qBAED,IAAI,CAAC,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;iBAC5B,CAAC;aACL,CAAC;aAED,MAAM,CAAC,IAAI,CAAC,MAAM,CAAC,KAAK,EAAE,CAAC;SAC/B,CAAC;MAEJ;KAtGD,8BAsGC","file":"esprima.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine([], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"esprima\"] = factory();\n\telse\n\t\troot[\"esprima\"] = factory();\n})(this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3cab053879d30ffcdd2c","/*\r\n  Copyright JS Foundation and other contributors, https://js.foundation/\r\n\r\n  Redistribution and use in source and binary forms, with or without\r\n  modification, are permitted provided that the following conditions are met:\r\n\r\n    * Redistributions of source code must retain the above copyright\r\n      notice, this list of conditions and the following disclaimer.\r\n    * Redistributions in binary form must reproduce the above copyright\r\n      notice, this list of conditions and the following disclaimer in the\r\n      documentation and/or other materials provided with the distribution.\r\n\r\n  THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\"\r\n  AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE\r\n  IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE\r\n  ARE DISCLAIMED. IN NO EVENT SHALL <COPYRIGHT HOLDER> BE LIABLE FOR ANY\r\n  DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\r\n  (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\r\n  LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND\r\n  ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\r\n  (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF\r\n  THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.\r\n*/\r\n\r\nimport { CommentHandler } from './comment-handler';\r\nimport { JSXParser } from './jsx-parser';\r\nimport { Parser } from './parser';\r\nimport { Tokenizer } from './tokenizer';\r\n\r\nexport function parse(code: string, options, delegate) {\r\n    let commentHandler: CommentHandler | null = null;\r\n    const proxyDelegate = (node, metadata) => {\r\n        if (delegate) {\r\n            delegate(node, metadata);\r\n        }\r\n        if (commentHandler) {\r\n            commentHandler.visit(node, metadata);\r\n        }\r\n    };\r\n\r\n    let parserDelegate = (typeof delegate === 'function') ? proxyDelegate : null;\r\n    let collectComment = false;\r\n    if (options) {\r\n        collectComment = (typeof options.comment === 'boolean' && options.comment);\r\n        const attachComment = (typeof options.attachComment === 'boolean' && options.attachComment);\r\n        if (collectComment || attachComment) {\r\n            commentHandler = new CommentHandler();\r\n            commentHandler.attach = attachComment;\r\n            options.comment = true;\r\n            parserDelegate = proxyDelegate;\r\n        }\r\n    }\r\n\r\n    let isModule = false;\r\n    if (options && typeof options.sourceType === 'string') {\r\n        isModule = (options.sourceType === 'module');\r\n    }\r\n\r\n    let parser: Parser;\r\n    if (options && typeof options.jsx === 'boolean' && options.jsx) {\r\n        parser = new JSXParser(code, options, parserDelegate);\r\n    } else {\r\n        parser = new Parser(code, options, parserDelegate);\r\n    }\r\n\r\n    const program = isModule ? parser.parseModule() : parser.parseScript();\r\n    const ast = program as any;\r\n\r\n    if (collectComment && commentHandler) {\r\n        ast.comments = commentHandler.comments;\r\n    }\r\n    if (parser.config.tokens) {\r\n        ast.tokens = parser.tokens;\r\n    }\r\n    if (parser.config.tolerant) {\r\n        ast.errors = parser.errorHandler.errors;\r\n    }\r\n\r\n    return ast;\r\n}\r\n\r\nexport function parseModule(code: string, options, delegate) {\r\n    const parsingOptions = options || {};\r\n    parsingOptions.sourceType = 'module';\r\n    return parse(code, parsingOptions, delegate);\r\n}\r\n\r\nexport function parseScript(code: string, options, delegate) {\r\n    const parsingOptions = options || {};\r\n    parsingOptions.sourceType = 'script';\r\n    return parse(code, parsingOptions, delegate);\r\n}\r\n\r\nexport function tokenize(code: string, options, delegate) {\r\n    const tokenizer = new Tokenizer(code, options);\r\n\r\n    let tokens;\r\n    tokens = [];\r\n\r\n    try {\r\n        while (true) {\r\n            let token = tokenizer.getNextToken();\r\n            if (!token) {\r\n                break;\r\n            }\r\n            if (delegate) {\r\n                token = delegate(token);\r\n            }\r\n            tokens.push(token);\r\n        }\r\n    } catch (e) {\r\n        tokenizer.errorHandler.tolerate(e);\r\n    }\r\n\r\n    if (tokenizer.errorHandler.tolerant) {\r\n        tokens.errors = tokenizer.errors();\r\n    }\r\n\r\n    return tokens;\r\n}\r\n\r\nexport { Syntax } from './syntax';\r\n\r\n// Sync with *.json manifests.\r\nexport const version = '4.0.0-dev';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/esprima.ts","var map = {\n\t\"./assert\": 2,\n\t\"./assert.d\": 3,\n\t\"./character\": 4,\n\t\"./character.d\": 5,\n\t\"./comment-handler\": 6,\n\t\"./error-handler\": 8,\n\t\"./esprima.d\": 9,\n\t\"./jsx-nodes\": 10,\n\t\"./jsx-nodes.d\": 12,\n\t\"./jsx-parser\": 13,\n\t\"./jsx-syntax\": 11,\n\t\"./jsx-syntax.d\": 20,\n\t\"./messages\": 17,\n\t\"./messages.d\": 21,\n\t\"./nodes\": 14,\n\t\"./parser\": 15,\n\t\"./scanner\": 16,\n\t\"./syntax\": 7,\n\t\"./syntax.d\": 22,\n\t\"./token\": 18,\n\t\"./token.d\": 23,\n\t\"./tokenizer\": 24,\n\t\"./xhtml-entities\": 19,\n\t\"./xhtml-entities.d\": 25\n};\nfunction webpackContext(req) {\n\treturn __webpack_require__(webpackContextResolve(req));\n};\nfunction webpackContextResolve(req) {\n\treturn map[req] || (function() { throw new Error(\"Cannot find module '\" + req + \"'.\") }());\n};\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 1;\n\n\n\n//////////////////\n// WEBPACK FOOTER\n// ./src ^\\.\\/.*$\n// module id = 1\n// module chunks = 0","// Ensure the condition is true, otherwise throw an error.\r\n// This is only to have a better contract semantic, i.e. another safety net\r\n// to catch a logic error. The condition shall be fulfilled in normal case.\r\n// Do NOT use this to enforce a certain condition on any user input.\r\n\r\nexport function assert(condition: boolean, message: string): void {\r\n    /* istanbul ignore if */\r\n    if (!condition) {\r\n        throw new Error('ASSERT: ' + message);\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/assert.ts","// See also tools/generate-unicode-regex.js.\r\nconst Regex = {\r\n    // Unicode v8.0.0 NonAsciiIdentifierStart:\r\n    NonAsciiIdentifierStart: /[\\xAA\\xB5\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0370-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386\\u0388-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0620-\\u064A\\u066E\\u066F\\u0671-\\u06D3\\u06D5\\u06E5\\u06E6\\u06EE\\u06EF\\u06FA-\\u06FC\\u06FF\\u0710\\u0712-\\u072F\\u074D-\\u07A5\\u07B1\\u07CA-\\u07EA\\u07F4\\u07F5\\u07FA\\u0800-\\u0815\\u081A\\u0824\\u0828\\u0840-\\u0858\\u08A0-\\u08B4\\u0904-\\u0939\\u093D\\u0950\\u0958-\\u0961\\u0971-\\u0980\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BD\\u09CE\\u09DC\\u09DD\\u09DF-\\u09E1\\u09F0\\u09F1\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A59-\\u0A5C\\u0A5E\\u0A72-\\u0A74\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABD\\u0AD0\\u0AE0\\u0AE1\\u0AF9\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3D\\u0B5C\\u0B5D\\u0B5F-\\u0B61\\u0B71\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BD0\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D\\u0C58-\\u0C5A\\u0C60\\u0C61\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBD\\u0CDE\\u0CE0\\u0CE1\\u0CF1\\u0CF2\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D\\u0D4E\\u0D5F-\\u0D61\\u0D7A-\\u0D7F\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0E01-\\u0E30\\u0E32\\u0E33\\u0E40-\\u0E46\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB0\\u0EB2\\u0EB3\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EDC-\\u0EDF\\u0F00\\u0F40-\\u0F47\\u0F49-\\u0F6C\\u0F88-\\u0F8C\\u1000-\\u102A\\u103F\\u1050-\\u1055\\u105A-\\u105D\\u1061\\u1065\\u1066\\u106E-\\u1070\\u1075-\\u1081\\u108E\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1711\\u1720-\\u1731\\u1740-\\u1751\\u1760-\\u176C\\u176E-\\u1770\\u1780-\\u17B3\\u17D7\\u17DC\\u1820-\\u1877\\u1880-\\u18A8\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1950-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u1A00-\\u1A16\\u1A20-\\u1A54\\u1AA7\\u1B05-\\u1B33\\u1B45-\\u1B4B\\u1B83-\\u1BA0\\u1BAE\\u1BAF\\u1BBA-\\u1BE5\\u1C00-\\u1C23\\u1C4D-\\u1C4F\\u1C5A-\\u1C7D\\u1CE9-\\u1CEC\\u1CEE-\\u1CF1\\u1CF5\\u1CF6\\u1D00-\\u1DBF\\u1E00-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u2071\\u207F\\u2090-\\u209C\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CEE\\u2CF2\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D80-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u3005-\\u3007\\u3021-\\u3029\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u309B-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA61F\\uA62A\\uA62B\\uA640-\\uA66E\\uA67F-\\uA69D\\uA6A0-\\uA6EF\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA801\\uA803-\\uA805\\uA807-\\uA80A\\uA80C-\\uA822\\uA840-\\uA873\\uA882-\\uA8B3\\uA8F2-\\uA8F7\\uA8FB\\uA8FD\\uA90A-\\uA925\\uA930-\\uA946\\uA960-\\uA97C\\uA984-\\uA9B2\\uA9CF\\uA9E0-\\uA9E4\\uA9E6-\\uA9EF\\uA9FA-\\uA9FE\\uAA00-\\uAA28\\uAA40-\\uAA42\\uAA44-\\uAA4B\\uAA60-\\uAA76\\uAA7A\\uAA7E-\\uAAAF\\uAAB1\\uAAB5\\uAAB6\\uAAB9-\\uAABD\\uAAC0\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEA\\uAAF2-\\uAAF4\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABE2\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D\\uFB1F-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF21-\\uFF3A\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF75\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00\\uDE10-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE4\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC03-\\uDC37\\uDC83-\\uDCAF\\uDCD0-\\uDCE8\\uDD03-\\uDD26\\uDD50-\\uDD72\\uDD76\\uDD83-\\uDDB2\\uDDC1-\\uDDC4\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE2B\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEDE\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3D\\uDF50\\uDF5D-\\uDF61]|\\uD805[\\uDC80-\\uDCAF\\uDCC4\\uDCC5\\uDCC7\\uDD80-\\uDDAE\\uDDD8-\\uDDDB\\uDE00-\\uDE2F\\uDE44\\uDE80-\\uDEAA\\uDF00-\\uDF19]|\\uD806[\\uDCA0-\\uDCDF\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDED0-\\uDEED\\uDF00-\\uDF2F\\uDF40-\\uDF43\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50\\uDF93-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB]|\\uD83A[\\uDC00-\\uDCC4]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]/,\r\n\r\n    // Unicode v8.0.0 NonAsciiIdentifierPart:\r\n    NonAsciiIdentifierPart: /[\\xAA\\xB5\\xB7\\xBA\\xC0-\\xD6\\xD8-\\xF6\\xF8-\\u02C1\\u02C6-\\u02D1\\u02E0-\\u02E4\\u02EC\\u02EE\\u0300-\\u0374\\u0376\\u0377\\u037A-\\u037D\\u037F\\u0386-\\u038A\\u038C\\u038E-\\u03A1\\u03A3-\\u03F5\\u03F7-\\u0481\\u0483-\\u0487\\u048A-\\u052F\\u0531-\\u0556\\u0559\\u0561-\\u0587\\u0591-\\u05BD\\u05BF\\u05C1\\u05C2\\u05C4\\u05C5\\u05C7\\u05D0-\\u05EA\\u05F0-\\u05F2\\u0610-\\u061A\\u0620-\\u0669\\u066E-\\u06D3\\u06D5-\\u06DC\\u06DF-\\u06E8\\u06EA-\\u06FC\\u06FF\\u0710-\\u074A\\u074D-\\u07B1\\u07C0-\\u07F5\\u07FA\\u0800-\\u082D\\u0840-\\u085B\\u08A0-\\u08B4\\u08E3-\\u0963\\u0966-\\u096F\\u0971-\\u0983\\u0985-\\u098C\\u098F\\u0990\\u0993-\\u09A8\\u09AA-\\u09B0\\u09B2\\u09B6-\\u09B9\\u09BC-\\u09C4\\u09C7\\u09C8\\u09CB-\\u09CE\\u09D7\\u09DC\\u09DD\\u09DF-\\u09E3\\u09E6-\\u09F1\\u0A01-\\u0A03\\u0A05-\\u0A0A\\u0A0F\\u0A10\\u0A13-\\u0A28\\u0A2A-\\u0A30\\u0A32\\u0A33\\u0A35\\u0A36\\u0A38\\u0A39\\u0A3C\\u0A3E-\\u0A42\\u0A47\\u0A48\\u0A4B-\\u0A4D\\u0A51\\u0A59-\\u0A5C\\u0A5E\\u0A66-\\u0A75\\u0A81-\\u0A83\\u0A85-\\u0A8D\\u0A8F-\\u0A91\\u0A93-\\u0AA8\\u0AAA-\\u0AB0\\u0AB2\\u0AB3\\u0AB5-\\u0AB9\\u0ABC-\\u0AC5\\u0AC7-\\u0AC9\\u0ACB-\\u0ACD\\u0AD0\\u0AE0-\\u0AE3\\u0AE6-\\u0AEF\\u0AF9\\u0B01-\\u0B03\\u0B05-\\u0B0C\\u0B0F\\u0B10\\u0B13-\\u0B28\\u0B2A-\\u0B30\\u0B32\\u0B33\\u0B35-\\u0B39\\u0B3C-\\u0B44\\u0B47\\u0B48\\u0B4B-\\u0B4D\\u0B56\\u0B57\\u0B5C\\u0B5D\\u0B5F-\\u0B63\\u0B66-\\u0B6F\\u0B71\\u0B82\\u0B83\\u0B85-\\u0B8A\\u0B8E-\\u0B90\\u0B92-\\u0B95\\u0B99\\u0B9A\\u0B9C\\u0B9E\\u0B9F\\u0BA3\\u0BA4\\u0BA8-\\u0BAA\\u0BAE-\\u0BB9\\u0BBE-\\u0BC2\\u0BC6-\\u0BC8\\u0BCA-\\u0BCD\\u0BD0\\u0BD7\\u0BE6-\\u0BEF\\u0C00-\\u0C03\\u0C05-\\u0C0C\\u0C0E-\\u0C10\\u0C12-\\u0C28\\u0C2A-\\u0C39\\u0C3D-\\u0C44\\u0C46-\\u0C48\\u0C4A-\\u0C4D\\u0C55\\u0C56\\u0C58-\\u0C5A\\u0C60-\\u0C63\\u0C66-\\u0C6F\\u0C81-\\u0C83\\u0C85-\\u0C8C\\u0C8E-\\u0C90\\u0C92-\\u0CA8\\u0CAA-\\u0CB3\\u0CB5-\\u0CB9\\u0CBC-\\u0CC4\\u0CC6-\\u0CC8\\u0CCA-\\u0CCD\\u0CD5\\u0CD6\\u0CDE\\u0CE0-\\u0CE3\\u0CE6-\\u0CEF\\u0CF1\\u0CF2\\u0D01-\\u0D03\\u0D05-\\u0D0C\\u0D0E-\\u0D10\\u0D12-\\u0D3A\\u0D3D-\\u0D44\\u0D46-\\u0D48\\u0D4A-\\u0D4E\\u0D57\\u0D5F-\\u0D63\\u0D66-\\u0D6F\\u0D7A-\\u0D7F\\u0D82\\u0D83\\u0D85-\\u0D96\\u0D9A-\\u0DB1\\u0DB3-\\u0DBB\\u0DBD\\u0DC0-\\u0DC6\\u0DCA\\u0DCF-\\u0DD4\\u0DD6\\u0DD8-\\u0DDF\\u0DE6-\\u0DEF\\u0DF2\\u0DF3\\u0E01-\\u0E3A\\u0E40-\\u0E4E\\u0E50-\\u0E59\\u0E81\\u0E82\\u0E84\\u0E87\\u0E88\\u0E8A\\u0E8D\\u0E94-\\u0E97\\u0E99-\\u0E9F\\u0EA1-\\u0EA3\\u0EA5\\u0EA7\\u0EAA\\u0EAB\\u0EAD-\\u0EB9\\u0EBB-\\u0EBD\\u0EC0-\\u0EC4\\u0EC6\\u0EC8-\\u0ECD\\u0ED0-\\u0ED9\\u0EDC-\\u0EDF\\u0F00\\u0F18\\u0F19\\u0F20-\\u0F29\\u0F35\\u0F37\\u0F39\\u0F3E-\\u0F47\\u0F49-\\u0F6C\\u0F71-\\u0F84\\u0F86-\\u0F97\\u0F99-\\u0FBC\\u0FC6\\u1000-\\u1049\\u1050-\\u109D\\u10A0-\\u10C5\\u10C7\\u10CD\\u10D0-\\u10FA\\u10FC-\\u1248\\u124A-\\u124D\\u1250-\\u1256\\u1258\\u125A-\\u125D\\u1260-\\u1288\\u128A-\\u128D\\u1290-\\u12B0\\u12B2-\\u12B5\\u12B8-\\u12BE\\u12C0\\u12C2-\\u12C5\\u12C8-\\u12D6\\u12D8-\\u1310\\u1312-\\u1315\\u1318-\\u135A\\u135D-\\u135F\\u1369-\\u1371\\u1380-\\u138F\\u13A0-\\u13F5\\u13F8-\\u13FD\\u1401-\\u166C\\u166F-\\u167F\\u1681-\\u169A\\u16A0-\\u16EA\\u16EE-\\u16F8\\u1700-\\u170C\\u170E-\\u1714\\u1720-\\u1734\\u1740-\\u1753\\u1760-\\u176C\\u176E-\\u1770\\u1772\\u1773\\u1780-\\u17D3\\u17D7\\u17DC\\u17DD\\u17E0-\\u17E9\\u180B-\\u180D\\u1810-\\u1819\\u1820-\\u1877\\u1880-\\u18AA\\u18B0-\\u18F5\\u1900-\\u191E\\u1920-\\u192B\\u1930-\\u193B\\u1946-\\u196D\\u1970-\\u1974\\u1980-\\u19AB\\u19B0-\\u19C9\\u19D0-\\u19DA\\u1A00-\\u1A1B\\u1A20-\\u1A5E\\u1A60-\\u1A7C\\u1A7F-\\u1A89\\u1A90-\\u1A99\\u1AA7\\u1AB0-\\u1ABD\\u1B00-\\u1B4B\\u1B50-\\u1B59\\u1B6B-\\u1B73\\u1B80-\\u1BF3\\u1C00-\\u1C37\\u1C40-\\u1C49\\u1C4D-\\u1C7D\\u1CD0-\\u1CD2\\u1CD4-\\u1CF6\\u1CF8\\u1CF9\\u1D00-\\u1DF5\\u1DFC-\\u1F15\\u1F18-\\u1F1D\\u1F20-\\u1F45\\u1F48-\\u1F4D\\u1F50-\\u1F57\\u1F59\\u1F5B\\u1F5D\\u1F5F-\\u1F7D\\u1F80-\\u1FB4\\u1FB6-\\u1FBC\\u1FBE\\u1FC2-\\u1FC4\\u1FC6-\\u1FCC\\u1FD0-\\u1FD3\\u1FD6-\\u1FDB\\u1FE0-\\u1FEC\\u1FF2-\\u1FF4\\u1FF6-\\u1FFC\\u200C\\u200D\\u203F\\u2040\\u2054\\u2071\\u207F\\u2090-\\u209C\\u20D0-\\u20DC\\u20E1\\u20E5-\\u20F0\\u2102\\u2107\\u210A-\\u2113\\u2115\\u2118-\\u211D\\u2124\\u2126\\u2128\\u212A-\\u2139\\u213C-\\u213F\\u2145-\\u2149\\u214E\\u2160-\\u2188\\u2C00-\\u2C2E\\u2C30-\\u2C5E\\u2C60-\\u2CE4\\u2CEB-\\u2CF3\\u2D00-\\u2D25\\u2D27\\u2D2D\\u2D30-\\u2D67\\u2D6F\\u2D7F-\\u2D96\\u2DA0-\\u2DA6\\u2DA8-\\u2DAE\\u2DB0-\\u2DB6\\u2DB8-\\u2DBE\\u2DC0-\\u2DC6\\u2DC8-\\u2DCE\\u2DD0-\\u2DD6\\u2DD8-\\u2DDE\\u2DE0-\\u2DFF\\u3005-\\u3007\\u3021-\\u302F\\u3031-\\u3035\\u3038-\\u303C\\u3041-\\u3096\\u3099-\\u309F\\u30A1-\\u30FA\\u30FC-\\u30FF\\u3105-\\u312D\\u3131-\\u318E\\u31A0-\\u31BA\\u31F0-\\u31FF\\u3400-\\u4DB5\\u4E00-\\u9FD5\\uA000-\\uA48C\\uA4D0-\\uA4FD\\uA500-\\uA60C\\uA610-\\uA62B\\uA640-\\uA66F\\uA674-\\uA67D\\uA67F-\\uA6F1\\uA717-\\uA71F\\uA722-\\uA788\\uA78B-\\uA7AD\\uA7B0-\\uA7B7\\uA7F7-\\uA827\\uA840-\\uA873\\uA880-\\uA8C4\\uA8D0-\\uA8D9\\uA8E0-\\uA8F7\\uA8FB\\uA8FD\\uA900-\\uA92D\\uA930-\\uA953\\uA960-\\uA97C\\uA980-\\uA9C0\\uA9CF-\\uA9D9\\uA9E0-\\uA9FE\\uAA00-\\uAA36\\uAA40-\\uAA4D\\uAA50-\\uAA59\\uAA60-\\uAA76\\uAA7A-\\uAAC2\\uAADB-\\uAADD\\uAAE0-\\uAAEF\\uAAF2-\\uAAF6\\uAB01-\\uAB06\\uAB09-\\uAB0E\\uAB11-\\uAB16\\uAB20-\\uAB26\\uAB28-\\uAB2E\\uAB30-\\uAB5A\\uAB5C-\\uAB65\\uAB70-\\uABEA\\uABEC\\uABED\\uABF0-\\uABF9\\uAC00-\\uD7A3\\uD7B0-\\uD7C6\\uD7CB-\\uD7FB\\uF900-\\uFA6D\\uFA70-\\uFAD9\\uFB00-\\uFB06\\uFB13-\\uFB17\\uFB1D-\\uFB28\\uFB2A-\\uFB36\\uFB38-\\uFB3C\\uFB3E\\uFB40\\uFB41\\uFB43\\uFB44\\uFB46-\\uFBB1\\uFBD3-\\uFD3D\\uFD50-\\uFD8F\\uFD92-\\uFDC7\\uFDF0-\\uFDFB\\uFE00-\\uFE0F\\uFE20-\\uFE2F\\uFE33\\uFE34\\uFE4D-\\uFE4F\\uFE70-\\uFE74\\uFE76-\\uFEFC\\uFF10-\\uFF19\\uFF21-\\uFF3A\\uFF3F\\uFF41-\\uFF5A\\uFF66-\\uFFBE\\uFFC2-\\uFFC7\\uFFCA-\\uFFCF\\uFFD2-\\uFFD7\\uFFDA-\\uFFDC]|\\uD800[\\uDC00-\\uDC0B\\uDC0D-\\uDC26\\uDC28-\\uDC3A\\uDC3C\\uDC3D\\uDC3F-\\uDC4D\\uDC50-\\uDC5D\\uDC80-\\uDCFA\\uDD40-\\uDD74\\uDDFD\\uDE80-\\uDE9C\\uDEA0-\\uDED0\\uDEE0\\uDF00-\\uDF1F\\uDF30-\\uDF4A\\uDF50-\\uDF7A\\uDF80-\\uDF9D\\uDFA0-\\uDFC3\\uDFC8-\\uDFCF\\uDFD1-\\uDFD5]|\\uD801[\\uDC00-\\uDC9D\\uDCA0-\\uDCA9\\uDD00-\\uDD27\\uDD30-\\uDD63\\uDE00-\\uDF36\\uDF40-\\uDF55\\uDF60-\\uDF67]|\\uD802[\\uDC00-\\uDC05\\uDC08\\uDC0A-\\uDC35\\uDC37\\uDC38\\uDC3C\\uDC3F-\\uDC55\\uDC60-\\uDC76\\uDC80-\\uDC9E\\uDCE0-\\uDCF2\\uDCF4\\uDCF5\\uDD00-\\uDD15\\uDD20-\\uDD39\\uDD80-\\uDDB7\\uDDBE\\uDDBF\\uDE00-\\uDE03\\uDE05\\uDE06\\uDE0C-\\uDE13\\uDE15-\\uDE17\\uDE19-\\uDE33\\uDE38-\\uDE3A\\uDE3F\\uDE60-\\uDE7C\\uDE80-\\uDE9C\\uDEC0-\\uDEC7\\uDEC9-\\uDEE6\\uDF00-\\uDF35\\uDF40-\\uDF55\\uDF60-\\uDF72\\uDF80-\\uDF91]|\\uD803[\\uDC00-\\uDC48\\uDC80-\\uDCB2\\uDCC0-\\uDCF2]|\\uD804[\\uDC00-\\uDC46\\uDC66-\\uDC6F\\uDC7F-\\uDCBA\\uDCD0-\\uDCE8\\uDCF0-\\uDCF9\\uDD00-\\uDD34\\uDD36-\\uDD3F\\uDD50-\\uDD73\\uDD76\\uDD80-\\uDDC4\\uDDCA-\\uDDCC\\uDDD0-\\uDDDA\\uDDDC\\uDE00-\\uDE11\\uDE13-\\uDE37\\uDE80-\\uDE86\\uDE88\\uDE8A-\\uDE8D\\uDE8F-\\uDE9D\\uDE9F-\\uDEA8\\uDEB0-\\uDEEA\\uDEF0-\\uDEF9\\uDF00-\\uDF03\\uDF05-\\uDF0C\\uDF0F\\uDF10\\uDF13-\\uDF28\\uDF2A-\\uDF30\\uDF32\\uDF33\\uDF35-\\uDF39\\uDF3C-\\uDF44\\uDF47\\uDF48\\uDF4B-\\uDF4D\\uDF50\\uDF57\\uDF5D-\\uDF63\\uDF66-\\uDF6C\\uDF70-\\uDF74]|\\uD805[\\uDC80-\\uDCC5\\uDCC7\\uDCD0-\\uDCD9\\uDD80-\\uDDB5\\uDDB8-\\uDDC0\\uDDD8-\\uDDDD\\uDE00-\\uDE40\\uDE44\\uDE50-\\uDE59\\uDE80-\\uDEB7\\uDEC0-\\uDEC9\\uDF00-\\uDF19\\uDF1D-\\uDF2B\\uDF30-\\uDF39]|\\uD806[\\uDCA0-\\uDCE9\\uDCFF\\uDEC0-\\uDEF8]|\\uD808[\\uDC00-\\uDF99]|\\uD809[\\uDC00-\\uDC6E\\uDC80-\\uDD43]|[\\uD80C\\uD840-\\uD868\\uD86A-\\uD86C\\uD86F-\\uD872][\\uDC00-\\uDFFF]|\\uD80D[\\uDC00-\\uDC2E]|\\uD811[\\uDC00-\\uDE46]|\\uD81A[\\uDC00-\\uDE38\\uDE40-\\uDE5E\\uDE60-\\uDE69\\uDED0-\\uDEED\\uDEF0-\\uDEF4\\uDF00-\\uDF36\\uDF40-\\uDF43\\uDF50-\\uDF59\\uDF63-\\uDF77\\uDF7D-\\uDF8F]|\\uD81B[\\uDF00-\\uDF44\\uDF50-\\uDF7E\\uDF8F-\\uDF9F]|\\uD82C[\\uDC00\\uDC01]|\\uD82F[\\uDC00-\\uDC6A\\uDC70-\\uDC7C\\uDC80-\\uDC88\\uDC90-\\uDC99\\uDC9D\\uDC9E]|\\uD834[\\uDD65-\\uDD69\\uDD6D-\\uDD72\\uDD7B-\\uDD82\\uDD85-\\uDD8B\\uDDAA-\\uDDAD\\uDE42-\\uDE44]|\\uD835[\\uDC00-\\uDC54\\uDC56-\\uDC9C\\uDC9E\\uDC9F\\uDCA2\\uDCA5\\uDCA6\\uDCA9-\\uDCAC\\uDCAE-\\uDCB9\\uDCBB\\uDCBD-\\uDCC3\\uDCC5-\\uDD05\\uDD07-\\uDD0A\\uDD0D-\\uDD14\\uDD16-\\uDD1C\\uDD1E-\\uDD39\\uDD3B-\\uDD3E\\uDD40-\\uDD44\\uDD46\\uDD4A-\\uDD50\\uDD52-\\uDEA5\\uDEA8-\\uDEC0\\uDEC2-\\uDEDA\\uDEDC-\\uDEFA\\uDEFC-\\uDF14\\uDF16-\\uDF34\\uDF36-\\uDF4E\\uDF50-\\uDF6E\\uDF70-\\uDF88\\uDF8A-\\uDFA8\\uDFAA-\\uDFC2\\uDFC4-\\uDFCB\\uDFCE-\\uDFFF]|\\uD836[\\uDE00-\\uDE36\\uDE3B-\\uDE6C\\uDE75\\uDE84\\uDE9B-\\uDE9F\\uDEA1-\\uDEAF]|\\uD83A[\\uDC00-\\uDCC4\\uDCD0-\\uDCD6]|\\uD83B[\\uDE00-\\uDE03\\uDE05-\\uDE1F\\uDE21\\uDE22\\uDE24\\uDE27\\uDE29-\\uDE32\\uDE34-\\uDE37\\uDE39\\uDE3B\\uDE42\\uDE47\\uDE49\\uDE4B\\uDE4D-\\uDE4F\\uDE51\\uDE52\\uDE54\\uDE57\\uDE59\\uDE5B\\uDE5D\\uDE5F\\uDE61\\uDE62\\uDE64\\uDE67-\\uDE6A\\uDE6C-\\uDE72\\uDE74-\\uDE77\\uDE79-\\uDE7C\\uDE7E\\uDE80-\\uDE89\\uDE8B-\\uDE9B\\uDEA1-\\uDEA3\\uDEA5-\\uDEA9\\uDEAB-\\uDEBB]|\\uD869[\\uDC00-\\uDED6\\uDF00-\\uDFFF]|\\uD86D[\\uDC00-\\uDF34\\uDF40-\\uDFFF]|\\uD86E[\\uDC00-\\uDC1D\\uDC20-\\uDFFF]|\\uD873[\\uDC00-\\uDEA1]|\\uD87E[\\uDC00-\\uDE1D]|\\uDB40[\\uDD00-\\uDDEF]/\r\n};\r\n\r\nexport const Character = {\r\n\r\n    /* tslint:disable:no-bitwise */\r\n\r\n    fromCodePoint(cp: number): string {\r\n        return (cp < 0x10000) ? String.fromCharCode(cp) :\r\n            String.fromCharCode(0xD800 + ((cp - 0x10000) >> 10)) +\r\n            String.fromCharCode(0xDC00 + ((cp - 0x10000) & 1023));\r\n    },\r\n\r\n    // https://tc39.github.io/ecma262/#sec-white-space\r\n\r\n    isWhiteSpace(cp: number): boolean {\r\n        return (cp === 0x20) || (cp === 0x09) || (cp === 0x0B) || (cp === 0x0C) || (cp === 0xA0) ||\r\n            (cp >= 0x1680 && [0x1680, 0x2000, 0x2001, 0x2002, 0x2003, 0x2004, 0x2005, 0x2006, 0x2007, 0x2008, 0x2009, 0x200A, 0x202F, 0x205F, 0x3000, 0xFEFF].indexOf(cp) >= 0);\r\n    },\r\n\r\n    // https://tc39.github.io/ecma262/#sec-line-terminators\r\n\r\n    isLineTerminator(cp: number): boolean {\r\n        return (cp === 0x0A) || (cp === 0x0D) || (cp === 0x2028) || (cp === 0x2029);\r\n    },\r\n\r\n    // https://tc39.github.io/ecma262/#sec-names-and-keywords\r\n\r\n    isIdentifierStart(cp: number): boolean {\r\n        return (cp === 0x24) || (cp === 0x5F) ||  // $ (dollar) and _ (underscore)\r\n            (cp >= 0x41 && cp <= 0x5A) ||         // A..Z\r\n            (cp >= 0x61 && cp <= 0x7A) ||         // a..z\r\n            (cp === 0x5C) ||                      // \\ (backslash)\r\n            ((cp >= 0x80) && Regex.NonAsciiIdentifierStart.test(Character.fromCodePoint(cp)));\r\n    },\r\n\r\n    isIdentifierPart(cp: number): boolean {\r\n        return (cp === 0x24) || (cp === 0x5F) ||  // $ (dollar) and _ (underscore)\r\n            (cp >= 0x41 && cp <= 0x5A) ||         // A..Z\r\n            (cp >= 0x61 && cp <= 0x7A) ||         // a..z\r\n            (cp >= 0x30 && cp <= 0x39) ||         // 0..9\r\n            (cp === 0x5C) ||                      // \\ (backslash)\r\n            ((cp >= 0x80) && Regex.NonAsciiIdentifierPart.test(Character.fromCodePoint(cp)));\r\n    },\r\n\r\n    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\r\n\r\n    isDecimalDigit(cp: number): boolean {\r\n        return (cp >= 0x30 && cp <= 0x39);      // 0..9\r\n    },\r\n\r\n    isHexDigit(cp: number): boolean {\r\n        return (cp >= 0x30 && cp <= 0x39) ||    // 0..9\r\n            (cp >= 0x41 && cp <= 0x46) ||       // A..F\r\n            (cp >= 0x61 && cp <= 0x66);         // a..f\r\n    },\r\n\r\n    isOctalDigit(cp: number): boolean {\r\n        return (cp >= 0x30 && cp <= 0x37);      // 0..7\r\n    }\r\n\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/character.ts","import { SourceLocation } from './scanner';\r\nimport { Syntax } from './syntax';\r\n\r\ninterface Comment {\r\n    type: string;\r\n    value: string;\r\n    range?: [number, number];\r\n    loc?: SourceLocation;\r\n}\r\n\r\ninterface Entry {\r\n    comment: Comment;\r\n    start: number;\r\n}\r\n\r\ninterface NodeInfo {\r\n    node: any;\r\n    start: number;\r\n}\r\n\r\nexport class CommentHandler {\r\n    attach: boolean;\r\n    comments: Comment[];\r\n    stack: NodeInfo[];\r\n    leading: Entry[];\r\n    trailing: Entry[];\r\n\r\n    constructor() {\r\n        this.attach = false;\r\n        this.comments = [];\r\n        this.stack = [];\r\n        this.leading = [];\r\n        this.trailing = [];\r\n    }\r\n\r\n    insertInnerComments(node, metadata) {\r\n        //  innnerComments for properties empty block\r\n        //  `function a() {/** comments **\\/}`\r\n        if (node.type === Syntax.BlockStatement && node.body.length === 0) {\r\n            const innerComments: Comment[] = [];\r\n            for (let i = this.leading.length - 1; i >= 0; --i) {\r\n                const entry = this.leading[i];\r\n                if (metadata.end.offset >= entry.start) {\r\n                    innerComments.unshift(entry.comment);\r\n                    this.leading.splice(i, 1);\r\n                    this.trailing.splice(i, 1);\r\n                }\r\n            }\r\n            if (innerComments.length) {\r\n                node.innerComments = innerComments;\r\n            }\r\n        }\r\n    }\r\n\r\n    findTrailingComments(metadata) {\r\n        let trailingComments: Comment[] = [];\r\n\r\n        if (this.trailing.length > 0) {\r\n            for (let i = this.trailing.length - 1; i >= 0; --i) {\r\n                const entry = this.trailing[i];\r\n                if (entry.start >= metadata.end.offset) {\r\n                    trailingComments.unshift(entry.comment);\r\n                }\r\n            }\r\n            this.trailing.length = 0;\r\n            return trailingComments;\r\n        }\r\n\r\n        const last = this.stack[this.stack.length - 1];\r\n        if (last && last.node.trailingComments) {\r\n            const firstComment = last.node.trailingComments[0];\r\n            if (firstComment && firstComment.range[0] >= metadata.end.offset) {\r\n                trailingComments = last.node.trailingComments;\r\n                delete last.node.trailingComments;\r\n            }\r\n        }\r\n        return trailingComments;\r\n    }\r\n\r\n    findLeadingComments(metadata) {\r\n        const leadingComments: Comment[] = [];\r\n\r\n        let target;\r\n        while (this.stack.length > 0) {\r\n            const entry = this.stack[this.stack.length - 1];\r\n            if (entry && entry.start >= metadata.start.offset) {\r\n                target = entry.node;\r\n                this.stack.pop();\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        if (target) {\r\n            const count = target.leadingComments ? target.leadingComments.length : 0;\r\n            for (let i = count - 1; i >= 0; --i) {\r\n                const comment = target.leadingComments[i];\r\n                if (comment.range[1] <= metadata.start.offset) {\r\n                    leadingComments.unshift(comment);\r\n                    target.leadingComments.splice(i, 1);\r\n                }\r\n            }\r\n            if (target.leadingComments && target.leadingComments.length === 0) {\r\n                delete target.leadingComments;\r\n            }\r\n            return leadingComments;\r\n        }\r\n\r\n        for (let i = this.leading.length - 1; i >= 0; --i) {\r\n            const entry = this.leading[i];\r\n            if (entry.start <= metadata.start.offset) {\r\n                leadingComments.unshift(entry.comment);\r\n                this.leading.splice(i, 1);\r\n            }\r\n        }\r\n        return leadingComments;\r\n    }\r\n\r\n    visitNode(node, metadata) {\r\n        if (node.type === Syntax.Program && node.body.length > 0) {\r\n            return;\r\n        }\r\n\r\n        this.insertInnerComments(node, metadata);\r\n        const trailingComments = this.findTrailingComments(metadata);\r\n        const leadingComments = this.findLeadingComments(metadata);\r\n        if (leadingComments.length > 0) {\r\n            node.leadingComments = leadingComments;\r\n        }\r\n        if (trailingComments.length > 0) {\r\n            node.trailingComments = trailingComments;\r\n        }\r\n\r\n        this.stack.push({\r\n            node: node,\r\n            start: metadata.start.offset\r\n        });\r\n    }\r\n\r\n    visitComment(node, metadata) {\r\n        const type = (node.type[0] === 'L') ? 'Line' : 'Block';\r\n        const comment: Comment = {\r\n            type: type,\r\n            value: node.value\r\n        };\r\n        if (node.range) {\r\n            comment.range = node.range;\r\n        }\r\n        if (node.loc) {\r\n            comment.loc = node.loc;\r\n        }\r\n        this.comments.push(comment);\r\n\r\n        if (this.attach) {\r\n            const entry: Entry = {\r\n                comment: {\r\n                    type: type,\r\n                    value: node.value,\r\n                    range: [metadata.start.offset, metadata.end.offset]\r\n                },\r\n                start: metadata.start.offset\r\n            };\r\n            if (node.loc) {\r\n                entry.comment.loc = node.loc;\r\n            }\r\n            node.type = type;\r\n            this.leading.push(entry);\r\n            this.trailing.push(entry);\r\n        }\r\n    }\r\n\r\n    visit(node, metadata) {\r\n        if (node.type === 'LineComment') {\r\n            this.visitComment(node, metadata);\r\n        } else if (node.type === 'BlockComment') {\r\n            this.visitComment(node, metadata);\r\n        } else if (this.attach) {\r\n            this.visitNode(node, metadata);\r\n        }\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/comment-handler.ts","export const Syntax = {\r\n    AssignmentExpression: 'AssignmentExpression',\r\n    AssignmentPattern: 'AssignmentPattern',\r\n    ArrayExpression: 'ArrayExpression',\r\n    ArrayPattern: 'ArrayPattern',\r\n    ArrowFunctionExpression: 'ArrowFunctionExpression',\r\n    AwaitExpression: 'AwaitExpression',\r\n    BlockStatement: 'BlockStatement',\r\n    BinaryExpression: 'BinaryExpression',\r\n    BreakStatement: 'BreakStatement',\r\n    CallExpression: 'CallExpression',\r\n    CatchClause: 'CatchClause',\r\n    ClassBody: 'ClassBody',\r\n    ClassDeclaration: 'ClassDeclaration',\r\n    ClassExpression: 'ClassExpression',\r\n    ConditionalExpression: 'ConditionalExpression',\r\n    ContinueStatement: 'ContinueStatement',\r\n    DoWhileStatement: 'DoWhileStatement',\r\n    DebuggerStatement: 'DebuggerStatement',\r\n    EmptyStatement: 'EmptyStatement',\r\n    ExportAllDeclaration: 'ExportAllDeclaration',\r\n    ExportDefaultDeclaration: 'ExportDefaultDeclaration',\r\n    ExportNamedDeclaration: 'ExportNamedDeclaration',\r\n    ExportSpecifier: 'ExportSpecifier',\r\n    ExpressionStatement: 'ExpressionStatement',\r\n    ForStatement: 'ForStatement',\r\n    ForOfStatement: 'ForOfStatement',\r\n    ForInStatement: 'ForInStatement',\r\n    FunctionDeclaration: 'FunctionDeclaration',\r\n    FunctionExpression: 'FunctionExpression',\r\n    Identifier: 'Identifier',\r\n    IfStatement: 'IfStatement',\r\n    Import: 'Import',\r\n    ImportDeclaration: 'ImportDeclaration',\r\n    ImportDefaultSpecifier: 'ImportDefaultSpecifier',\r\n    ImportNamespaceSpecifier: 'ImportNamespaceSpecifier',\r\n    ImportSpecifier: 'ImportSpecifier',\r\n    Literal: 'Literal',\r\n    LabeledStatement: 'LabeledStatement',\r\n    LogicalExpression: 'LogicalExpression',\r\n    MemberExpression: 'MemberExpression',\r\n    MetaProperty: 'MetaProperty',\r\n    MethodDefinition: 'MethodDefinition',\r\n    NewExpression: 'NewExpression',\r\n    ObjectExpression: 'ObjectExpression',\r\n    ObjectPattern: 'ObjectPattern',\r\n    Program: 'Program',\r\n    Property: 'Property',\r\n    RestElement: 'RestElement',\r\n    ReturnStatement: 'ReturnStatement',\r\n    SequenceExpression: 'SequenceExpression',\r\n    SpreadElement: 'SpreadElement',\r\n    Super: 'Super',\r\n    SwitchCase: 'SwitchCase',\r\n    SwitchStatement: 'SwitchStatement',\r\n    TaggedTemplateExpression: 'TaggedTemplateExpression',\r\n    TemplateElement: 'TemplateElement',\r\n    TemplateLiteral: 'TemplateLiteral',\r\n    ThisExpression: 'ThisExpression',\r\n    ThrowStatement: 'ThrowStatement',\r\n    TryStatement: 'TryStatement',\r\n    UnaryExpression: 'UnaryExpression',\r\n    UpdateExpression: 'UpdateExpression',\r\n    VariableDeclaration: 'VariableDeclaration',\r\n    VariableDeclarator: 'VariableDeclarator',\r\n    WhileStatement: 'WhileStatement',\r\n    WithStatement: 'WithStatement',\r\n    YieldExpression: 'YieldExpression'\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/syntax.ts","/* tslint:disable:max-classes-per-file */\r\n\r\ndeclare class Error {\r\n    public name: string;\r\n    public message: string;\r\n    public index: number;\r\n    public lineNumber: number;\r\n    public column: number;\r\n    public description: string;\r\n    constructor(message: string);\r\n}\r\n\r\nexport class ErrorHandler {\r\n    readonly errors: Error[];\r\n    tolerant: boolean;\r\n\r\n    constructor() {\r\n        this.errors = [];\r\n        this.tolerant = false;\r\n    }\r\n\r\n    recordError(error: Error): void {\r\n        this.errors.push(error);\r\n    }\r\n\r\n    tolerate(error): void {\r\n        if (this.tolerant) {\r\n            this.recordError(error);\r\n        } else {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n    constructError(msg: string, column: number): Error {\r\n        let error = new Error(msg);\r\n        try {\r\n            throw error;\r\n        } catch (base) {\r\n            /* istanbul ignore else */\r\n            if (Object.create && Object.defineProperty) {\r\n                error = Object.create(base);\r\n                Object.defineProperty(error, 'column', { value: column });\r\n            }\r\n        }\r\n        /* istanbul ignore next */\r\n        return error;\r\n    }\r\n\r\n    createError(index: number, line: number, col: number, description: string): Error {\r\n        const msg = 'Line ' + line + ': ' + description;\r\n        const error = this.constructError(msg, col);\r\n        error.index = index;\r\n        error.lineNumber = line;\r\n        error.description = description;\r\n        return error;\r\n    }\r\n\r\n    throwError(index: number, line: number, col: number, description: string): never {\r\n        throw this.createError(index, line, col, description);\r\n    }\r\n\r\n    tolerateError(index: number, line: number, col: number, description: string) {\r\n        const error = this.createError(index, line, col, description);\r\n        if (this.tolerant) {\r\n            this.recordError(error);\r\n        } else {\r\n            throw error;\r\n        }\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/error-handler.ts","import { JSXSyntax } from './jsx-syntax';\r\nimport * as Node from './nodes';\r\n\r\nexport type JSXAttributeName = JSXIdentifier | JSXNamespacedName;\r\nexport type JSXAttributeValue = Node.Literal | JSXElement | JSXSpreadAttribute | JSXExpressionContainer;\r\nexport type JSXChild = JSXElement | JSXExpressionContainer | JSXText;\r\nexport type JSXElementAttribute = JSXAttribute | JSXSpreadAttribute;\r\nexport type JSXElementName = JSXIdentifier | JSXNamespacedName | JSXMemberExpression;\r\n\r\n/* tslint:disable:max-classes-per-file */\r\n\r\nexport class JSXClosingElement {\r\n    readonly type: string;\r\n    readonly name: JSXElementName;\r\n    constructor(name: JSXElementName) {\r\n        this.type = JSXSyntax.JSXClosingElement;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class JSXElement {\r\n    readonly type: string;\r\n    readonly openingElement: JSXOpeningElement;\r\n    readonly children: JSXChild[];\r\n    readonly closingElement: JSXClosingElement | null;\r\n    constructor(openingElement: JSXOpeningElement, children: JSXChild[], closingElement: JSXClosingElement | null) {\r\n        this.type = JSXSyntax.JSXElement;\r\n        this.openingElement = openingElement;\r\n        this.children = children;\r\n        this.closingElement = closingElement;\r\n    }\r\n}\r\n\r\nexport class JSXEmptyExpression {\r\n    readonly type: string;\r\n    constructor() {\r\n        this.type = JSXSyntax.JSXEmptyExpression;\r\n    }\r\n}\r\n\r\nexport class JSXExpressionContainer {\r\n    readonly type: string;\r\n    readonly expression: Node.Expression | JSXEmptyExpression;\r\n    constructor(expression: Node.Expression | JSXEmptyExpression) {\r\n        this.type = JSXSyntax.JSXExpressionContainer;\r\n        this.expression = expression;\r\n    }\r\n}\r\n\r\nexport class JSXIdentifier {\r\n    readonly type: string;\r\n    readonly name: string;\r\n    constructor(name: string) {\r\n        this.type = JSXSyntax.JSXIdentifier;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class JSXMemberExpression {\r\n    readonly type: string;\r\n    readonly object: JSXMemberExpression | JSXIdentifier;\r\n    readonly property: JSXIdentifier;\r\n    constructor(object: JSXMemberExpression | JSXIdentifier, property: JSXIdentifier) {\r\n        this.type = JSXSyntax.JSXMemberExpression;\r\n        this.object = object;\r\n        this.property = property;\r\n    }\r\n}\r\n\r\nexport class JSXAttribute {\r\n    readonly type: string;\r\n    readonly name: JSXAttributeName;\r\n    readonly value: JSXAttributeValue | null;\r\n    constructor(name: JSXAttributeName, value: JSXAttributeValue | null) {\r\n        this.type = JSXSyntax.JSXAttribute;\r\n        this.name = name;\r\n        this.value = value;\r\n    }\r\n}\r\n\r\nexport class JSXNamespacedName {\r\n    readonly type: string;\r\n    readonly namespace: JSXIdentifier;\r\n    readonly name: JSXIdentifier;\r\n    constructor(namespace: JSXIdentifier, name: JSXIdentifier) {\r\n        this.type = JSXSyntax.JSXNamespacedName;\r\n        this.namespace = namespace;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class JSXOpeningElement {\r\n    readonly type: string;\r\n    readonly name: JSXElementName;\r\n    readonly selfClosing: boolean;\r\n    readonly attributes: JSXElementAttribute[];\r\n    constructor(name: JSXElementName, selfClosing: boolean, attributes: JSXElementAttribute[]) {\r\n        this.type = JSXSyntax.JSXOpeningElement;\r\n        this.name = name;\r\n        this.selfClosing = selfClosing;\r\n        this.attributes = attributes;\r\n    }\r\n}\r\n\r\nexport class JSXSpreadAttribute {\r\n    readonly type: string;\r\n    readonly argument: Node.Expression;\r\n    constructor(argument: Node.Expression) {\r\n        this.type = JSXSyntax.JSXSpreadAttribute;\r\n        this.argument = argument;\r\n    }\r\n}\r\n\r\nexport class JSXText {\r\n    readonly type: string;\r\n    readonly value: string;\r\n    readonly raw: string;\r\n    constructor(value: string, raw: string) {\r\n        this.type = JSXSyntax.JSXText;\r\n        this.value = value;\r\n        this.raw = raw;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx-nodes.ts","export const JSXSyntax = {\r\n    JSXAttribute: 'JSXAttribute',\r\n    JSXClosingElement: 'JSXClosingElement',\r\n    JSXElement: 'JSXElement',\r\n    JSXEmptyExpression: 'JSXEmptyExpression',\r\n    JSXExpressionContainer: 'JSXExpressionContainer',\r\n    JSXIdentifier: 'JSXIdentifier',\r\n    JSXMemberExpression: 'JSXMemberExpression',\r\n    JSXNamespacedName: 'JSXNamespacedName',\r\n    JSXOpeningElement: 'JSXOpeningElement',\r\n    JSXSpreadAttribute: 'JSXSpreadAttribute',\r\n    JSXText: 'JSXText'\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx-syntax.ts","import { Character } from './character';\r\nimport * as JSXNode from './jsx-nodes';\r\nimport { JSXSyntax } from './jsx-syntax';\r\nimport * as Node from './nodes';\r\nimport { Marker, Parser } from './parser';\r\nimport { Token, TokenName } from './token';\r\nimport { XHTMLEntities } from './xhtml-entities';\r\n\r\ninterface MetaJSXElement {\r\n    node: Marker;\r\n    opening: JSXNode.JSXOpeningElement;\r\n    closing: JSXNode.JSXClosingElement | null;\r\n    children: JSXNode.JSXChild[];\r\n}\r\n\r\nconst enum JSXToken {\r\n    Identifier = 100,\r\n    Text\r\n}\r\n\r\ninterface RawJSXToken {\r\n    type: Token | JSXToken;\r\n    value: string;\r\n    lineNumber: number;\r\n    lineStart: number;\r\n    start: number;\r\n    end: number;\r\n}\r\n\r\nTokenName[JSXToken.Identifier] = 'JSXIdentifier';\r\nTokenName[JSXToken.Text] = 'JSXText';\r\n\r\n// Fully qualified element name, e.g. <svg:path> returns \"svg:path\"\r\nfunction getQualifiedElementName(elementName: JSXNode.JSXElementName): string {\r\n    let qualifiedName;\r\n\r\n    switch (elementName.type) {\r\n        case JSXSyntax.JSXIdentifier:\r\n            const id = elementName as JSXNode.JSXIdentifier;\r\n            qualifiedName = id.name;\r\n            break;\r\n        case JSXSyntax.JSXNamespacedName:\r\n            const ns = elementName as JSXNode.JSXNamespacedName;\r\n            qualifiedName = getQualifiedElementName(ns.namespace) + ':' +\r\n                getQualifiedElementName(ns.name);\r\n            break;\r\n        case JSXSyntax.JSXMemberExpression:\r\n            const expr = elementName as JSXNode.JSXMemberExpression;\r\n            qualifiedName = getQualifiedElementName(expr.object) + '.' +\r\n                getQualifiedElementName(expr.property);\r\n            break;\r\n        /* istanbul ignore next */\r\n        default:\r\n            break;\r\n    }\r\n\r\n    return qualifiedName;\r\n}\r\n\r\nexport class JSXParser extends Parser {\r\n\r\n    constructor(code: string, options, delegate) {\r\n        super(code, options, delegate);\r\n    }\r\n\r\n    parsePrimaryExpression(): Node.Expression | JSXNode.JSXElement {\r\n        return this.match('<') ? this.parseJSXRoot() : super.parsePrimaryExpression();\r\n    }\r\n\r\n    startJSX() {\r\n        // Unwind the scanner before the lookahead token.\r\n        this.scanner.index = this.startMarker.index;\r\n        this.scanner.lineNumber = this.startMarker.line;\r\n        this.scanner.lineStart = this.startMarker.index - this.startMarker.column;\r\n    }\r\n\r\n    finishJSX() {\r\n        // Prime the next lookahead.\r\n        this.nextToken();\r\n    }\r\n\r\n    reenterJSX() {\r\n        this.startJSX();\r\n        this.expectJSX('}');\r\n\r\n        // Pop the closing '}' added from the lookahead.\r\n        if (this.config.tokens) {\r\n            this.tokens.pop();\r\n        }\r\n    }\r\n\r\n    createJSXNode(): Marker {\r\n        this.collectComments();\r\n        return {\r\n            index: this.scanner.index,\r\n            line: this.scanner.lineNumber,\r\n            column: this.scanner.index - this.scanner.lineStart\r\n        };\r\n    }\r\n\r\n    createJSXChildNode(): Marker {\r\n        return {\r\n            index: this.scanner.index,\r\n            line: this.scanner.lineNumber,\r\n            column: this.scanner.index - this.scanner.lineStart\r\n        };\r\n    }\r\n\r\n    scanXHTMLEntity(quote: string): string {\r\n        let result = '&';\r\n\r\n        let valid = true;\r\n        let terminated = false;\r\n        let numeric = false;\r\n        let hex = false;\r\n\r\n        while (!this.scanner.eof() && valid && !terminated) {\r\n            const ch = this.scanner.source[this.scanner.index];\r\n            if (ch === quote) {\r\n                break;\r\n            }\r\n            terminated = (ch === ';');\r\n            result += ch;\r\n            ++this.scanner.index;\r\n            if (!terminated) {\r\n                switch (result.length) {\r\n                    case 2:\r\n                        // e.g. '&#123;'\r\n                        numeric = (ch === '#');\r\n                        break;\r\n                    case 3:\r\n                        if (numeric) {\r\n                            // e.g. '&#x41;'\r\n                            hex = (ch === 'x');\r\n                            valid = hex || Character.isDecimalDigit(ch.charCodeAt(0));\r\n                            numeric = numeric && !hex;\r\n                        }\r\n                        break;\r\n                    default:\r\n                        valid = valid && !(numeric && !Character.isDecimalDigit(ch.charCodeAt(0)));\r\n                        valid = valid && !(hex && !Character.isHexDigit(ch.charCodeAt(0)));\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (valid && terminated && result.length > 2) {\r\n            // e.g. '&#x41;' becomes just '#x41'\r\n            const str = result.substr(1, result.length - 2);\r\n            if (numeric && str.length > 1) {\r\n                result = String.fromCharCode(parseInt(str.substr(1), 10));\r\n            } else if (hex && str.length > 2) {\r\n                result = String.fromCharCode(parseInt('0' + str.substr(1), 16));\r\n            } else if (!numeric && !hex && XHTMLEntities[str]) {\r\n                result = XHTMLEntities[str];\r\n            }\r\n        }\r\n\r\n        return result;\r\n    }\r\n\r\n    // Scan the next JSX token. This replaces Scanner#lex when in JSX mode.\r\n\r\n    lexJSX(): RawJSXToken {\r\n        const cp = this.scanner.source.charCodeAt(this.scanner.index);\r\n\r\n        // < > / : = { }\r\n        if (cp === 60 || cp === 62 || cp === 47 || cp === 58 || cp === 61 || cp === 123 || cp === 125) {\r\n            const value = this.scanner.source[this.scanner.index++];\r\n            return {\r\n                type: Token.Punctuator,\r\n                value: value,\r\n                lineNumber: this.scanner.lineNumber,\r\n                lineStart: this.scanner.lineStart,\r\n                start: this.scanner.index - 1,\r\n                end: this.scanner.index\r\n            };\r\n        }\r\n\r\n        // \" '\r\n        if (cp === 34 || cp === 39) {\r\n            const start = this.scanner.index;\r\n            const quote = this.scanner.source[this.scanner.index++];\r\n            let str = '';\r\n            while (!this.scanner.eof()) {\r\n                const ch = this.scanner.source[this.scanner.index++];\r\n                if (ch === quote) {\r\n                    break;\r\n                } else if (ch === '&') {\r\n                    str += this.scanXHTMLEntity(quote);\r\n                } else {\r\n                    str += ch;\r\n                }\r\n            }\r\n\r\n            return {\r\n                type: Token.StringLiteral,\r\n                value: str,\r\n                lineNumber: this.scanner.lineNumber,\r\n                lineStart: this.scanner.lineStart,\r\n                start: start,\r\n                end: this.scanner.index\r\n            };\r\n        }\r\n\r\n        // ... or .\r\n        if (cp === 46) {\r\n            const n1 = this.scanner.source.charCodeAt(this.scanner.index + 1);\r\n            const n2 = this.scanner.source.charCodeAt(this.scanner.index + 2);\r\n            const value = (n1 === 46 && n2 === 46) ? '...' : '.';\r\n            const start = this.scanner.index;\r\n            this.scanner.index += value.length;\r\n            return {\r\n                type: Token.Punctuator,\r\n                value: value,\r\n                lineNumber: this.scanner.lineNumber,\r\n                lineStart: this.scanner.lineStart,\r\n                start: start,\r\n                end: this.scanner.index\r\n            };\r\n        }\r\n\r\n        // `\r\n        if (cp === 96) {\r\n            // Only placeholder, since it will be rescanned as a real assignment expression.\r\n            return {\r\n                type: Token.Template,\r\n                value: '',\r\n                lineNumber: this.scanner.lineNumber,\r\n                lineStart: this.scanner.lineStart,\r\n                start: this.scanner.index,\r\n                end: this.scanner.index\r\n            };\r\n        }\r\n\r\n        // Identifer can not contain backslash (char code 92).\r\n        if (Character.isIdentifierStart(cp) && (cp !== 92)) {\r\n            const start = this.scanner.index;\r\n            ++this.scanner.index;\r\n            while (!this.scanner.eof()) {\r\n                const ch = this.scanner.source.charCodeAt(this.scanner.index);\r\n                if (Character.isIdentifierPart(ch) && (ch !== 92)) {\r\n                    ++this.scanner.index;\r\n                } else if (ch === 45) {\r\n                    // Hyphen (char code 45) can be part of an identifier.\r\n                    ++this.scanner.index;\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n            const id = this.scanner.source.slice(start, this.scanner.index);\r\n            return {\r\n                type: JSXToken.Identifier,\r\n                value: id,\r\n                lineNumber: this.scanner.lineNumber,\r\n                lineStart: this.scanner.lineStart,\r\n                start: start,\r\n                end: this.scanner.index\r\n            };\r\n        }\r\n\r\n        return this.scanner.lex() as RawJSXToken;\r\n    }\r\n\r\n    nextJSXToken(): RawJSXToken {\r\n        this.collectComments();\r\n\r\n        this.startMarker.index = this.scanner.index;\r\n        this.startMarker.line = this.scanner.lineNumber;\r\n        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\r\n        const token = this.lexJSX();\r\n        this.lastMarker.index = this.scanner.index;\r\n        this.lastMarker.line = this.scanner.lineNumber;\r\n        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n\r\n        if (this.config.tokens) {\r\n            this.tokens.push(this.convertToken(token as any));\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n    nextJSXText(): RawJSXToken {\r\n        this.startMarker.index = this.scanner.index;\r\n        this.startMarker.line = this.scanner.lineNumber;\r\n        this.startMarker.column = this.scanner.index - this.scanner.lineStart;\r\n\r\n        const start = this.scanner.index;\r\n\r\n        let text = '';\r\n        while (!this.scanner.eof()) {\r\n            const ch = this.scanner.source[this.scanner.index];\r\n            if (ch === '{' || ch === '<') {\r\n                break;\r\n            }\r\n            ++this.scanner.index;\r\n            text += ch;\r\n            if (Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                ++this.scanner.lineNumber;\r\n                if (ch === '\\r' && this.scanner.source[this.scanner.index] === '\\n') {\r\n                    ++this.scanner.index;\r\n                }\r\n                this.scanner.lineStart = this.scanner.index;\r\n            }\r\n        }\r\n\r\n        this.lastMarker.index = this.scanner.index;\r\n        this.lastMarker.line = this.scanner.lineNumber;\r\n        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n\r\n        const token = {\r\n            type: JSXToken.Text,\r\n            value: text,\r\n            lineNumber: this.scanner.lineNumber,\r\n            lineStart: this.scanner.lineStart,\r\n            start: start,\r\n            end: this.scanner.index\r\n        };\r\n\r\n        if ((text.length > 0) && this.config.tokens) {\r\n            this.tokens.push(this.convertToken(token as any));\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n    peekJSXToken(): RawJSXToken {\r\n        const state = this.scanner.saveState();\r\n        this.scanner.scanComments();\r\n        const next = this.lexJSX();\r\n        this.scanner.restoreState(state);\r\n\r\n        return next;\r\n    }\r\n\r\n    // Expect the next JSX token to match the specified punctuator.\r\n    // If not, an exception will be thrown.\r\n\r\n    expectJSX(value) {\r\n        const token = this.nextJSXToken();\r\n        if (token.type !== Token.Punctuator || token.value !== value) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n    }\r\n\r\n    // Return true if the next JSX token matches the specified punctuator.\r\n\r\n    matchJSX(value) {\r\n        const next = this.peekJSXToken();\r\n        return next.type === Token.Punctuator && next.value === value;\r\n    }\r\n\r\n    parseJSXIdentifier(): JSXNode.JSXIdentifier {\r\n        const node = this.createJSXNode();\r\n        const token = this.nextJSXToken();\r\n        if (token.type !== JSXToken.Identifier) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n        return this.finalize(node, new JSXNode.JSXIdentifier(token.value));\r\n    }\r\n\r\n    parseJSXElementName(): JSXNode.JSXElementName {\r\n        const node = this.createJSXNode();\r\n        let elementName = this.parseJSXIdentifier();\r\n\r\n        if (this.matchJSX(':')) {\r\n            const namespace = elementName;\r\n            this.expectJSX(':');\r\n            const name = this.parseJSXIdentifier();\r\n            elementName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name));\r\n        } else if (this.matchJSX('.')) {\r\n            while (this.matchJSX('.')) {\r\n                const object = elementName;\r\n                this.expectJSX('.');\r\n                const property = this.parseJSXIdentifier();\r\n                elementName = this.finalize(node, new JSXNode.JSXMemberExpression(object, property));\r\n            }\r\n        }\r\n\r\n        return elementName;\r\n    }\r\n\r\n    parseJSXAttributeName(): JSXNode.JSXAttributeName {\r\n        const node = this.createJSXNode();\r\n        let attributeName: JSXNode.JSXAttributeName;\r\n\r\n        const identifier = this.parseJSXIdentifier();\r\n        if (this.matchJSX(':')) {\r\n            const namespace = identifier;\r\n            this.expectJSX(':');\r\n            const name = this.parseJSXIdentifier();\r\n            attributeName = this.finalize(node, new JSXNode.JSXNamespacedName(namespace, name));\r\n        } else {\r\n            attributeName = identifier;\r\n        }\r\n\r\n        return attributeName;\r\n    }\r\n\r\n    parseJSXStringLiteralAttribute(): Node.Literal {\r\n        const node = this.createJSXNode();\r\n        const token = this.nextJSXToken();\r\n        if (token.type !== Token.StringLiteral) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n        const raw = this.getTokenRaw(token);\r\n        return this.finalize(node, new Node.Literal(token.value, raw));\r\n    }\r\n\r\n    parseJSXExpressionAttribute(): JSXNode.JSXExpressionContainer {\r\n        const node = this.createJSXNode();\r\n\r\n        this.expectJSX('{');\r\n        this.finishJSX();\r\n\r\n        if (this.match('}')) {\r\n            this.tolerateError('JSX attributes must only be assigned a non-empty expression');\r\n        }\r\n\r\n        const expression = this.parseAssignmentExpression();\r\n        this.reenterJSX();\r\n\r\n        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\r\n    }\r\n\r\n    parseJSXAttributeValue(): JSXNode.JSXAttributeValue {\r\n        return this.matchJSX('{') ? this.parseJSXExpressionAttribute() :\r\n            this.matchJSX('<') ? this.parseJSXElement() : this.parseJSXStringLiteralAttribute();\r\n    }\r\n\r\n    parseJSXNameValueAttribute(): JSXNode.JSXAttribute {\r\n        const node = this.createJSXNode();\r\n        const name = this.parseJSXAttributeName();\r\n        let value: JSXNode.JSXAttributeValue | null = null;\r\n        if (this.matchJSX('=')) {\r\n            this.expectJSX('=');\r\n            value = this.parseJSXAttributeValue();\r\n        }\r\n        return this.finalize(node, new JSXNode.JSXAttribute(name, value));\r\n    }\r\n\r\n    parseJSXSpreadAttribute(): JSXNode.JSXSpreadAttribute {\r\n        const node = this.createJSXNode();\r\n        this.expectJSX('{');\r\n        this.expectJSX('...');\r\n\r\n        this.finishJSX();\r\n        const argument = this.parseAssignmentExpression();\r\n        this.reenterJSX();\r\n\r\n        return this.finalize(node, new JSXNode.JSXSpreadAttribute(argument));\r\n    }\r\n\r\n    parseJSXAttributes(): JSXNode.JSXElementAttribute[] {\r\n        const attributes: JSXNode.JSXElementAttribute[] = [];\r\n\r\n        while (!this.matchJSX('/') && !this.matchJSX('>')) {\r\n            const attribute = this.matchJSX('{') ? this.parseJSXSpreadAttribute() :\r\n                this.parseJSXNameValueAttribute();\r\n            attributes.push(attribute);\r\n        }\r\n\r\n        return attributes;\r\n    }\r\n\r\n    parseJSXOpeningElement(): JSXNode.JSXOpeningElement {\r\n        const node = this.createJSXNode();\r\n\r\n        this.expectJSX('<');\r\n        const name = this.parseJSXElementName();\r\n        const attributes = this.parseJSXAttributes();\r\n        const selfClosing = this.matchJSX('/');\r\n        if (selfClosing) {\r\n            this.expectJSX('/');\r\n        }\r\n        this.expectJSX('>');\r\n\r\n        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\r\n    }\r\n\r\n    parseJSXBoundaryElement(): JSXNode.JSXOpeningElement | JSXNode.JSXClosingElement {\r\n        const node = this.createJSXNode();\r\n\r\n        this.expectJSX('<');\r\n        if (this.matchJSX('/')) {\r\n            this.expectJSX('/');\r\n            const elementName = this.parseJSXElementName();\r\n            this.expectJSX('>');\r\n            return this.finalize(node, new JSXNode.JSXClosingElement(elementName));\r\n        }\r\n\r\n        const name = this.parseJSXElementName();\r\n        const attributes = this.parseJSXAttributes();\r\n        const selfClosing = this.matchJSX('/');\r\n        if (selfClosing) {\r\n            this.expectJSX('/');\r\n        }\r\n        this.expectJSX('>');\r\n\r\n        return this.finalize(node, new JSXNode.JSXOpeningElement(name, selfClosing, attributes));\r\n    }\r\n\r\n    parseJSXEmptyExpression(): JSXNode.JSXEmptyExpression {\r\n        const node = this.createJSXChildNode();\r\n        this.collectComments();\r\n        this.lastMarker.index = this.scanner.index;\r\n        this.lastMarker.line = this.scanner.lineNumber;\r\n        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n        return this.finalize(node, new JSXNode.JSXEmptyExpression());\r\n    }\r\n\r\n    parseJSXExpressionContainer(): JSXNode.JSXExpressionContainer {\r\n        const node = this.createJSXNode();\r\n        this.expectJSX('{');\r\n\r\n        let expression: Node.Expression | JSXNode.JSXEmptyExpression;\r\n        if (this.matchJSX('}')) {\r\n            expression = this.parseJSXEmptyExpression();\r\n            this.expectJSX('}');\r\n        } else {\r\n            this.finishJSX();\r\n            expression = this.parseAssignmentExpression();\r\n            this.reenterJSX();\r\n        }\r\n\r\n        return this.finalize(node, new JSXNode.JSXExpressionContainer(expression));\r\n    }\r\n\r\n    parseJSXChildren(): JSXNode.JSXChild[] {\r\n        const children: JSXNode.JSXChild[] = [];\r\n\r\n        while (!this.scanner.eof()) {\r\n            const node = this.createJSXChildNode();\r\n            const token = this.nextJSXText();\r\n            if (token.start < token.end) {\r\n                const raw = this.getTokenRaw(token);\r\n                const child = this.finalize(node, new JSXNode.JSXText(token.value, raw));\r\n                children.push(child);\r\n            }\r\n            if (this.scanner.source[this.scanner.index] === '{') {\r\n                const container = this.parseJSXExpressionContainer();\r\n                children.push(container);\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return children;\r\n    }\r\n\r\n    parseComplexJSXElement(el: MetaJSXElement): MetaJSXElement {\r\n        const stack: MetaJSXElement[] = [];\r\n\r\n        while (!this.scanner.eof()) {\r\n            el.children = el.children.concat(this.parseJSXChildren());\r\n            const node = this.createJSXChildNode();\r\n            const element = this.parseJSXBoundaryElement();\r\n            if (element.type === JSXSyntax.JSXOpeningElement) {\r\n                const opening = element as JSXNode.JSXOpeningElement;\r\n                if (opening.selfClosing) {\r\n                    const child = this.finalize(node, new JSXNode.JSXElement(opening, [], null));\r\n                    el.children.push(child);\r\n                } else {\r\n                    stack.push(el);\r\n                    el = { node, opening, closing: null, children: [] };\r\n                }\r\n            }\r\n            if (element.type === JSXSyntax.JSXClosingElement) {\r\n                el.closing = element as JSXNode.JSXClosingElement;\r\n                const open = getQualifiedElementName(el.opening.name);\r\n                const close = getQualifiedElementName(el.closing.name);\r\n                if (open !== close) {\r\n                    this.tolerateError('Expected corresponding JSX closing tag for %0', open);\r\n                }\r\n                if (stack.length > 0) {\r\n                    const child = this.finalize(el.node, new JSXNode.JSXElement(el.opening, el.children, el.closing));\r\n                    el = stack[stack.length - 1];\r\n                    el.children.push(child);\r\n                    stack.pop();\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        return el;\r\n    }\r\n\r\n    parseJSXElement(): JSXNode.JSXElement {\r\n        const node = this.createJSXNode();\r\n\r\n        const opening = this.parseJSXOpeningElement();\r\n        let children: JSXNode.JSXChild[] = [];\r\n        let closing: JSXNode.JSXClosingElement | null = null;\r\n\r\n        if (!opening.selfClosing) {\r\n            const el = this.parseComplexJSXElement({ node, opening, closing, children });\r\n            children = el.children;\r\n            closing = el.closing;\r\n        }\r\n\r\n        return this.finalize(node, new JSXNode.JSXElement(opening, children, closing));\r\n    }\r\n\r\n    parseJSXRoot(): JSXNode.JSXElement {\r\n        // Pop the opening '<' added from the lookahead.\r\n        if (this.config.tokens) {\r\n            this.tokens.pop();\r\n        }\r\n\r\n        this.startJSX();\r\n        const element = this.parseJSXElement();\r\n        this.finishJSX();\r\n\r\n        return element;\r\n    }\r\n\r\n    isStartOfExpression(): boolean {\r\n        return super.isStartOfExpression() || this.match('<');\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/jsx-parser.ts","import { Syntax } from './syntax';\r\n\r\nexport type ArgumentListElement = Expression | SpreadElement;\r\nexport type ArrayExpressionElement = Expression | SpreadElement | null;\r\nexport type ArrayPatternElement = AssignmentPattern | BindingIdentifier | BindingPattern | RestElement | null;\r\nexport type BindingPattern = ArrayPattern | ObjectPattern;\r\nexport type BindingIdentifier = Identifier;\r\nexport type Declaration = AsyncFunctionDeclaration | ClassDeclaration | ExportDeclaration | FunctionDeclaration | ImportDeclaration | VariableDeclaration;\r\nexport type ExportableDefaultDeclaration = BindingIdentifier | BindingPattern | ClassDeclaration | Expression | FunctionDeclaration;\r\nexport type ExportableNamedDeclaration = AsyncFunctionDeclaration | ClassDeclaration | FunctionDeclaration | VariableDeclaration;\r\nexport type ExportDeclaration = ExportAllDeclaration | ExportDefaultDeclaration | ExportNamedDeclaration;\r\nexport type Expression = ArrayExpression | ArrowFunctionExpression | AssignmentExpression | AsyncArrowFunctionExpression | AsyncFunctionExpression |\r\n    AwaitExpression | BinaryExpression | CallExpression | ClassExpression | ComputedMemberExpression |\r\n    ConditionalExpression | Identifier | FunctionExpression | Literal | NewExpression | ObjectExpression |\r\n    RegexLiteral | SequenceExpression | StaticMemberExpression | TaggedTemplateExpression |\r\n    ThisExpression | UnaryExpression | UpdateExpression | YieldExpression;\r\nexport type FunctionParameter = AssignmentPattern | BindingIdentifier | BindingPattern;\r\nexport type ImportDeclarationSpecifier = ImportDefaultSpecifier | ImportNamespaceSpecifier | ImportSpecifier;\r\nexport type ObjectExpressionProperty = Property | SpreadElement;\r\nexport type ObjectPatternProperty = Property | RestElement;\r\nexport type Statement = AsyncFunctionDeclaration | BreakStatement | ContinueStatement | DebuggerStatement | DoWhileStatement |\r\n    EmptyStatement | ExpressionStatement | Directive | ForStatement | ForInStatement | ForOfStatement |\r\n    FunctionDeclaration | IfStatement | ReturnStatement | SwitchStatement | ThrowStatement |\r\n    TryStatement | VariableDeclaration | WhileStatement | WithStatement;\r\nexport type PropertyKey = Identifier | Literal;\r\nexport type PropertyValue = AssignmentPattern | AsyncFunctionExpression | BindingIdentifier | BindingPattern | FunctionExpression;\r\nexport type StatementListItem = Declaration | Statement;\r\n\r\n/* tslint:disable:max-classes-per-file */\r\n\r\nexport class ArrayExpression {\r\n    readonly type: string;\r\n    readonly elements: ArrayExpressionElement[];\r\n    constructor(elements: ArrayExpressionElement[]) {\r\n        this.type = Syntax.ArrayExpression;\r\n        this.elements = elements;\r\n    }\r\n}\r\n\r\nexport class ArrayPattern {\r\n    readonly type: string;\r\n    readonly elements: ArrayPatternElement[];\r\n    constructor(elements: ArrayPatternElement[]) {\r\n        this.type = Syntax.ArrayPattern;\r\n        this.elements = elements;\r\n    }\r\n}\r\n\r\nexport class ArrowFunctionExpression {\r\n    readonly type: string;\r\n    readonly id: Identifier | null;\r\n    readonly params: FunctionParameter[];\r\n    readonly body: BlockStatement | Expression;\r\n    readonly generator: boolean;\r\n    readonly expression: boolean;\r\n    readonly async: boolean;\r\n    constructor(params: FunctionParameter[], body: BlockStatement | Expression, expression: boolean) {\r\n        this.type = Syntax.ArrowFunctionExpression;\r\n        this.id = null;\r\n        this.params = params;\r\n        this.body = body;\r\n        this.generator = false;\r\n        this.expression = expression;\r\n        this.async = false;\r\n    }\r\n}\r\n\r\nexport class AssignmentExpression {\r\n    readonly type: string;\r\n    readonly operator: string;\r\n    readonly left: Expression;\r\n    readonly right: Expression;\r\n    constructor(operator: string, left: Expression, right: Expression) {\r\n        this.type = Syntax.AssignmentExpression;\r\n        this.operator = operator;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nexport class AssignmentPattern {\r\n    readonly type: string;\r\n    readonly left: BindingIdentifier | BindingPattern;\r\n    readonly right: Expression;\r\n    constructor(left: BindingIdentifier | BindingPattern, right: Expression) {\r\n        this.type = Syntax.AssignmentPattern;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nexport class AsyncArrowFunctionExpression {\r\n    readonly type: string;\r\n    readonly id: Identifier | null;\r\n    readonly params: FunctionParameter[];\r\n    readonly body: BlockStatement | Expression;\r\n    readonly generator: boolean;\r\n    readonly expression: boolean;\r\n    readonly async: boolean;\r\n    constructor(params: FunctionParameter[], body: BlockStatement | Expression, expression: boolean) {\r\n        this.type = Syntax.ArrowFunctionExpression;\r\n        this.id = null;\r\n        this.params = params;\r\n        this.body = body;\r\n        this.generator = false;\r\n        this.expression = expression;\r\n        this.async = true;\r\n    }\r\n}\r\n\r\nexport class AsyncFunctionDeclaration {\r\n    readonly type: string;\r\n    readonly id: Identifier | null;\r\n    readonly params: FunctionParameter[];\r\n    readonly body: BlockStatement;\r\n    readonly generator: boolean;\r\n    readonly expression: boolean;\r\n    readonly async: boolean;\r\n    constructor(id: Identifier | null, params: FunctionParameter[], body: BlockStatement) {\r\n        this.type = Syntax.FunctionDeclaration;\r\n        this.id = id;\r\n        this.params = params;\r\n        this.body = body;\r\n        this.generator = false;\r\n        this.expression = false;\r\n        this.async = true;\r\n    }\r\n}\r\n\r\nexport class AsyncFunctionExpression {\r\n    readonly type: string;\r\n    readonly id: Identifier | null;\r\n    readonly params: FunctionParameter[];\r\n    readonly body: BlockStatement;\r\n    readonly generator: boolean;\r\n    readonly expression: boolean;\r\n    readonly async: boolean;\r\n    constructor(id: Identifier | null, params: FunctionParameter[], body: BlockStatement) {\r\n        this.type = Syntax.FunctionExpression;\r\n        this.id = id;\r\n        this.params = params;\r\n        this.body = body;\r\n        this.generator = false;\r\n        this.expression = false;\r\n        this.async = true;\r\n    }\r\n}\r\n\r\nexport class AwaitExpression {\r\n    readonly type: string;\r\n    readonly argument: Expression;\r\n    constructor(argument: Expression) {\r\n        this.type = Syntax.AwaitExpression;\r\n        this.argument = argument;\r\n    }\r\n}\r\n\r\nexport class BinaryExpression {\r\n    readonly type: string;\r\n    readonly operator: string;\r\n    readonly left: Expression;\r\n    readonly right: Expression;\r\n    constructor(operator: string, left: Expression, right: Expression) {\r\n        const logical = (operator === '||' || operator === '&&');\r\n        this.type = logical ? Syntax.LogicalExpression : Syntax.BinaryExpression;\r\n        this.operator = operator;\r\n        this.left = left;\r\n        this.right = right;\r\n    }\r\n}\r\n\r\nexport class BlockStatement {\r\n    readonly type: string;\r\n    readonly body: Statement[];\r\n    constructor(body) {\r\n        this.type = Syntax.BlockStatement;\r\n        this.body = body;\r\n    }\r\n}\r\n\r\nexport class BreakStatement {\r\n    readonly type: string;\r\n    readonly label: Identifier | null;\r\n    constructor(label: Identifier | null) {\r\n        this.type = Syntax.BreakStatement;\r\n        this.label = label;\r\n    }\r\n}\r\n\r\nexport class CallExpression {\r\n    readonly type: string;\r\n    readonly callee: Expression | Import;\r\n    readonly arguments: ArgumentListElement[];\r\n    constructor(callee: Expression | Import, args: ArgumentListElement[]) {\r\n        this.type = Syntax.CallExpression;\r\n        this.callee = callee;\r\n        this.arguments = args;\r\n    }\r\n}\r\n\r\nexport class CatchClause {\r\n    readonly type: string;\r\n    readonly param: BindingIdentifier | BindingPattern;\r\n    readonly body: BlockStatement;\r\n    constructor(param: BindingIdentifier | BindingPattern, body: BlockStatement) {\r\n        this.type = Syntax.CatchClause;\r\n        this.param = param;\r\n        this.body = body;\r\n    }\r\n}\r\n\r\nexport class ClassBody {\r\n    readonly type: string;\r\n    readonly body: Property[];\r\n    constructor(body: Property[]) {\r\n        this.type = Syntax.ClassBody;\r\n        this.body = body;\r\n    }\r\n}\r\n\r\nexport class ClassDeclaration {\r\n    readonly type: string;\r\n    readonly id: Identifier | null;\r\n    readonly superClass: Identifier | null;\r\n    readonly body: ClassBody;\r\n    readonly generics: Identifier[] | null;\r\n    constructor(id: Identifier | null, superClass: Identifier | null, generics: Identifier[] | null,body: ClassBody) {\r\n        this.type = Syntax.ClassDeclaration;\r\n        this.id = id;\r\n        this.superClass = superClass;\r\n        this.generics = generics;\r\n        this.body = body;\r\n    }\r\n}\r\n\r\nexport class ClassExpression {\r\n    readonly type: string;\r\n    readonly id: Identifier | null;\r\n    readonly superClass: Identifier | null;\r\n    readonly body: ClassBody;\r\n    constructor(id: Identifier | null, superClass: Identifier | null, body: ClassBody) {\r\n        this.type = Syntax.ClassExpression;\r\n        this.id = id;\r\n        this.superClass = superClass;\r\n        this.body = body;\r\n    }\r\n}\r\n\r\nexport class ComputedMemberExpression {\r\n    readonly type: string;\r\n    readonly computed: boolean;\r\n    readonly object: Expression;\r\n    readonly property: Expression;\r\n    constructor(object: Expression, property: Expression) {\r\n        this.type = Syntax.MemberExpression;\r\n        this.computed = true;\r\n        this.object = object;\r\n        this.property = property;\r\n    }\r\n}\r\n\r\nexport class ConditionalExpression {\r\n    readonly type: string;\r\n    readonly test: Expression;\r\n    readonly consequent: Expression;\r\n    readonly alternate: Expression;\r\n    constructor(test: Expression, consequent: Expression, alternate: Expression) {\r\n        this.type = Syntax.ConditionalExpression;\r\n        this.test = test;\r\n        this.consequent = consequent;\r\n        this.alternate = alternate;\r\n    }\r\n}\r\n\r\nexport class ContinueStatement {\r\n    readonly type: string;\r\n    readonly label: Identifier | null;\r\n    constructor(label: Identifier | null) {\r\n        this.type = Syntax.ContinueStatement;\r\n        this.label = label;\r\n    }\r\n}\r\n\r\nexport class DebuggerStatement {\r\n    readonly type: string;\r\n    constructor() {\r\n        this.type = Syntax.DebuggerStatement;\r\n    }\r\n}\r\n\r\nexport class Directive {\r\n    readonly type: string;\r\n    readonly expression: Expression;\r\n    readonly directive: string;\r\n    constructor(expression: Expression, directive: string) {\r\n        this.type = Syntax.ExpressionStatement;\r\n        this.expression = expression;\r\n        this.directive = directive;\r\n    }\r\n}\r\n\r\nexport class DoWhileStatement {\r\n    readonly type: string;\r\n    readonly body: Statement;\r\n    readonly test: Expression;\r\n    constructor(body: Statement, test: Expression) {\r\n        this.type = Syntax.DoWhileStatement;\r\n        this.body = body;\r\n        this.test = test;\r\n    }\r\n}\r\n\r\nexport class EmptyStatement {\r\n    readonly type: string;\r\n    constructor() {\r\n        this.type = Syntax.EmptyStatement;\r\n    }\r\n}\r\n\r\nexport class ExportAllDeclaration {\r\n    readonly type: string;\r\n    readonly source: Literal;\r\n    constructor(source: Literal) {\r\n        this.type = Syntax.ExportAllDeclaration;\r\n        this.source = source;\r\n    }\r\n}\r\n\r\nexport class ExportDefaultDeclaration {\r\n    readonly type: string;\r\n    readonly declaration: ExportableDefaultDeclaration;\r\n    constructor(declaration: ExportableDefaultDeclaration) {\r\n        this.type = Syntax.ExportDefaultDeclaration;\r\n        this.declaration = declaration;\r\n    }\r\n}\r\n\r\nexport class ExportNamedDeclaration {\r\n    readonly type: string;\r\n    readonly declaration: ExportableNamedDeclaration | null;\r\n    readonly specifiers: ExportSpecifier[];\r\n    readonly source: Literal | null;\r\n    constructor(declaration: ExportableNamedDeclaration | null, specifiers: ExportSpecifier[], source: Literal | null) {\r\n        this.type = Syntax.ExportNamedDeclaration;\r\n        this.declaration = declaration;\r\n        this.specifiers = specifiers;\r\n        this.source = source;\r\n    }\r\n}\r\n\r\nexport class ExportSpecifier {\r\n    readonly type: string;\r\n    readonly exported: Identifier;\r\n    readonly local: Identifier;\r\n    constructor(local: Identifier, exported: Identifier) {\r\n        this.type = Syntax.ExportSpecifier;\r\n        this.exported = exported;\r\n        this.local = local;\r\n    }\r\n}\r\n\r\nexport class ExpressionStatement {\r\n    readonly type: string;\r\n    readonly expression: Expression;\r\n    constructor(expression: Expression) {\r\n        this.type = Syntax.ExpressionStatement;\r\n        this.expression = expression;\r\n    }\r\n}\r\n\r\nexport class ForInStatement {\r\n    readonly type: string;\r\n    readonly left: Expression;\r\n    readonly right: Expression;\r\n    readonly body: Statement;\r\n    readonly each: boolean;\r\n    constructor(left: Expression, right: Expression, body: Statement) {\r\n        this.type = Syntax.ForInStatement;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.body = body;\r\n        this.each = false;\r\n    }\r\n}\r\n\r\nexport class ForOfStatement {\r\n    readonly type: string;\r\n    readonly left: Expression;\r\n    readonly right: Expression;\r\n    readonly body: Statement;\r\n    constructor(left: Expression, right: Expression, body: Statement) {\r\n        this.type = Syntax.ForOfStatement;\r\n        this.left = left;\r\n        this.right = right;\r\n        this.body = body;\r\n    }\r\n}\r\n\r\nexport class ForStatement {\r\n    readonly type: string;\r\n    readonly init: Expression | null;\r\n    readonly test: Expression | null;\r\n    readonly update: Expression | null;\r\n    body: Statement;\r\n    constructor(init: Expression | null, test: Expression | null, update: Expression | null, body: Statement) {\r\n        this.type = Syntax.ForStatement;\r\n        this.init = init;\r\n        this.test = test;\r\n        this.update = update;\r\n        this.body = body;\r\n    }\r\n}\r\n\r\nexport class FunctionDeclaration {\r\n    readonly type: string;\r\n    readonly id: Identifier | null;\r\n    readonly params: FunctionParameter[];\r\n    readonly body: BlockStatement;\r\n    readonly generator: boolean;\r\n    readonly expression: boolean;\r\n    readonly async: boolean;\r\n    constructor(id: Identifier | null, params: FunctionParameter[], body: BlockStatement, generator: boolean) {\r\n        this.type = Syntax.FunctionDeclaration;\r\n        this.id = id;\r\n        this.params = params;\r\n        this.body = body;\r\n        this.generator = generator;\r\n        this.expression = false;\r\n        this.async = false;\r\n    }\r\n}\r\n\r\nexport class FunctionExpression {\r\n    readonly type: string;\r\n    readonly id: Identifier | null;\r\n    readonly params: FunctionParameter[];\r\n    readonly body: BlockStatement;\r\n    readonly generator: boolean;\r\n    readonly expression: boolean;\r\n    readonly async: boolean;\r\n    constructor(id: Identifier | null, params: FunctionParameter[], body: BlockStatement, generator: boolean) {\r\n        this.type = Syntax.FunctionExpression;\r\n        this.id = id;\r\n        this.params = params;\r\n        this.body = body;\r\n        this.generator = generator;\r\n        this.expression = false;\r\n        this.async = false;\r\n    }\r\n}\r\n\r\nexport class Identifier {\r\n    readonly type: string;\r\n    readonly name: string;\r\n    constructor(name) {\r\n        this.type = Syntax.Identifier;\r\n        this.name = name;\r\n    }\r\n}\r\n\r\nexport class IfStatement {\r\n    readonly type: string;\r\n    readonly test: Expression;\r\n    readonly consequent: Statement;\r\n    readonly alternate: Statement | null;\r\n    constructor(test: Expression, consequent: Statement, alternate: Statement | null) {\r\n        this.type = Syntax.IfStatement;\r\n        this.test = test;\r\n        this.consequent = consequent;\r\n        this.alternate = alternate;\r\n    }\r\n}\r\n\r\nexport class Import {\r\n    readonly type: string;\r\n    constructor() {\r\n        this.type = Syntax.Import;\r\n    }\r\n}\r\n\r\nexport class ImportDeclaration {\r\n    readonly type: string;\r\n    readonly specifiers: ImportDeclarationSpecifier[];\r\n    readonly source: Literal;\r\n    constructor(specifiers, source) {\r\n        this.type = Syntax.ImportDeclaration;\r\n        this.specifiers = specifiers;\r\n        this.source = source;\r\n    }\r\n}\r\n\r\nexport class ImportDefaultSpecifier {\r\n    readonly type: string;\r\n    readonly local: Identifier;\r\n    constructor(local: Identifier) {\r\n        this.type = Syntax.ImportDefaultSpecifier;\r\n        this.local = local;\r\n    }\r\n}\r\n\r\nexport class ImportNamespaceSpecifier {\r\n    readonly type: string;\r\n    readonly local: Identifier;\r\n    constructor(local: Identifier) {\r\n        this.type = Syntax.ImportNamespaceSpecifier;\r\n        this.local = local;\r\n    }\r\n}\r\n\r\nexport class ImportSpecifier {\r\n    readonly type: string;\r\n    readonly local: Identifier;\r\n    readonly imported: Identifier;\r\n    constructor(local: Identifier, imported: Identifier) {\r\n        this.type = Syntax.ImportSpecifier;\r\n        this.local = local;\r\n        this.imported = imported;\r\n    }\r\n}\r\n\r\nexport class LabeledStatement {\r\n    readonly type: string;\r\n    readonly label: Identifier;\r\n    readonly body: Statement;\r\n    constructor(label: Identifier, body: Statement) {\r\n        this.type = Syntax.LabeledStatement;\r\n        this.label = label;\r\n        this.body = body;\r\n    }\r\n}\r\n\r\nexport class Literal {\r\n    readonly type: string;\r\n    readonly value: boolean | number | string | null;\r\n    readonly raw: string;\r\n    constructor(value: boolean | number | string | null, raw: string) {\r\n        this.type = Syntax.Literal;\r\n        this.value = value;\r\n        this.raw = raw;\r\n    }\r\n}\r\n\r\nexport class MetaProperty {\r\n    readonly type: string;\r\n    readonly meta: Identifier;\r\n    readonly property: Identifier;\r\n    constructor(meta: Identifier, property: Identifier) {\r\n        this.type = Syntax.MetaProperty;\r\n        this.meta = meta;\r\n        this.property = property;\r\n    }\r\n}\r\n\r\nexport class MethodDefinition {\r\n    readonly type: string;\r\n    readonly key: Expression | null;\r\n    readonly computed: boolean;\r\n    readonly value: AsyncFunctionExpression | FunctionExpression | null;\r\n    readonly kind: string;\r\n    readonly static: boolean;\r\n    constructor(key: Expression | null, computed: boolean, value: AsyncFunctionExpression | FunctionExpression | null, kind: string, isStatic: boolean) {\r\n        this.type = Syntax.MethodDefinition;\r\n        this.key = key;\r\n        this.computed = computed;\r\n        this.value = value;\r\n        this.kind = kind;\r\n        this.static = isStatic;\r\n    }\r\n}\r\n\r\nexport class Module {\r\n    readonly type: string;\r\n    readonly body: StatementListItem[];\r\n    readonly sourceType: string;\r\n    constructor(body: StatementListItem[]) {\r\n        this.type = Syntax.Program;\r\n        this.body = body;\r\n        this.sourceType = 'module';\r\n    }\r\n}\r\n\r\nexport class NewExpression {\r\n    readonly type: string;\r\n    readonly callee: Expression;\r\n    readonly arguments: ArgumentListElement[];\r\n    constructor(callee: Expression, args: ArgumentListElement[]) {\r\n        this.type = Syntax.NewExpression;\r\n        this.callee = callee;\r\n        this.arguments = args;\r\n    }\r\n}\r\n\r\nexport class ObjectExpression {\r\n    readonly type: string;\r\n    readonly properties: ObjectExpressionProperty[];\r\n    constructor(properties: ObjectExpressionProperty[]) {\r\n        this.type = Syntax.ObjectExpression;\r\n        this.properties = properties;\r\n    }\r\n}\r\n\r\nexport class ObjectPattern {\r\n    readonly type: string;\r\n    readonly properties: ObjectPatternProperty[];\r\n    constructor(properties: ObjectPatternProperty[]) {\r\n        this.type = Syntax.ObjectPattern;\r\n        this.properties = properties;\r\n    }\r\n}\r\n\r\nexport class Property {\r\n    readonly type: string;\r\n    readonly key: PropertyKey;\r\n    readonly computed: boolean;\r\n    readonly value: PropertyValue | null;\r\n    readonly kind: string;\r\n    readonly method: boolean;\r\n    readonly shorthand: boolean;\r\n    constructor(kind: string, key: PropertyKey, computed: boolean, value: PropertyValue | null, method: boolean, shorthand: boolean) {\r\n        this.type = Syntax.Property;\r\n        this.key = key;\r\n        this.computed = computed;\r\n        this.value = value;\r\n        this.kind = kind;\r\n        this.method = method;\r\n        this.shorthand = shorthand;\r\n    }\r\n}\r\n\r\nexport class RegexLiteral {\r\n    readonly type: string;\r\n    readonly value: RegExp;\r\n    readonly raw: string;\r\n    readonly regex: { pattern: string, flags: string };\r\n    constructor(value: RegExp, raw: string, pattern: string, flags: string) {\r\n        this.type = Syntax.Literal;\r\n        this.value = value;\r\n        this.raw = raw;\r\n        this.regex = { pattern, flags };\r\n    }\r\n}\r\n\r\nexport class RestElement {\r\n    readonly type: string;\r\n    readonly argument: BindingIdentifier | BindingPattern;\r\n    constructor(argument: BindingIdentifier | BindingPattern) {\r\n        this.type = Syntax.RestElement;\r\n        this.argument = argument;\r\n    }\r\n}\r\n\r\nexport class ReturnStatement {\r\n    readonly type: string;\r\n    readonly argument: Expression | null;\r\n    constructor(argument: Expression | null) {\r\n        this.type = Syntax.ReturnStatement;\r\n        this.argument = argument;\r\n    }\r\n}\r\n\r\nexport class Script {\r\n    readonly type: string;\r\n    readonly body: StatementListItem[];\r\n    readonly sourceType: string;\r\n    constructor(body: StatementListItem[]) {\r\n        this.type = Syntax.Program;\r\n        this.body = body;\r\n        this.sourceType = 'script';\r\n    }\r\n}\r\n\r\nexport class SequenceExpression {\r\n    readonly type: string;\r\n    readonly expressions: Expression[];\r\n    constructor(expressions: Expression[]) {\r\n        this.type = Syntax.SequenceExpression;\r\n        this.expressions = expressions;\r\n    }\r\n}\r\n\r\nexport class SpreadElement {\r\n    readonly type: string;\r\n    readonly argument: Expression;\r\n    constructor(argument: Expression) {\r\n        this.type = Syntax.SpreadElement;\r\n        this.argument = argument;\r\n    }\r\n}\r\n\r\nexport class StaticMemberExpression {\r\n    readonly type: string;\r\n    readonly computed: boolean;\r\n    readonly object: Expression;\r\n    readonly property: Expression;\r\n    constructor(object: Expression, property: Expression) {\r\n        this.type = Syntax.MemberExpression;\r\n        this.computed = false;\r\n        this.object = object;\r\n        this.property = property;\r\n    }\r\n}\r\n\r\nexport class Super {\r\n    readonly type: string;\r\n    constructor() {\r\n        this.type = Syntax.Super;\r\n    }\r\n}\r\n\r\nexport class SwitchCase {\r\n    readonly type: string;\r\n    readonly test: Expression;\r\n    readonly consequent: Statement[];\r\n    constructor(test: Expression, consequent: Statement[]) {\r\n        this.type = Syntax.SwitchCase;\r\n        this.test = test;\r\n        this.consequent = consequent;\r\n    }\r\n}\r\n\r\nexport class SwitchStatement {\r\n    readonly type: string;\r\n    readonly discriminant: Expression;\r\n    readonly cases: SwitchCase[];\r\n    constructor(discriminant: Expression, cases: SwitchCase[]) {\r\n        this.type = Syntax.SwitchStatement;\r\n        this.discriminant = discriminant;\r\n        this.cases = cases;\r\n    }\r\n}\r\n\r\nexport class TaggedTemplateExpression {\r\n    readonly type: string;\r\n    readonly tag: Expression;\r\n    readonly quasi: TemplateLiteral;\r\n    constructor(tag: Expression, quasi: TemplateLiteral) {\r\n        this.type = Syntax.TaggedTemplateExpression;\r\n        this.tag = tag;\r\n        this.quasi = quasi;\r\n    }\r\n}\r\n\r\ninterface TemplateElementValue {\r\n    cooked: string;\r\n    raw: string;\r\n}\r\n\r\nexport class TemplateElement {\r\n    readonly type: string;\r\n    readonly value: TemplateElementValue;\r\n    readonly tail: boolean;\r\n    constructor(value: TemplateElementValue, tail: boolean) {\r\n        this.type = Syntax.TemplateElement;\r\n        this.value = value;\r\n        this.tail = tail;\r\n    }\r\n}\r\n\r\nexport class TemplateLiteral {\r\n    readonly type: string;\r\n    readonly quasis: TemplateElement[];\r\n    readonly expressions: Expression[];\r\n    constructor(quasis: TemplateElement[], expressions: Expression[]) {\r\n        this.type = Syntax.TemplateLiteral;\r\n        this.quasis = quasis;\r\n        this.expressions = expressions;\r\n    }\r\n}\r\n\r\nexport class ThisExpression {\r\n    readonly type: string;\r\n    constructor() {\r\n        this.type = Syntax.ThisExpression;\r\n    }\r\n}\r\n\r\nexport class ThrowStatement {\r\n    readonly type: string;\r\n    readonly argument: Expression;\r\n    constructor(argument: Expression) {\r\n        this.type = Syntax.ThrowStatement;\r\n        this.argument = argument;\r\n    }\r\n}\r\n\r\nexport class TryStatement {\r\n    readonly type: string;\r\n    readonly block: BlockStatement;\r\n    readonly handler: CatchClause | null;\r\n    readonly finalizer: BlockStatement | null;\r\n    constructor(block: BlockStatement, handler: CatchClause | null, finalizer: BlockStatement | null) {\r\n        this.type = Syntax.TryStatement;\r\n        this.block = block;\r\n        this.handler = handler;\r\n        this.finalizer = finalizer;\r\n    }\r\n}\r\n\r\nexport class UnaryExpression {\r\n    readonly type: string;\r\n    readonly operator: string;\r\n    readonly argument: Expression;\r\n    readonly prefix: boolean;\r\n    constructor(operator, argument) {\r\n        this.type = Syntax.UnaryExpression;\r\n        this.operator = operator;\r\n        this.argument = argument;\r\n        this.prefix = true;\r\n    }\r\n}\r\n\r\nexport class UpdateExpression {\r\n    readonly type: string;\r\n    readonly operator: string;\r\n    readonly argument: Expression;\r\n    readonly prefix: boolean;\r\n    constructor(operator, argument, prefix) {\r\n        this.type = Syntax.UpdateExpression;\r\n        this.operator = operator;\r\n        this.argument = argument;\r\n        this.prefix = prefix;\r\n    }\r\n}\r\n\r\nexport class VariableDeclaration {\r\n    readonly type: string;\r\n    readonly declarations: VariableDeclarator[];\r\n    readonly kind: string;\r\n    constructor(declarations: VariableDeclarator[], kind: string) {\r\n        this.type = Syntax.VariableDeclaration;\r\n        this.declarations = declarations;\r\n        this.kind = kind;\r\n    }\r\n}\r\n\r\nexport class VariableDeclarator {\r\n    readonly type: string;\r\n    readonly id: BindingIdentifier | BindingPattern;\r\n    readonly init: Expression | null;\r\n    constructor(id: BindingIdentifier | BindingPattern, init: Expression | null) {\r\n        this.type = Syntax.VariableDeclarator;\r\n        this.id = id;\r\n        this.init = init;\r\n    }\r\n}\r\n\r\nexport class WhileStatement {\r\n    readonly type: string;\r\n    readonly test: Expression;\r\n    readonly body: Statement;\r\n    constructor(test: Expression, body: Statement) {\r\n        this.type = Syntax.WhileStatement;\r\n        this.test = test;\r\n        this.body = body;\r\n    }\r\n}\r\n\r\nexport class WithStatement {\r\n    readonly type: string;\r\n    readonly object: Expression;\r\n    readonly body: Statement;\r\n    constructor(object: Expression, body: Statement) {\r\n        this.type = Syntax.WithStatement;\r\n        this.object = object;\r\n        this.body = body;\r\n    }\r\n}\r\n\r\nexport class YieldExpression {\r\n    readonly type: string;\r\n    readonly argument: Expression | null;\r\n    readonly delegate: boolean;\r\n    constructor(argument: Expression | null, delegate: boolean) {\r\n        this.type = Syntax.YieldExpression;\r\n        this.argument = argument;\r\n        this.delegate = delegate;\r\n    }\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/nodes.ts","import { assert } from './assert';\r\nimport { ErrorHandler } from './error-handler';\r\nimport { Messages } from './messages';\r\nimport * as Node from './nodes';\r\nimport { Comment, RawToken, Scanner, SourceLocation } from './scanner';\r\nimport { Syntax } from './syntax';\r\nimport { Token, TokenName } from './token';\r\n\r\ninterface Config {\r\n    range: boolean;\r\n    loc: boolean;\r\n    source: string | null;\r\n    tokens: boolean;\r\n    comment: boolean;\r\n    tolerant: boolean;\r\n}\r\n\r\ninterface Context {\r\n    isModule: boolean;\r\n    allowIn: boolean;\r\n    allowStrictDirective: boolean;\r\n    allowYield: boolean;\r\n    await: boolean;\r\n    firstCoverInitializedNameError: RawToken | null;\r\n    isAssignmentTarget: boolean;\r\n    isBindingElement: boolean;\r\n    inFunctionBody: boolean;\r\n    inIteration: boolean;\r\n    inSwitch: boolean;\r\n    labelSet: any;\r\n    strict: boolean;\r\n}\r\n\r\nexport interface Marker {\r\n    index: number;\r\n    line: number;\r\n    column: number;\r\n}\r\n\r\nconst ArrowParameterPlaceHolder = 'ArrowParameterPlaceHolder';\r\n\r\ninterface ArrowParameterPlaceHolderNode {\r\n    type: string;\r\n    params: Node.Expression[];\r\n    async: boolean;\r\n}\r\n\r\ninterface DeclarationOptions {\r\n    inFor: boolean;\r\n}\r\n\r\ninterface TokenEntry {\r\n    type: string;\r\n    value: string;\r\n    regex?: {\r\n        pattern: string;\r\n        flags: string;\r\n    };\r\n    range?: [number, number];\r\n    loc?: SourceLocation;\r\n}\r\n\r\nexport class Parser {\r\n    readonly config: Config;\r\n    readonly delegate: any;\r\n    readonly errorHandler: ErrorHandler;\r\n    readonly scanner: Scanner;\r\n    readonly operatorPrecedence: any;\r\n\r\n    lookahead: RawToken;\r\n    hasLineTerminator: boolean;\r\n\r\n    context: Context;\r\n    tokens: any[];\r\n    startMarker: Marker;\r\n    lastMarker: Marker;\r\n\r\n    constructor(code: string, options: any = {}, delegate) {\r\n        this.config = {\r\n            range: (typeof options.range === 'boolean') && options.range,\r\n            loc: (typeof options.loc === 'boolean') && options.loc,\r\n            source: null,\r\n            tokens: (typeof options.tokens === 'boolean') && options.tokens,\r\n            comment: (typeof options.comment === 'boolean') && options.comment,\r\n            tolerant: (typeof options.tolerant === 'boolean') && options.tolerant\r\n        };\r\n        if (this.config.loc && options.source && options.source !== null) {\r\n            this.config.source = String(options.source);\r\n        }\r\n\r\n        this.delegate = delegate;\r\n\r\n        this.errorHandler = new ErrorHandler();\r\n        this.errorHandler.tolerant = this.config.tolerant;\r\n        this.scanner = new Scanner(code, this.errorHandler);\r\n        this.scanner.trackComment = this.config.comment;\r\n\r\n        this.operatorPrecedence = {\r\n            ')': 0,\r\n            ';': 0,\r\n            ',': 0,\r\n            '=': 0,\r\n            ']': 0,\r\n            '||': 1,\r\n            '&&': 2,\r\n            '|': 3,\r\n            '^': 4,\r\n            '&': 5,\r\n            '==': 6,\r\n            '!=': 6,\r\n            '===': 6,\r\n            '!==': 6,\r\n            '<': 7,\r\n            '>': 7,\r\n            '<=': 7,\r\n            '>=': 7,\r\n            '<<': 8,\r\n            '>>': 8,\r\n            '>>>': 8,\r\n            '+': 9,\r\n            '-': 9,\r\n            '*': 11,\r\n            '/': 11,\r\n            '%': 11\r\n        };\r\n\r\n        this.lookahead = {\r\n            type: Token.EOF,\r\n            value: '',\r\n            lineNumber: this.scanner.lineNumber,\r\n            lineStart: 0,\r\n            start: 0,\r\n            end: 0\r\n        };\r\n        this.hasLineTerminator = false;\r\n\r\n        this.context = {\r\n            isModule: false,\r\n            await: false,\r\n            allowIn: true,\r\n            allowStrictDirective: true,\r\n            allowYield: true,\r\n            firstCoverInitializedNameError: null,\r\n            isAssignmentTarget: false,\r\n            isBindingElement: false,\r\n            inFunctionBody: false,\r\n            inIteration: false,\r\n            inSwitch: false,\r\n            labelSet: {},\r\n            strict: false\r\n        };\r\n        this.tokens = [];\r\n\r\n        this.startMarker = {\r\n            index: 0,\r\n            line: this.scanner.lineNumber,\r\n            column: 0\r\n        };\r\n        this.lastMarker = {\r\n            index: 0,\r\n            line: this.scanner.lineNumber,\r\n            column: 0\r\n        };\r\n        this.nextToken();\r\n        this.lastMarker = {\r\n            index: this.scanner.index,\r\n            line: this.scanner.lineNumber,\r\n            column: this.scanner.index - this.scanner.lineStart\r\n        };\r\n    }\r\n\r\n    throwError(messageFormat: string, ...values): void {\r\n        const args = Array.prototype.slice.call(arguments, 1);\r\n        const msg = messageFormat.replace(/%(\\d)/g, (whole, idx) => {\r\n            assert(idx < args.length, 'Message reference must be in range');\r\n            return args[idx];\r\n        }\r\n        );\r\n\r\n        const index = this.lastMarker.index;\r\n        const line = this.lastMarker.line;\r\n        const column = this.lastMarker.column + 1;\r\n        throw this.errorHandler.createError(index, line, column, msg);\r\n    }\r\n\r\n    tolerateError(messageFormat, ...values) {\r\n        const args = Array.prototype.slice.call(arguments, 1);\r\n        const msg = messageFormat.replace(/%(\\d)/g, (whole, idx) => {\r\n            assert(idx < args.length, 'Message reference must be in range');\r\n            return args[idx];\r\n        }\r\n        );\r\n\r\n        const index = this.lastMarker.index;\r\n        const line = this.scanner.lineNumber;\r\n        const column = this.lastMarker.column + 1;\r\n        this.errorHandler.tolerateError(index, line, column, msg);\r\n    }\r\n\r\n    // Throw an exception because of the token.\r\n    unexpectedTokenError(token?: any, message?: string): Error {\r\n        let msg = message || Messages.UnexpectedToken;\r\n\r\n        let value;\r\n        if (token) {\r\n            if (!message) {\r\n                msg = (token.type === Token.EOF) ? Messages.UnexpectedEOS :\r\n                    (token.type === Token.Identifier) ? Messages.UnexpectedIdentifier :\r\n                        (token.type === Token.NumericLiteral) ? Messages.UnexpectedNumber :\r\n                            (token.type === Token.StringLiteral) ? Messages.UnexpectedString :\r\n                                (token.type === Token.Template) ? Messages.UnexpectedTemplate :\r\n                                    Messages.UnexpectedToken;\r\n\r\n                if (token.type === Token.Keyword) {\r\n                    if (this.scanner.isFutureReservedWord(token.value)) {\r\n                        msg = Messages.UnexpectedReserved;\r\n                    } else if (this.context.strict && this.scanner.isStrictModeReservedWord(token.value)) {\r\n                        msg = Messages.StrictReservedWord;\r\n                    }\r\n                }\r\n            }\r\n\r\n            value = token.value;\r\n        } else {\r\n            value = 'ILLEGAL';\r\n        }\r\n\r\n        msg = msg.replace('%0', value);\r\n\r\n        if (token && typeof token.lineNumber === 'number') {\r\n            const index = token.start;\r\n            const line = token.lineNumber;\r\n            const lastMarkerLineStart = this.lastMarker.index - this.lastMarker.column;\r\n            const column = token.start - lastMarkerLineStart + 1;\r\n            return this.errorHandler.createError(index, line, column, msg);\r\n        } else {\r\n            const index = this.lastMarker.index;\r\n            const line = this.lastMarker.line;\r\n            const column = this.lastMarker.column + 1;\r\n            return this.errorHandler.createError(index, line, column, msg);\r\n        }\r\n    }\r\n\r\n    throwUnexpectedToken(token?, message?): never {\r\n        throw this.unexpectedTokenError(token, message);\r\n    }\r\n\r\n    tolerateUnexpectedToken(token?, message?) {\r\n        this.errorHandler.tolerate(this.unexpectedTokenError(token, message));\r\n    }\r\n\r\n    collectComments() {\r\n        if (!this.config.comment) {\r\n            this.scanner.scanComments();\r\n        } else {\r\n            const comments: Comment[] = this.scanner.scanComments();\r\n            if (comments.length > 0 && this.delegate) {\r\n                for (let i = 0; i < comments.length; ++i) {\r\n                    const e: Comment = comments[i];\r\n                    let node;\r\n                    node = {\r\n                        type: e.multiLine ? 'BlockComment' : 'LineComment',\r\n                        value: this.scanner.source.slice(e.slice[0], e.slice[1])\r\n                    };\r\n                    if (this.config.range) {\r\n                        node.range = e.range;\r\n                    }\r\n                    if (this.config.loc) {\r\n                        node.loc = e.loc;\r\n                    }\r\n                    const metadata = {\r\n                        start: {\r\n                            line: e.loc.start.line,\r\n                            column: e.loc.start.column,\r\n                            offset: e.range[0]\r\n                        },\r\n                        end: {\r\n                            line: e.loc.end.line,\r\n                            column: e.loc.end.column,\r\n                            offset: e.range[1]\r\n                        }\r\n                    };\r\n                    this.delegate(node, metadata);\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    // From internal representation to an external structure\r\n\r\n    getTokenRaw(token): string {\r\n        return this.scanner.source.slice(token.start, token.end);\r\n    }\r\n\r\n    convertToken(token: RawToken): TokenEntry {\r\n        const t: TokenEntry = {\r\n            type: TokenName[token.type],\r\n            value: this.getTokenRaw(token)\r\n        };\r\n        if (this.config.range) {\r\n            t.range = [token.start, token.end];\r\n        }\r\n        if (this.config.loc) {\r\n            t.loc = {\r\n                start: {\r\n                    line: this.startMarker.line,\r\n                    column: this.startMarker.column\r\n                },\r\n                end: {\r\n                    line: this.scanner.lineNumber,\r\n                    column: this.scanner.index - this.scanner.lineStart\r\n                }\r\n            };\r\n        }\r\n        if (token.type === Token.RegularExpression) {\r\n            const pattern = token.pattern as string;\r\n            const flags = token.flags as string;\r\n            t.regex = { pattern, flags };\r\n        }\r\n\r\n        return t;\r\n    }\r\n\r\n    nextToken(): RawToken {\r\n        const token = this.lookahead;\r\n\r\n        this.lastMarker.index = this.scanner.index;\r\n        this.lastMarker.line = this.scanner.lineNumber;\r\n        this.lastMarker.column = this.scanner.index - this.scanner.lineStart;\r\n\r\n        this.collectComments();\r\n\r\n        if (this.scanner.index !== this.startMarker.index) {\r\n            this.startMarker.index = this.scanner.index;\r\n            this.startMarker.line = this.scanner.lineNumber;\r\n            this.startMarker.column = this.scanner.index - this.scanner.lineStart;\r\n        }\r\n\r\n        const next = this.scanner.lex();\r\n        this.hasLineTerminator = (token.lineNumber !== next.lineNumber);\r\n\r\n        if (next && this.context.strict && next.type === Token.Identifier) {\r\n            if (this.scanner.isStrictModeReservedWord(next.value as string)) {\r\n                next.type = Token.Keyword;\r\n            }\r\n        }\r\n        this.lookahead = next;\r\n\r\n        if (this.config.tokens && next.type !== Token.EOF) {\r\n            this.tokens.push(this.convertToken(next));\r\n        }\r\n\r\n        return token;\r\n    }\r\n\r\n    nextRegexToken(): RawToken {\r\n        this.collectComments();\r\n\r\n        const token = this.scanner.scanRegExp();\r\n        if (this.config.tokens) {\r\n            // Pop the previous token, '/' or '/='\r\n            // This is added from the lookahead token.\r\n            this.tokens.pop();\r\n\r\n            this.tokens.push(this.convertToken(token));\r\n        }\r\n\r\n        // Prime the next lookahead.\r\n        this.lookahead = token;\r\n        this.nextToken();\r\n\r\n        return token;\r\n    }\r\n\r\n    createNode(): Marker {\r\n        return {\r\n            index: this.startMarker.index,\r\n            line: this.startMarker.line,\r\n            column: this.startMarker.column\r\n        };\r\n    }\r\n\r\n    startNode(token, lastLineStart = 0): Marker {\r\n        let column = token.start - token.lineStart;\r\n        let line = token.lineNumber;\r\n        if (column < 0) {\r\n            column += lastLineStart;\r\n            line--;\r\n        }\r\n        return {\r\n            index: token.start,\r\n            line: line,\r\n            column: column\r\n        };\r\n    }\r\n\r\n    finalize(marker: Marker, node) {\r\n        if (this.config.range) {\r\n            node.range = [marker.index, this.lastMarker.index];\r\n        }\r\n\r\n        if (this.config.loc) {\r\n            node.loc = {\r\n                start: {\r\n                    line: marker.line,\r\n                    column: marker.column,\r\n                },\r\n                end: {\r\n                    line: this.lastMarker.line,\r\n                    column: this.lastMarker.column\r\n                }\r\n            };\r\n            if (this.config.source) {\r\n                node.loc.source = this.config.source;\r\n            }\r\n        }\r\n\r\n        if (this.delegate) {\r\n            const metadata = {\r\n                start: {\r\n                    line: marker.line,\r\n                    column: marker.column,\r\n                    offset: marker.index\r\n                },\r\n                end: {\r\n                    line: this.lastMarker.line,\r\n                    column: this.lastMarker.column,\r\n                    offset: this.lastMarker.index\r\n                }\r\n            };\r\n            this.delegate(node, metadata);\r\n        }\r\n\r\n        return node;\r\n    }\r\n\r\n    // Expect the next token to match the specified punctuator.\r\n    // If not, an exception will be thrown.\r\n\r\n    expect(value) {\r\n        const token = this.nextToken();\r\n        if (token.type !== Token.Punctuator || token.value !== value) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n    }\r\n\r\n    // Quietly expect a comma when in tolerant mode, otherwise delegates to expect().\r\n\r\n    expectCommaSeparator() {\r\n        if (this.config.tolerant) {\r\n            const token = this.lookahead;\r\n            if (token.type === Token.Punctuator && token.value === ',') {\r\n                this.nextToken();\r\n            } else if (token.type === Token.Punctuator && token.value === ';') {\r\n                this.nextToken();\r\n                this.tolerateUnexpectedToken(token);\r\n            } else {\r\n                this.tolerateUnexpectedToken(token, Messages.UnexpectedToken);\r\n            }\r\n        } else {\r\n            this.expect(',');\r\n        }\r\n    }\r\n\r\n    // Expect the next token to match the specified keyword.\r\n    // If not, an exception will be thrown.\r\n\r\n    expectKeyword(keyword) {\r\n        const token = this.nextToken();\r\n        if (token.type !== Token.Keyword || token.value !== keyword) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n    }\r\n\r\n    // Return true if the next token matches the specified punctuator.\r\n\r\n    match(value) {\r\n        return this.lookahead.type === Token.Punctuator && this.lookahead.value === value;\r\n    }\r\n\r\n    // Return true if the next token matches the specified keyword\r\n\r\n    matchKeyword(keyword) {\r\n        return this.lookahead.type === Token.Keyword && this.lookahead.value === keyword;\r\n    }\r\n    \r\n    matchPunctuator(punctuator) {\r\n        return this.lookahead.type === Token.Punctuator && this.lookahead.value === punctuator;\r\n    }\r\n\r\n    // Return true if the next token matches the specified contextual keyword\r\n    // (where an identifier is sometimes a keyword depending on the context)\r\n\r\n    matchContextualKeyword(keyword) {\r\n        return this.lookahead.type === Token.Identifier && this.lookahead.value === keyword;\r\n    }\r\n\r\n    // Return true if the next token is an assignment operator\r\n\r\n    matchAssign() {\r\n        if (this.lookahead.type !== Token.Punctuator) {\r\n            return false;\r\n        }\r\n        const op = this.lookahead.value;\r\n        return op === '=' ||\r\n            op === '*=' ||\r\n            op === '**=' ||\r\n            op === '/=' ||\r\n            op === '%=' ||\r\n            op === '+=' ||\r\n            op === '-=' ||\r\n            op === '<<=' ||\r\n            op === '>>=' ||\r\n            op === '>>>=' ||\r\n            op === '&=' ||\r\n            op === '^=' ||\r\n            op === '|=';\r\n    }\r\n\r\n    // Cover grammar support.\r\n    //\r\n    // When an assignment expression position starts with an left parenthesis, the determination of the type\r\n    // of the syntax is to be deferred arbitrarily long until the end of the parentheses pair (plus a lookahead)\r\n    // or the first comma. This situation also defers the determination of all the expressions nested in the pair.\r\n    //\r\n    // There are three productions that can be parsed in a parentheses pair that needs to be determined\r\n    // after the outermost pair is closed. They are:\r\n    //\r\n    //   1. AssignmentExpression\r\n    //   2. BindingElements\r\n    //   3. AssignmentTargets\r\n    //\r\n    // In order to avoid exponential backtracking, we use two flags to denote if the production can be\r\n    // binding element or assignment target.\r\n    //\r\n    // The three productions have the relationship:\r\n    //\r\n    //   BindingElements ⊆ AssignmentTargets ⊆ AssignmentExpression\r\n    //\r\n    // with a single exception that CoverInitializedName when used directly in an Expression, generates\r\n    // an early error. Therefore, we need the third state, firstCoverInitializedNameError, to track the\r\n    // first usage of CoverInitializedName and report it when we reached the end of the parentheses pair.\r\n    //\r\n    // isolateCoverGrammar function runs the given parser function with a new cover grammar context, and it does not\r\n    // effect the current flags. This means the production the parser parses is only used as an expression. Therefore\r\n    // the CoverInitializedName check is conducted.\r\n    //\r\n    // inheritCoverGrammar function runs the given parse function with a new cover grammar context, and it propagates\r\n    // the flags outside of the parser. This means the production the parser parses is used as a part of a potential\r\n    // pattern. The CoverInitializedName check is deferred.\r\n\r\n    isolateCoverGrammar(parseFunction) {\r\n        const previousIsBindingElement = this.context.isBindingElement;\r\n        const previousIsAssignmentTarget = this.context.isAssignmentTarget;\r\n        const previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\r\n\r\n        this.context.isBindingElement = true;\r\n        this.context.isAssignmentTarget = true;\r\n        this.context.firstCoverInitializedNameError = null;\r\n\r\n        const result = parseFunction.call(this);\r\n        if (this.context.firstCoverInitializedNameError !== null) {\r\n            this.throwUnexpectedToken(this.context.firstCoverInitializedNameError);\r\n        }\r\n\r\n        this.context.isBindingElement = previousIsBindingElement;\r\n        this.context.isAssignmentTarget = previousIsAssignmentTarget;\r\n        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError;\r\n\r\n        return result;\r\n    }\r\n\r\n    inheritCoverGrammar(parseFunction) {\r\n        const previousIsBindingElement = this.context.isBindingElement;\r\n        const previousIsAssignmentTarget = this.context.isAssignmentTarget;\r\n        const previousFirstCoverInitializedNameError = this.context.firstCoverInitializedNameError;\r\n\r\n        this.context.isBindingElement = true;\r\n        this.context.isAssignmentTarget = true;\r\n        this.context.firstCoverInitializedNameError = null;\r\n\r\n        const result = parseFunction.call(this);\r\n\r\n        this.context.isBindingElement = this.context.isBindingElement && previousIsBindingElement;\r\n        this.context.isAssignmentTarget = this.context.isAssignmentTarget && previousIsAssignmentTarget;\r\n        this.context.firstCoverInitializedNameError = previousFirstCoverInitializedNameError || this.context.firstCoverInitializedNameError;\r\n\r\n        return result;\r\n    }\r\n\r\n    consumeSemicolon() {\r\n        if (this.match(';')) {\r\n            this.nextToken();\r\n        } else if (!this.hasLineTerminator) {\r\n            if (this.lookahead.type !== Token.EOF && !this.match('}')) {\r\n                this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n            this.lastMarker.index = this.startMarker.index;\r\n            this.lastMarker.line = this.startMarker.line;\r\n            this.lastMarker.column = this.startMarker.column;\r\n        }\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-primary-expression\r\n\r\n    parsePrimaryExpression(): Node.Expression {\r\n        const node = this.createNode();\r\n\r\n        let expr: Node.Expression;\r\n        let token, raw;\r\n\r\n        switch (this.lookahead.type) {\r\n            case Token.Identifier:\r\n                if ((this.context.isModule || this.context.await) && this.lookahead.value === 'await') {\r\n                    this.tolerateUnexpectedToken(this.lookahead);\r\n                }\r\n                expr = this.matchAsyncFunction() ? this.parseFunctionExpression() : this.finalize(node, new Node.Identifier(this.nextToken().value));\r\n                break;\r\n\r\n            case Token.NumericLiteral:\r\n            case Token.StringLiteral:\r\n                if (this.context.strict && this.lookahead.octal) {\r\n                    this.tolerateUnexpectedToken(this.lookahead, Messages.StrictOctalLiteral);\r\n                }\r\n                this.context.isAssignmentTarget = false;\r\n                this.context.isBindingElement = false;\r\n                token = this.nextToken();\r\n                raw = this.getTokenRaw(token);\r\n                expr = this.finalize(node, new Node.Literal(token.value, raw));\r\n                break;\r\n\r\n            case Token.BooleanLiteral:\r\n                this.context.isAssignmentTarget = false;\r\n                this.context.isBindingElement = false;\r\n                token = this.nextToken();\r\n                raw = this.getTokenRaw(token);\r\n                expr = this.finalize(node, new Node.Literal(token.value === 'true', raw));\r\n                break;\r\n\r\n            case Token.NullLiteral:\r\n                this.context.isAssignmentTarget = false;\r\n                this.context.isBindingElement = false;\r\n                token = this.nextToken();\r\n                raw = this.getTokenRaw(token);\r\n                expr = this.finalize(node, new Node.Literal(null, raw));\r\n                break;\r\n\r\n            case Token.Template:\r\n                expr = this.parseTemplateLiteral();\r\n                break;\r\n\r\n            case Token.Punctuator:\r\n                switch (this.lookahead.value) {\r\n                    case '(':\r\n                        this.context.isBindingElement = false;\r\n                        expr = this.inheritCoverGrammar(this.parseGroupExpression);\r\n                        break;\r\n                    case '[':\r\n                        expr = this.inheritCoverGrammar(this.parseArrayInitializer);\r\n                        break;\r\n                    case '{':\r\n                        expr = this.inheritCoverGrammar(this.parseObjectInitializer);\r\n                        break;\r\n                    case '/':\r\n                    case '/=':\r\n                        this.context.isAssignmentTarget = false;\r\n                        this.context.isBindingElement = false;\r\n                        this.scanner.index = this.startMarker.index;\r\n                        token = this.nextRegexToken();\r\n                        raw = this.getTokenRaw(token);\r\n                        expr = this.finalize(node, new Node.RegexLiteral(token.regex as RegExp, raw, token.pattern, token.flags));\r\n                        break;\r\n                    default:\r\n                        expr = this.throwUnexpectedToken(this.nextToken());\r\n                }\r\n                break;\r\n\r\n            case Token.Keyword:\r\n                if (!this.context.strict && this.context.allowYield && this.matchKeyword('yield')) {\r\n                    expr = this.parseIdentifierName();\r\n                } else if (!this.context.strict && this.matchKeyword('let')) {\r\n                    expr = this.finalize(node, new Node.Identifier(this.nextToken().value));\r\n                } else {\r\n                    this.context.isAssignmentTarget = false;\r\n                    this.context.isBindingElement = false;\r\n                    if (this.matchKeyword('function')) {\r\n                        expr = this.parseFunctionExpression();\r\n                    } else if (this.matchKeyword('this')) {\r\n                        this.nextToken();\r\n                        expr = this.finalize(node, new Node.ThisExpression());\r\n                    } else if (this.matchKeyword('class')) {\r\n                        expr = this.parseClassExpression();\r\n                    } else if (this.matchImportCall()) {\r\n                        expr = this.parseImportCall();\r\n                    } else {\r\n                        expr = this.throwUnexpectedToken(this.nextToken());\r\n                    }\r\n                }\r\n                break;\r\n\r\n            default:\r\n                expr = this.throwUnexpectedToken(this.nextToken());\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-array-initializer\r\n\r\n    parseSpreadElement(): Node.SpreadElement {\r\n        const node = this.createNode();\r\n        this.expect('...');\r\n        const arg = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n        return this.finalize(node, new Node.SpreadElement(arg));\r\n    }\r\n\r\n    parseArrayInitializer(): Node.ArrayExpression {\r\n        const node = this.createNode();\r\n        const elements: Node.ArrayExpressionElement[] = [];\r\n\r\n        this.expect('[');\r\n        while (!this.match(']')) {\r\n            if (this.match(',')) {\r\n                this.nextToken();\r\n                elements.push(null);\r\n            } else if (this.match('...')) {\r\n                const element = this.parseSpreadElement();\r\n                if (!this.match(']')) {\r\n                    this.context.isAssignmentTarget = false;\r\n                    this.context.isBindingElement = false;\r\n                    this.expect(',');\r\n                }\r\n                elements.push(element);\r\n            } else {\r\n                elements.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\r\n                if (!this.match(']')) {\r\n                    this.expect(',');\r\n                }\r\n            }\r\n        }\r\n        this.expect(']');\r\n\r\n        return this.finalize(node, new Node.ArrayExpression(elements));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-object-initializer\r\n\r\n    parsePropertyMethod(params): Node.BlockStatement {\r\n        this.context.isAssignmentTarget = false;\r\n        this.context.isBindingElement = false;\r\n\r\n        const previousStrict = this.context.strict;\r\n        const previousAllowStrictDirective = this.context.allowStrictDirective;\r\n        this.context.allowStrictDirective = params.simple;\r\n        const body = this.isolateCoverGrammar(this.parseFunctionSourceElements);\r\n        if (this.context.strict && params.firstRestricted) {\r\n            this.tolerateUnexpectedToken(params.firstRestricted, params.message);\r\n        }\r\n        if (this.context.strict && params.stricted) {\r\n            this.tolerateUnexpectedToken(params.stricted, params.message);\r\n        }\r\n        this.context.strict = previousStrict;\r\n        this.context.allowStrictDirective = previousAllowStrictDirective;\r\n\r\n        return body;\r\n    }\r\n\r\n    parsePropertyMethodFunction(): Node.FunctionExpression {\r\n        const isGenerator = false;\r\n        const node = this.createNode();\r\n\r\n        const previousAllowYield = this.context.allowYield;\r\n        this.context.allowYield = true;\r\n        const params = this.parseFormalParameters();\r\n        const method = this.parsePropertyMethod(params);\r\n        this.context.allowYield = previousAllowYield;\r\n\r\n        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\r\n    }\r\n\r\n    parsePropertyMethodAsyncFunction(): Node.FunctionExpression {\r\n        const node = this.createNode();\r\n\r\n        const previousAllowYield = this.context.allowYield;\r\n        const previousAwait = this.context.await;\r\n        this.context.allowYield = false;\r\n        this.context.await = true;\r\n        const params = this.parseFormalParameters();\r\n        const method = this.parsePropertyMethod(params);\r\n        this.context.allowYield = previousAllowYield;\r\n        this.context.await = previousAwait;\r\n\r\n        return this.finalize(node, new Node.AsyncFunctionExpression(null, params.params, method));\r\n    }\r\n\r\n    parseObjectPropertyKey(): Node.PropertyKey {\r\n        const node = this.createNode();\r\n        const token = this.nextToken();\r\n\r\n        let key: Node.PropertyKey;\r\n        switch (token.type) {\r\n            case Token.StringLiteral:\r\n            case Token.NumericLiteral:\r\n                if (this.context.strict && token.octal) {\r\n                    this.tolerateUnexpectedToken(token, Messages.StrictOctalLiteral);\r\n                }\r\n                const raw = this.getTokenRaw(token);\r\n                key = this.finalize(node, new Node.Literal(token.value as string, raw));\r\n                break;\r\n\r\n            case Token.Identifier:\r\n            case Token.BooleanLiteral:\r\n            case Token.NullLiteral:\r\n            case Token.Keyword:\r\n                key = this.finalize(node, new Node.Identifier(token.value));\r\n                break;\r\n\r\n            case Token.Punctuator:\r\n                if (token.value === '[') {\r\n                    key = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                    this.expect(']');\r\n                } else {\r\n                    key = this.throwUnexpectedToken(token);\r\n                }\r\n                break;\r\n\r\n            default:\r\n                key = this.throwUnexpectedToken(token);\r\n        }\r\n\r\n        return key;\r\n    }\r\n\r\n    isPropertyKey(key, value) {\r\n        return (key.type === Syntax.Identifier && key.name === value) ||\r\n            (key.type === Syntax.Literal && key.value === value);\r\n    }\r\n\r\n    parseObjectProperty(hasProto): Node.Property {\r\n        const node = this.createNode();\r\n        const token = this.lookahead;\r\n\r\n        let kind: string;\r\n        let key: Node.PropertyKey | null = null;\r\n        let value: Node.PropertyValue | null = null;\r\n\r\n        let computed = false;\r\n        let method = false;\r\n        let shorthand = false;\r\n        let isAsync = false;\r\n\r\n        if (token.type === Token.Identifier) {\r\n            const id = token.value;\r\n            this.nextToken();\r\n            computed = this.match('[');\r\n            isAsync = !this.hasLineTerminator && (id === 'async') &&\r\n                !this.match(':') && !this.match('(') && !this.match('*') && !this.match(',');\r\n            key = isAsync ? this.parseObjectPropertyKey() : this.finalize(node, new Node.Identifier(id));\r\n        } else if (this.match('*')) {\r\n            this.nextToken();\r\n        } else {\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n        }\r\n\r\n        const lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\r\n        if (token.type === Token.Identifier && !isAsync && token.value === 'get' && lookaheadPropertyKey) {\r\n            kind = 'get';\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n            this.context.allowYield = false;\r\n            value = this.parseGetterMethod();\r\n\r\n        } else if (token.type === Token.Identifier && !isAsync && token.value === 'set' && lookaheadPropertyKey) {\r\n            kind = 'set';\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n            value = this.parseSetterMethod();\r\n\r\n        } else if (token.type === Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\r\n            kind = 'init';\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n            value = this.parseGeneratorMethod();\r\n            method = true;\r\n\r\n        } else {\r\n            if (!key) {\r\n                this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n\r\n            kind = 'init';\r\n            if (this.match(':') && !isAsync) {\r\n                if (!computed && this.isPropertyKey(key, '__proto__')) {\r\n                    if (hasProto.value) {\r\n                        this.tolerateError(Messages.DuplicateProtoProperty);\r\n                    }\r\n                    hasProto.value = true;\r\n                }\r\n                this.nextToken();\r\n                value = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n\r\n            } else if (this.match('(')) {\r\n                value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\r\n                method = true;\r\n\r\n            } else if (token.type === Token.Identifier) {\r\n                const id = this.finalize(node, new Node.Identifier(token.value));\r\n                if (this.match('=')) {\r\n                    this.context.firstCoverInitializedNameError = this.lookahead;\r\n                    this.nextToken();\r\n                    shorthand = true;\r\n                    const init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                    value = this.finalize(node, new Node.AssignmentPattern(id, init));\r\n                } else {\r\n                    shorthand = true;\r\n                    value = id;\r\n                }\r\n            } else {\r\n                this.throwUnexpectedToken(this.nextToken());\r\n            }\r\n        }\r\n\r\n        return this.finalize(node, new Node.Property(kind, key as Node.PropertyKey, computed, value, method, shorthand));\r\n    }\r\n\r\n    parseObjectInitializer(): Node.ObjectExpression {\r\n        const node = this.createNode();\r\n\r\n        this.expect('{');\r\n        const properties: Node.ObjectExpressionProperty[] = [];\r\n        const hasProto = { value: false };\r\n        while (!this.match('}')) {\r\n            properties.push(this.match('...') ? this.parseSpreadElement() : this.parseObjectProperty(hasProto));\r\n            if (!this.match('}')) {\r\n                this.expectCommaSeparator();\r\n            }\r\n        }\r\n        this.expect('}');\r\n\r\n        return this.finalize(node, new Node.ObjectExpression(properties));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-template-literals\r\n\r\n    parseTemplateHead(): Node.TemplateElement {\r\n        assert(this.lookahead.head as boolean, 'Template literal must start with a template head');\r\n\r\n        const node = this.createNode();\r\n        const token = this.nextToken();\r\n        const raw = token.value as string;\r\n        const cooked = token.cooked as string;\r\n\r\n        return this.finalize(node, new Node.TemplateElement({ raw, cooked }, token.tail as boolean));\r\n    }\r\n\r\n    parseTemplateElement(): Node.TemplateElement {\r\n        if (this.lookahead.type !== Token.Template) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        const node = this.createNode();\r\n        const token = this.nextToken();\r\n        const raw = token.value as string;\r\n        const cooked = token.cooked as string;\r\n\r\n        return this.finalize(node, new Node.TemplateElement({ raw, cooked }, token.tail as boolean));\r\n    }\r\n\r\n    parseTemplateLiteral(): Node.TemplateLiteral {\r\n        const node = this.createNode();\r\n\r\n        const expressions: Node.Expression[] = [];\r\n        const quasis: Node.TemplateElement[] = [];\r\n\r\n        let quasi = this.parseTemplateHead();\r\n        quasis.push(quasi);\r\n        while (!quasi.tail) {\r\n            expressions.push(this.parseExpression());\r\n            quasi = this.parseTemplateElement();\r\n            quasis.push(quasi);\r\n        }\r\n\r\n        return this.finalize(node, new Node.TemplateLiteral(quasis, expressions));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-grouping-operator\r\n\r\n    reinterpretExpressionAsPattern(expr) {\r\n        switch (expr.type) {\r\n            case Syntax.Identifier:\r\n            case Syntax.MemberExpression:\r\n            case Syntax.RestElement:\r\n            case Syntax.AssignmentPattern:\r\n                break;\r\n            case Syntax.SpreadElement:\r\n                expr.type = Syntax.RestElement;\r\n                this.reinterpretExpressionAsPattern(expr.argument);\r\n                break;\r\n            case Syntax.ArrayExpression:\r\n                expr.type = Syntax.ArrayPattern;\r\n                for (let i = 0; i < expr.elements.length; i++) {\r\n                    if (expr.elements[i] !== null) {\r\n                        this.reinterpretExpressionAsPattern(expr.elements[i]);\r\n                    }\r\n                }\r\n                break;\r\n            case Syntax.ObjectExpression:\r\n                expr.type = Syntax.ObjectPattern;\r\n                for (let i = 0; i < expr.properties.length; i++) {\r\n                    const property = expr.properties[i];\r\n                    this.reinterpretExpressionAsPattern(property.type === Syntax.SpreadElement ? property : property.value);\r\n                }\r\n                break;\r\n            case Syntax.AssignmentExpression:\r\n                expr.type = Syntax.AssignmentPattern;\r\n                delete expr.operator;\r\n                this.reinterpretExpressionAsPattern(expr.left);\r\n                break;\r\n            default:\r\n                // Allow other node type for tolerant parsing.\r\n                break;\r\n        }\r\n    }\r\n\r\n    parseGroupExpression(): ArrowParameterPlaceHolderNode | Node.Expression {\r\n        let expr;\r\n\r\n        this.expect('(');\r\n        if (this.match(')')) {\r\n            this.nextToken();\r\n            if (!this.match('=>')) {\r\n                this.expect('=>');\r\n            }\r\n            expr = {\r\n                type: ArrowParameterPlaceHolder,\r\n                params: [],\r\n                async: false\r\n            };\r\n        } else {\r\n            const startToken = this.lookahead;\r\n            const params = [];\r\n            if (this.match('...')) {\r\n                expr = this.parseRestElement(params);\r\n                this.expect(')');\r\n                if (!this.match('=>')) {\r\n                    this.expect('=>');\r\n                }\r\n                expr = {\r\n                    type: ArrowParameterPlaceHolder,\r\n                    params: [expr],\r\n                    async: false\r\n                };\r\n            } else {\r\n                let arrow = false;\r\n                this.context.isBindingElement = true;\r\n                expr = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n\r\n                if (this.match(',')) {\r\n                    const expressions: Node.Expression[] = [];\r\n\r\n                    this.context.isAssignmentTarget = false;\r\n                    expressions.push(expr);\r\n                    while (this.lookahead.type !== Token.EOF) {\r\n                        if (!this.match(',')) {\r\n                            break;\r\n                        }\r\n                        this.nextToken();\r\n                        if (this.match(')')) {\r\n                            this.nextToken();\r\n                            for (let i = 0; i < expressions.length; i++) {\r\n                                this.reinterpretExpressionAsPattern(expressions[i]);\r\n                            }\r\n                            arrow = true;\r\n                            expr = {\r\n                                type: ArrowParameterPlaceHolder,\r\n                                params: expressions,\r\n                                async: false\r\n                            };\r\n                        } else if (this.match('...')) {\r\n                            if (!this.context.isBindingElement) {\r\n                                this.throwUnexpectedToken(this.lookahead);\r\n                            }\r\n                            expressions.push(this.parseRestElement(params));\r\n                            this.expect(')');\r\n                            if (!this.match('=>')) {\r\n                                this.expect('=>');\r\n                            }\r\n                            this.context.isBindingElement = false;\r\n                            for (let i = 0; i < expressions.length; i++) {\r\n                                this.reinterpretExpressionAsPattern(expressions[i]);\r\n                            }\r\n                            arrow = true;\r\n                            expr = {\r\n                                type: ArrowParameterPlaceHolder,\r\n                                params: expressions,\r\n                                async: false\r\n                            };\r\n                        } else {\r\n                            expressions.push(this.inheritCoverGrammar(this.parseAssignmentExpression));\r\n                        }\r\n                        if (arrow) {\r\n                            break;\r\n                        }\r\n                    }\r\n                    if (!arrow) {\r\n                        expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\r\n                    }\r\n                }\r\n\r\n                if (!arrow) {\r\n                    this.expect(')');\r\n                    if (this.match('=>')) {\r\n                        if (expr.type === Syntax.Identifier && expr.name === 'yield') {\r\n                            arrow = true;\r\n                            expr = {\r\n                                type: ArrowParameterPlaceHolder,\r\n                                params: [expr],\r\n                                async: false\r\n                            };\r\n                        }\r\n                        if (!arrow) {\r\n                            if (!this.context.isBindingElement) {\r\n                                this.throwUnexpectedToken(this.lookahead);\r\n                            }\r\n\r\n                            if (expr.type === Syntax.SequenceExpression) {\r\n                                for (let i = 0; i < expr.expressions.length; i++) {\r\n                                    this.reinterpretExpressionAsPattern(expr.expressions[i]);\r\n                                }\r\n                            } else {\r\n                                this.reinterpretExpressionAsPattern(expr);\r\n                            }\r\n\r\n                            const parameters = (expr.type === Syntax.SequenceExpression ? expr.expressions : [expr]);\r\n                            expr = {\r\n                                type: ArrowParameterPlaceHolder,\r\n                                params: parameters,\r\n                                async: false\r\n                            };\r\n                        }\r\n                    }\r\n                    this.context.isBindingElement = false;\r\n                }\r\n            }\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-left-hand-side-expressions\r\n\r\n    parseArguments(): Node.ArgumentListElement[] {\r\n        this.expect('(');\r\n        const args: Node.ArgumentListElement[] = [];\r\n        if (!this.match(')')) {\r\n            while (true) {\r\n                const expr = this.match('...') ? this.parseSpreadElement() :\r\n                    this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                args.push(expr);\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n                this.expectCommaSeparator();\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.expect(')');\r\n\r\n        return args;\r\n    }\r\n\r\n    isIdentifierName(token): boolean {\r\n        return token.type === Token.Identifier ||\r\n            token.type === Token.Keyword ||\r\n            token.type === Token.BooleanLiteral ||\r\n            token.type === Token.NullLiteral;\r\n    }\r\n\r\n    parseIdentifierName(): Node.Identifier {\r\n        const node = this.createNode();\r\n        const token = this.nextToken();\r\n        if (!this.isIdentifierName(token)) {\r\n            this.throwUnexpectedToken(token);\r\n        }\r\n        return this.finalize(node, new Node.Identifier(token.value));\r\n    }\r\n\r\n    parseNewExpression(): Node.MetaProperty | Node.NewExpression {\r\n        const node = this.createNode();\r\n\r\n        const id = this.parseIdentifierName();\r\n        assert(id.name === 'new', 'New expression must start with `new`');\r\n\r\n        let expr;\r\n        if (this.match('.')) {\r\n            this.nextToken();\r\n            if (this.lookahead.type === Token.Identifier && this.context.inFunctionBody && this.lookahead.value === 'target') {\r\n                const property = this.parseIdentifierName();\r\n                expr = new Node.MetaProperty(id, property);\r\n            } else {\r\n                this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n        } else if (this.matchKeyword('import')) {\r\n            this.throwUnexpectedToken(this.lookahead);\r\n        } else {\r\n            const callee = this.isolateCoverGrammar(this.parseLeftHandSideExpression);\r\n            const args = this.match('(') ? this.parseArguments() : [];\r\n            expr = new Node.NewExpression(callee, args);\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n        }\r\n\r\n        return this.finalize(node, expr);\r\n    }\r\n\r\n    parseAsyncArgument() {\r\n        const arg = this.parseAssignmentExpression();\r\n        this.context.firstCoverInitializedNameError = null;\r\n        return arg;\r\n    }\r\n\r\n    parseAsyncArguments(): Node.ArgumentListElement[] {\r\n        this.expect('(');\r\n        const args: Node.ArgumentListElement[] = [];\r\n        if (!this.match(')')) {\r\n            while (true) {\r\n                const expr = this.match('...') ? this.parseSpreadElement() :\r\n                    this.isolateCoverGrammar(this.parseAsyncArgument);\r\n                args.push(expr);\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n                this.expectCommaSeparator();\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.expect(')');\r\n\r\n        return args;\r\n    }\r\n\r\n    matchImportCall(): boolean {\r\n        let match = this.matchKeyword('import');\r\n        if (match) {\r\n            const state = this.scanner.saveState();\r\n            this.scanner.scanComments();\r\n            const next = this.scanner.lex();\r\n            this.scanner.restoreState(state);\r\n            match = (next.type === Token.Punctuator) && (next.value === '(');\r\n        }\r\n\r\n        return match;\r\n    }\r\n\r\n    parseImportCall(): Node.Import {\r\n        const node = this.createNode();\r\n        this.expectKeyword('import');\r\n        return this.finalize(node, new Node.Import());\r\n    }\r\n\r\n    parseLeftHandSideExpressionAllowCall(): Node.Expression {\r\n        const startToken = this.lookahead;\r\n        const maybeAsync = this.matchContextualKeyword('async');\r\n\r\n        const previousAllowIn = this.context.allowIn;\r\n        this.context.allowIn = true;\r\n\r\n        let expr;\r\n        if (this.matchKeyword('super') && this.context.inFunctionBody) {\r\n            expr = this.createNode();\r\n            this.nextToken();\r\n            expr = this.finalize(expr, new Node.Super());\r\n            if (!this.match('(') && !this.match('.') && !this.match('[')) {\r\n                this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n        } else {\r\n            expr = this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\r\n        }\r\n\r\n        while (true) {\r\n            if (this.match('.')) {\r\n                this.context.isBindingElement = false;\r\n                this.context.isAssignmentTarget = true;\r\n                this.expect('.');\r\n                const property = this.parseIdentifierName();\r\n                expr = this.finalize(this.startNode(startToken), new Node.StaticMemberExpression(expr, property));\r\n\r\n            } else if (this.match('(')) {\r\n                const asyncArrow = maybeAsync && (startToken.lineNumber === this.lookahead.lineNumber);\r\n                this.context.isBindingElement = false;\r\n                this.context.isAssignmentTarget = false;\r\n                const args = asyncArrow ? this.parseAsyncArguments() : this.parseArguments();\r\n                if (expr.type === Syntax.Import && args.length !== 1) {\r\n                    this.tolerateError(Messages.BadImportCallArity);\r\n                }\r\n                expr = this.finalize(this.startNode(startToken), new Node.CallExpression(expr, args));\r\n                if (asyncArrow && this.match('=>')) {\r\n                    for (let i = 0; i < args.length; ++i) {\r\n                        this.reinterpretExpressionAsPattern(args[i]);\r\n                    }\r\n                    expr = {\r\n                        type: ArrowParameterPlaceHolder,\r\n                        params: args,\r\n                        async: true\r\n                    };\r\n                }\r\n            } else if (this.match('[')) {\r\n                this.context.isBindingElement = false;\r\n                this.context.isAssignmentTarget = true;\r\n                this.expect('[');\r\n                const property = this.isolateCoverGrammar(this.parseExpression);\r\n                this.expect(']');\r\n                expr = this.finalize(this.startNode(startToken), new Node.ComputedMemberExpression(expr, property));\r\n\r\n            } else if (this.lookahead.type === Token.Template && this.lookahead.head) {\r\n                const quasi = this.parseTemplateLiteral();\r\n                expr = this.finalize(this.startNode(startToken), new Node.TaggedTemplateExpression(expr, quasi));\r\n\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n        this.context.allowIn = previousAllowIn;\r\n\r\n        return expr;\r\n    }\r\n\r\n    parseSuper(): Node.Super {\r\n        const node = this.createNode();\r\n\r\n        this.expectKeyword('super');\r\n        if (!this.match('[') && !this.match('.')) {\r\n            this.throwUnexpectedToken(this.lookahead);\r\n        }\r\n\r\n        return this.finalize(node, new Node.Super());\r\n    }\r\n\r\n    parseLeftHandSideExpression(): Node.Expression {\r\n        assert(this.context.allowIn, 'callee of new expression always allow in keyword.');\r\n\r\n        const node = this.startNode(this.lookahead);\r\n        let expr = (this.matchKeyword('super') && this.context.inFunctionBody) ? this.parseSuper() :\r\n            this.inheritCoverGrammar(this.matchKeyword('new') ? this.parseNewExpression : this.parsePrimaryExpression);\r\n\r\n        while (true) {\r\n            if (this.match('[')) {\r\n                this.context.isBindingElement = false;\r\n                this.context.isAssignmentTarget = true;\r\n                this.expect('[');\r\n                const property = this.isolateCoverGrammar(this.parseExpression);\r\n                this.expect(']');\r\n                expr = this.finalize(node, new Node.ComputedMemberExpression(expr, property));\r\n\r\n            } else if (this.match('.')) {\r\n                this.context.isBindingElement = false;\r\n                this.context.isAssignmentTarget = true;\r\n                this.expect('.');\r\n                const property = this.parseIdentifierName();\r\n                expr = this.finalize(node, new Node.StaticMemberExpression(expr, property));\r\n\r\n            } else if (this.lookahead.type === Token.Template && this.lookahead.head) {\r\n                const quasi = this.parseTemplateLiteral();\r\n                expr = this.finalize(node, new Node.TaggedTemplateExpression(expr, quasi));\r\n\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-update-expressions\r\n\r\n    parseUpdateExpression(): Node.Expression {\r\n        let expr;\r\n        const startToken = this.lookahead;\r\n\r\n        if (this.match('++') || this.match('--')) {\r\n            const node = this.startNode(startToken);\r\n            const token = this.nextToken();\r\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\r\n            if (this.context.strict && expr.type === Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\r\n                this.tolerateError(Messages.StrictLHSPrefix);\r\n            }\r\n            if (!this.context.isAssignmentTarget) {\r\n                this.tolerateError(Messages.InvalidLHSInAssignment);\r\n            }\r\n            const prefix = true;\r\n            expr = this.finalize(node, new Node.UpdateExpression(token.value, expr, prefix));\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n        } else {\r\n            expr = this.inheritCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\r\n            if (!this.hasLineTerminator && this.lookahead.type === Token.Punctuator) {\r\n                if (this.match('++') || this.match('--')) {\r\n                    if (this.context.strict && expr.type === Syntax.Identifier && this.scanner.isRestrictedWord(expr.name)) {\r\n                        this.tolerateError(Messages.StrictLHSPostfix);\r\n                    }\r\n                    if (!this.context.isAssignmentTarget) {\r\n                        this.tolerateError(Messages.InvalidLHSInAssignment);\r\n                    }\r\n                    this.context.isAssignmentTarget = false;\r\n                    this.context.isBindingElement = false;\r\n                    const operator = this.nextToken().value;\r\n                    const prefix = false;\r\n                    expr = this.finalize(this.startNode(startToken), new Node.UpdateExpression(operator, expr, prefix));\r\n                }\r\n            }\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-unary-operators\r\n\r\n    parseAwaitExpression(): Node.AwaitExpression {\r\n        const node = this.createNode();\r\n        this.nextToken();\r\n        const argument = this.parseUnaryExpression();\r\n        return this.finalize(node, new Node.AwaitExpression(argument));\r\n    }\r\n\r\n    parseUnaryExpression(): Node.Expression {\r\n        let expr;\r\n\r\n        if (this.match('+') || this.match('-') || this.match('~') || this.match('!') ||\r\n            this.matchKeyword('delete') || this.matchKeyword('void') || this.matchKeyword('typeof')) {\r\n            const node = this.startNode(this.lookahead);\r\n            const token = this.nextToken();\r\n            expr = this.inheritCoverGrammar(this.parseUnaryExpression);\r\n            expr = this.finalize(node, new Node.UnaryExpression(token.value, expr));\r\n            if (this.context.strict && expr.operator === 'delete' && expr.argument.type === Syntax.Identifier) {\r\n                this.tolerateError(Messages.StrictDelete);\r\n            }\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n        } else if (this.context.await && this.matchContextualKeyword('await')) {\r\n            expr = this.parseAwaitExpression();\r\n        } else {\r\n            expr = this.parseUpdateExpression();\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    parseExponentiationExpression(): Node.Expression {\r\n        const startToken = this.lookahead;\r\n\r\n        let expr = this.inheritCoverGrammar(this.parseUnaryExpression);\r\n        if (expr.type !== Syntax.UnaryExpression && this.match('**')) {\r\n            this.nextToken();\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n            const left = expr;\r\n            const right = this.isolateCoverGrammar(this.parseExponentiationExpression);\r\n            expr = this.finalize(this.startNode(startToken), new Node.BinaryExpression('**', left, right));\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-exp-operator\r\n    // https://tc39.github.io/ecma262/#sec-multiplicative-operators\r\n    // https://tc39.github.io/ecma262/#sec-additive-operators\r\n    // https://tc39.github.io/ecma262/#sec-bitwise-shift-operators\r\n    // https://tc39.github.io/ecma262/#sec-relational-operators\r\n    // https://tc39.github.io/ecma262/#sec-equality-operators\r\n    // https://tc39.github.io/ecma262/#sec-binary-bitwise-operators\r\n    // https://tc39.github.io/ecma262/#sec-binary-logical-operators\r\n\r\n    binaryPrecedence(token): number {\r\n        const op = token.value;\r\n        let precedence;\r\n        if (token.type === Token.Punctuator) {\r\n            precedence = this.operatorPrecedence[op] || 0;\r\n        } else if (token.type === Token.Keyword) {\r\n            precedence = (op === 'instanceof' || (this.context.allowIn && op === 'in')) ? 7 : 0;\r\n        } else {\r\n            precedence = 0;\r\n        }\r\n        return precedence;\r\n    }\r\n\r\n    parseBinaryExpression(): Node.Expression {\r\n        const startToken = this.lookahead;\r\n\r\n        let expr = this.inheritCoverGrammar(this.parseExponentiationExpression);\r\n\r\n        const token = this.lookahead;\r\n        let prec = this.binaryPrecedence(token);\r\n        if (prec > 0) {\r\n            this.nextToken();\r\n\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n\r\n            const markers = [startToken, this.lookahead];\r\n            let left = expr;\r\n            let right = this.isolateCoverGrammar(this.parseExponentiationExpression);\r\n\r\n            const stack = [left, token.value, right];\r\n            const precedences: number[] = [prec];\r\n            while (true) {\r\n                prec = this.binaryPrecedence(this.lookahead);\r\n                if (prec <= 0) {\r\n                    break;\r\n                }\r\n\r\n                // Reduce: make a binary expression from the three topmost entries.\r\n                while ((stack.length > 2) && (prec <= precedences[precedences.length - 1])) {\r\n                    right = stack.pop();\r\n                    const operator = stack.pop();\r\n                    precedences.pop();\r\n                    left = stack.pop();\r\n                    markers.pop();\r\n                    const node = this.startNode(markers[markers.length - 1]);\r\n                    stack.push(this.finalize(node, new Node.BinaryExpression(operator, left, right)));\r\n                }\r\n\r\n                // Shift.\r\n                stack.push(this.nextToken().value);\r\n                precedences.push(prec);\r\n                markers.push(this.lookahead);\r\n                stack.push(this.isolateCoverGrammar(this.parseExponentiationExpression));\r\n            }\r\n\r\n            // Final reduce to clean-up the stack.\r\n            let i = stack.length - 1;\r\n            expr = stack[i];\r\n\r\n            let lastMarker = markers.pop();\r\n            while (i > 1) {\r\n                const marker = markers.pop();\r\n                const lastLineStart = lastMarker && lastMarker.lineStart;\r\n                const node = this.startNode(marker, lastLineStart);\r\n                const operator = stack[i - 1];\r\n                expr = this.finalize(node, new Node.BinaryExpression(operator, stack[i - 2], expr));\r\n                i -= 2;\r\n                lastMarker = marker;\r\n            }\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-conditional-operator\r\n\r\n    parseConditionalExpression(): Node.Expression {\r\n        const startToken = this.lookahead;\r\n\r\n        let expr = this.inheritCoverGrammar(this.parseBinaryExpression);\r\n        if (this.match('?')) {\r\n            this.nextToken();\r\n\r\n            const previousAllowIn = this.context.allowIn;\r\n            this.context.allowIn = true;\r\n            const consequent = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n            this.context.allowIn = previousAllowIn;\r\n\r\n            this.expect(':');\r\n            const alternate = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\r\n            expr = this.finalize(this.startNode(startToken), new Node.ConditionalExpression(expr, consequent, alternate));\r\n            this.context.isAssignmentTarget = false;\r\n            this.context.isBindingElement = false;\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-assignment-operators\r\n\r\n    checkPatternParam(options, param) {\r\n        switch (param.type) {\r\n            case Syntax.Identifier:\r\n                this.validateParam(options, param, param.name);\r\n                break;\r\n            case Syntax.RestElement:\r\n                this.checkPatternParam(options, param.argument);\r\n                break;\r\n            case Syntax.AssignmentPattern:\r\n                this.checkPatternParam(options, param.left);\r\n                break;\r\n            case Syntax.ArrayPattern:\r\n                for (let i = 0; i < param.elements.length; i++) {\r\n                    if (param.elements[i] !== null) {\r\n                        this.checkPatternParam(options, param.elements[i]);\r\n                    }\r\n                }\r\n                break;\r\n            case Syntax.ObjectPattern:\r\n                for (let i = 0; i < param.properties.length; i++) {\r\n                    const property = param.properties[i];\r\n                    this.checkPatternParam(options, (property.type === Syntax.RestElement) ? property : property.value);\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n        options.simple = options.simple && (param instanceof Node.Identifier);\r\n    }\r\n\r\n    reinterpretAsCoverFormalsList(expr) {\r\n        let params = [expr];\r\n        let options;\r\n\r\n        let asyncArrow = false;\r\n        switch (expr.type) {\r\n            case Syntax.Identifier:\r\n                break;\r\n            case ArrowParameterPlaceHolder:\r\n                params = expr.params;\r\n                asyncArrow = expr.async;\r\n                break;\r\n            default:\r\n                return null;\r\n        }\r\n\r\n        options = {\r\n            simple: true,\r\n            paramSet: {}\r\n        };\r\n\r\n        for (let i = 0; i < params.length; ++i) {\r\n            const param = params[i];\r\n            if (param.type === Syntax.AssignmentPattern) {\r\n                if (param.right.type === Syntax.YieldExpression) {\r\n                    if (param.right.argument) {\r\n                        this.throwUnexpectedToken(this.lookahead);\r\n                    }\r\n                    param.right.type = Syntax.Identifier;\r\n                    param.right.name = 'yield';\r\n                    delete param.right.argument;\r\n                    delete param.right.delegate;\r\n                }\r\n            } else if (asyncArrow && param.type === Syntax.Identifier && param.name === 'await') {\r\n                this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n            this.checkPatternParam(options, param);\r\n            params[i] = param;\r\n        }\r\n\r\n        if (this.context.strict || !this.context.allowYield) {\r\n            for (let i = 0; i < params.length; ++i) {\r\n                const param = params[i];\r\n                if (param.type === Syntax.YieldExpression) {\r\n                    this.throwUnexpectedToken(this.lookahead);\r\n                }\r\n            }\r\n        }\r\n\r\n        if (options.message === Messages.StrictParamDupe) {\r\n            const token = this.context.strict ? options.stricted : options.firstRestricted;\r\n            this.throwUnexpectedToken(token, options.message);\r\n        }\r\n\r\n        return {\r\n            simple: options.simple,\r\n            params: params,\r\n            stricted: options.stricted,\r\n            firstRestricted: options.firstRestricted,\r\n            message: options.message\r\n        };\r\n    }\r\n\r\n    parseAssignmentExpression(): Node.Expression {\r\n        let expr;\r\n\r\n        if (!this.context.allowYield && this.matchKeyword('yield')) {\r\n            expr = this.parseYieldExpression();\r\n        } else {\r\n            const startToken = this.lookahead;\r\n            let token = startToken;\r\n            expr = this.parseConditionalExpression();\r\n\r\n            if (token.type === Token.Identifier && (token.lineNumber === this.lookahead.lineNumber) && token.value === 'async') {\r\n                if (this.lookahead.type === Token.Identifier || this.matchKeyword('yield')) {\r\n                    const arg = this.parsePrimaryExpression();\r\n                    this.reinterpretExpressionAsPattern(arg);\r\n                    expr = {\r\n                        type: ArrowParameterPlaceHolder,\r\n                        params: [arg],\r\n                        async: true\r\n                    };\r\n                }\r\n            }\r\n\r\n            if (expr.type === ArrowParameterPlaceHolder || this.match('=>')) {\r\n\r\n                // https://tc39.github.io/ecma262/#sec-arrow-function-definitions\r\n                this.context.isAssignmentTarget = false;\r\n                this.context.isBindingElement = false;\r\n                const isAsync = expr.async;\r\n                const list = this.reinterpretAsCoverFormalsList(expr);\r\n\r\n                if (list) {\r\n                    if (this.hasLineTerminator) {\r\n                        this.tolerateUnexpectedToken(this.lookahead);\r\n                    }\r\n                    this.context.firstCoverInitializedNameError = null;\r\n\r\n                    const previousStrict = this.context.strict;\r\n                    const previousAllowStrictDirective = this.context.allowStrictDirective;\r\n                    this.context.allowStrictDirective = list.simple;\r\n\r\n                    const previousAllowYield = this.context.allowYield;\r\n                    const previousAwait = this.context.await;\r\n                    this.context.allowYield = true;\r\n                    this.context.await = isAsync;\r\n\r\n                    const node = this.startNode(startToken);\r\n                    this.expect('=>');\r\n                    let body: Node.BlockStatement | Node.Expression;\r\n                    if (this.match('{')) {\r\n                        const previousAllowIn = this.context.allowIn;\r\n                        this.context.allowIn = true;\r\n                        body = this.parseFunctionSourceElements();\r\n                        this.context.allowIn = previousAllowIn;\r\n                    } else {\r\n                        body = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                    }\r\n                    const expression = body.type !== Syntax.BlockStatement;\r\n\r\n                    if (this.context.strict && list.firstRestricted) {\r\n                        this.throwUnexpectedToken(list.firstRestricted, list.message);\r\n                    }\r\n                    if (this.context.strict && list.stricted) {\r\n                        this.tolerateUnexpectedToken(list.stricted, list.message);\r\n                    }\r\n                    expr = isAsync ? this.finalize(node, new Node.AsyncArrowFunctionExpression(list.params, body, expression)) :\r\n                        this.finalize(node, new Node.ArrowFunctionExpression(list.params, body, expression));\r\n\r\n                    this.context.strict = previousStrict;\r\n                    this.context.allowStrictDirective = previousAllowStrictDirective;\r\n                    this.context.allowYield = previousAllowYield;\r\n                    this.context.await = previousAwait;\r\n                }\r\n            } else {\r\n\r\n                if (this.matchAssign()) {\r\n                    if (!this.context.isAssignmentTarget) {\r\n                        this.tolerateError(Messages.InvalidLHSInAssignment);\r\n                    }\r\n\r\n                    if (this.context.strict && expr.type === Syntax.Identifier) {\r\n                        const id = expr as Node.Identifier;\r\n                        if (this.scanner.isRestrictedWord(id.name)) {\r\n                            this.tolerateUnexpectedToken(token, Messages.StrictLHSAssignment);\r\n                        }\r\n                        if (this.scanner.isStrictModeReservedWord(id.name)) {\r\n                            this.tolerateUnexpectedToken(token, Messages.StrictReservedWord);\r\n                        }\r\n                    }\r\n\r\n                    if (!this.match('=')) {\r\n                        this.context.isAssignmentTarget = false;\r\n                        this.context.isBindingElement = false;\r\n                    } else {\r\n                        this.reinterpretExpressionAsPattern(expr);\r\n                    }\r\n\r\n                    token = this.nextToken();\r\n                    const operator = token.value as string;\r\n                    const right = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                    expr = this.finalize(this.startNode(startToken), new Node.AssignmentExpression(operator, expr, right));\r\n                    this.context.firstCoverInitializedNameError = null;\r\n                }\r\n            }\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-comma-operator\r\n\r\n    parseExpression(): Node.Expression | Node.SequenceExpression {\r\n        const startToken = this.lookahead;\r\n        let expr = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n\r\n        if (this.match(',')) {\r\n            const expressions: Node.Expression[] = [];\r\n            expressions.push(expr);\r\n            while (this.lookahead.type !== Token.EOF) {\r\n                if (!this.match(',')) {\r\n                    break;\r\n                }\r\n                this.nextToken();\r\n                expressions.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\r\n            }\r\n\r\n            expr = this.finalize(this.startNode(startToken), new Node.SequenceExpression(expressions));\r\n        }\r\n\r\n        return expr;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-block\r\n\r\n    parseStatementListItem(): Node.StatementListItem {\r\n        let statement: Node.StatementListItem;\r\n        this.context.isAssignmentTarget = true;\r\n        this.context.isBindingElement = true;\r\n        if (this.lookahead.type === Token.Keyword) {\r\n            switch (this.lookahead.value) {\r\n                case 'export':\r\n                    if (!this.context.isModule) {\r\n                        this.tolerateUnexpectedToken(this.lookahead, Messages.IllegalExportDeclaration);\r\n                    }\r\n                    statement = this.parseExportDeclaration();\r\n                    break;\r\n                case 'import':\r\n                    if (this.matchImportCall()) {\r\n                        statement = this.parseExpressionStatement();\r\n                    } else {\r\n                        if (!this.context.isModule) {\r\n                            this.tolerateUnexpectedToken(this.lookahead, Messages.IllegalImportDeclaration);\r\n                        }\r\n                        statement = this.parseImportDeclaration();\r\n                    }\r\n                    break;\r\n                case 'const':\r\n                    statement = this.parseLexicalDeclaration({ inFor: false });\r\n                    break;\r\n                case 'function':\r\n                    statement = this.parseFunctionDeclaration();\r\n                    break;\r\n                case 'class':\r\n                    statement = this.parseClassDeclaration();\r\n                    break;\r\n                case 'let':\r\n                    statement = this.isLexicalDeclaration() ? this.parseLexicalDeclaration({ inFor: false }) : this.parseStatement();\r\n                    break;\r\n                default:\r\n                    statement = this.parseStatement();\r\n                    break;\r\n            }\r\n        } else {\r\n            statement = this.parseStatement();\r\n        }\r\n\r\n        return statement;\r\n    }\r\n\r\n    parseBlock(): Node.BlockStatement {\r\n        const node = this.createNode();\r\n\r\n        this.expect('{');\r\n        const block: Node.StatementListItem[] = [];\r\n        while (true) {\r\n            if (this.match('}')) {\r\n                break;\r\n            }\r\n            block.push(this.parseStatementListItem());\r\n        }\r\n        this.expect('}');\r\n\r\n        return this.finalize(node, new Node.BlockStatement(block));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-let-and-const-declarations\r\n\r\n    parseLexicalBinding(kind: string, options): Node.VariableDeclarator {\r\n        const node = this.createNode();\r\n        const params = [];\r\n        const id = this.parsePattern(params, kind);\r\n\r\n        if (this.context.strict && id.type === Syntax.Identifier) {\r\n            if (this.scanner.isRestrictedWord((id as Node.Identifier).name)) {\r\n                this.tolerateError(Messages.StrictVarName);\r\n            }\r\n        }\r\n\r\n        let init: Node.Expression | null = null;\r\n        if (kind === 'const') {\r\n            if (!this.matchKeyword('in') && !this.matchContextualKeyword('of')) {\r\n                if (this.match('=')) {\r\n                    this.nextToken();\r\n                    init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n                } else {\r\n                    this.throwError(Messages.DeclarationMissingInitializer, 'const');\r\n                }\r\n            }\r\n        } else if ((!options.inFor && id.type !== Syntax.Identifier) || this.match('=')) {\r\n            this.expect('=');\r\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n        }\r\n\r\n        return this.finalize(node, new Node.VariableDeclarator(id, init));\r\n    }\r\n\r\n    parseBindingList(kind: string, options): Node.VariableDeclarator[] {\r\n        const list = [this.parseLexicalBinding(kind, options)];\r\n\r\n        while (this.match(',')) {\r\n            this.nextToken();\r\n            list.push(this.parseLexicalBinding(kind, options));\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    isLexicalDeclaration(): boolean {\r\n        const state = this.scanner.saveState();\r\n        this.scanner.scanComments();\r\n        const next = this.scanner.lex();\r\n        this.scanner.restoreState(state);\r\n\r\n        return (next.type === Token.Identifier) ||\r\n            (next.type === Token.Punctuator && next.value === '[') ||\r\n            (next.type === Token.Punctuator && next.value === '{') ||\r\n            (next.type === Token.Keyword && next.value === 'let') ||\r\n            (next.type === Token.Keyword && next.value === 'yield');\r\n    }\r\n\r\n    parseLexicalDeclaration(options): Node.VariableDeclaration {\r\n        const node = this.createNode();\r\n        const kind = this.nextToken().value as string;\r\n        assert(kind === 'let' || kind === 'const', 'Lexical declaration must be either let or const');\r\n\r\n        const declarations = this.parseBindingList(kind, options);\r\n        this.consumeSemicolon();\r\n\r\n        return this.finalize(node, new Node.VariableDeclaration(declarations, kind));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-destructuring-binding-patterns\r\n\r\n    parseBindingRestElement(params, kind?: string): Node.RestElement {\r\n        const node = this.createNode();\r\n\r\n        this.expect('...');\r\n        const arg = this.parsePattern(params, kind);\r\n\r\n        return this.finalize(node, new Node.RestElement(arg));\r\n    }\r\n\r\n    parseArrayPattern(params, kind?: string): Node.ArrayPattern {\r\n        const node = this.createNode();\r\n\r\n        this.expect('[');\r\n        const elements: Node.ArrayPatternElement[] = [];\r\n        while (!this.match(']')) {\r\n            if (this.match(',')) {\r\n                this.nextToken();\r\n                elements.push(null);\r\n            } else {\r\n                if (this.match('...')) {\r\n                    elements.push(this.parseBindingRestElement(params, kind));\r\n                    break;\r\n                } else {\r\n                    elements.push(this.parsePatternWithDefault(params, kind));\r\n                }\r\n                if (!this.match(']')) {\r\n                    this.expect(',');\r\n                }\r\n            }\r\n\r\n        }\r\n        this.expect(']');\r\n\r\n        return this.finalize(node, new Node.ArrayPattern(elements));\r\n    }\r\n\r\n    parsePropertyPattern(params, kind?: string): Node.Property {\r\n        const node = this.createNode();\r\n\r\n        let computed = false;\r\n        let shorthand = false;\r\n        const method = false;\r\n\r\n        let key: Node.PropertyKey | null;\r\n        let value: Node.PropertyValue;\r\n\r\n        if (this.lookahead.type === Token.Identifier) {\r\n            const keyToken = this.lookahead;\r\n            key = this.parseVariableIdentifier();\r\n            const init = this.finalize(node, new Node.Identifier(keyToken.value));\r\n            if (this.match('=')) {\r\n                params.push(keyToken);\r\n                shorthand = true;\r\n                this.nextToken();\r\n                const expr = this.parseAssignmentExpression();\r\n                value = this.finalize(this.startNode(keyToken), new Node.AssignmentPattern(init, expr));\r\n            } else if (!this.match(':')) {\r\n                params.push(keyToken);\r\n                shorthand = true;\r\n                value = init;\r\n            } else {\r\n                this.expect(':');\r\n                value = this.parsePatternWithDefault(params, kind);\r\n            }\r\n        } else {\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n            this.expect(':');\r\n            value = this.parsePatternWithDefault(params, kind);\r\n        }\r\n\r\n        return this.finalize(node, new Node.Property('init', key, computed, value, method, shorthand));\r\n    }\r\n\r\n    parseRestProperty(params, kind): Node.RestElement {\r\n        const node = this.createNode();\r\n        this.expect('...');\r\n        const arg = this.parsePattern(params);\r\n        if (this.match('=')) {\r\n            this.throwError(Messages.DefaultRestProperty);\r\n        }\r\n        if (!this.match('}')) {\r\n            this.throwError(Messages.PropertyAfterRestProperty);\r\n        }\r\n        return this.finalize(node, new Node.RestElement(arg));\r\n    }\r\n\r\n    parseObjectPattern(params, kind?: string): Node.ObjectPattern {\r\n        const node = this.createNode();\r\n        const properties: Node.ObjectPatternProperty[] = [];\r\n\r\n        this.expect('{');\r\n        while (!this.match('}')) {\r\n            properties.push(this.match('...') ? this.parseRestProperty(params, kind) : this.parsePropertyPattern(params, kind));\r\n            if (!this.match('}')) {\r\n                this.expect(',');\r\n            }\r\n        }\r\n        this.expect('}');\r\n\r\n        return this.finalize(node, new Node.ObjectPattern(properties));\r\n    }\r\n\r\n    parsePattern(params, kind?: string): Node.BindingIdentifier | Node.BindingPattern {\r\n        let pattern;\r\n\r\n        if (this.match('[')) {\r\n            pattern = this.parseArrayPattern(params, kind);\r\n        } else if (this.match('{')) {\r\n            pattern = this.parseObjectPattern(params, kind);\r\n        } else {\r\n            if (this.matchKeyword('let') && (kind === 'const' || kind === 'let')) {\r\n                this.tolerateUnexpectedToken(this.lookahead, Messages.LetInLexicalBinding);\r\n            }\r\n            params.push(this.lookahead);\r\n            pattern = this.parseVariableIdentifier(kind);\r\n        }\r\n\r\n        return pattern;\r\n    }\r\n\r\n    parsePatternWithDefault(params, kind?: string): Node.AssignmentPattern | Node.BindingIdentifier | Node.BindingPattern {\r\n        const startToken = this.lookahead;\r\n\r\n        let pattern = this.parsePattern(params, kind);\r\n        if (this.match('=')) {\r\n            this.nextToken();\r\n            const previousAllowYield = this.context.allowYield;\r\n            this.context.allowYield = true;\r\n            const right = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n            this.context.allowYield = previousAllowYield;\r\n            pattern = this.finalize(this.startNode(startToken), new Node.AssignmentPattern(pattern, right));\r\n        }\r\n\r\n        return pattern;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-variable-statement\r\n\r\n    parseVariableIdentifier(kind?: string): Node.Identifier {\r\n        const node = this.createNode();\r\n\r\n        const token = this.nextToken();\r\n        if (token.type === Token.Keyword && token.value === 'yield') {\r\n            if (this.context.strict) {\r\n                this.tolerateUnexpectedToken(token, Messages.StrictReservedWord);\r\n            } else if (!this.context.allowYield) {\r\n                this.throwUnexpectedToken(token);\r\n            }\r\n        } else if (token.type !== Token.Identifier) {\r\n            if (this.context.strict && token.type === Token.Keyword && this.scanner.isStrictModeReservedWord(token.value as string)) {\r\n                this.tolerateUnexpectedToken(token, Messages.StrictReservedWord);\r\n            } else {\r\n                if (this.context.strict || token.value !== 'let' || kind !== 'var') {\r\n                    this.throwUnexpectedToken(token);\r\n                }\r\n            }\r\n        } else if ((this.context.isModule || this.context.await) && token.type === Token.Identifier && token.value === 'await') {\r\n            this.tolerateUnexpectedToken(token);\r\n        }\r\n\r\n        return this.finalize(node, new Node.Identifier(token.value));\r\n    }\r\n\r\n    parseVariableDeclaration(options: DeclarationOptions): Node.VariableDeclarator {\r\n        const node = this.createNode();\r\n\r\n        const params = [];\r\n        const id = this.parsePattern(params, 'var');\r\n\r\n        if (this.context.strict && id.type === Syntax.Identifier) {\r\n            if (this.scanner.isRestrictedWord((id as Node.Identifier).name)) {\r\n                this.tolerateError(Messages.StrictVarName);\r\n            }\r\n        }\r\n\r\n        let init = null;\r\n        if (this.match('=')) {\r\n            this.nextToken();\r\n            init = this.isolateCoverGrammar(this.parseAssignmentExpression);\r\n        } else if (id.type !== Syntax.Identifier && !options.inFor) {\r\n            this.expect('=');\r\n        }\r\n\r\n        return this.finalize(node, new Node.VariableDeclarator(id, init));\r\n    }\r\n\r\n    parseVariableDeclarationList(options): Node.VariableDeclarator[] {\r\n        const opt: DeclarationOptions = { inFor: options.inFor };\r\n\r\n        const list: Node.VariableDeclarator[] = [];\r\n        list.push(this.parseVariableDeclaration(opt));\r\n        while (this.match(',')) {\r\n            this.nextToken();\r\n            list.push(this.parseVariableDeclaration(opt));\r\n        }\r\n\r\n        return list;\r\n    }\r\n\r\n    parseVariableStatement(): Node.VariableDeclaration {\r\n        const node = this.createNode();\r\n        this.expectKeyword('var');\r\n        const declarations = this.parseVariableDeclarationList({ inFor: false });\r\n        this.consumeSemicolon();\r\n\r\n        return this.finalize(node, new Node.VariableDeclaration(declarations, 'var'));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-empty-statement\r\n\r\n    parseEmptyStatement(): Node.EmptyStatement {\r\n        const node = this.createNode();\r\n        this.expect(';');\r\n        return this.finalize(node, new Node.EmptyStatement());\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-expression-statement\r\n\r\n    parseExpressionStatement(): Node.ExpressionStatement {\r\n        const node = this.createNode();\r\n        const expr = this.parseExpression();\r\n        this.consumeSemicolon();\r\n        return this.finalize(node, new Node.ExpressionStatement(expr));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-if-statement\r\n\r\n    parseIfClause(): Node.Statement {\r\n        if (this.context.strict && this.matchKeyword('function')) {\r\n            this.tolerateError(Messages.StrictFunction);\r\n        }\r\n        return this.parseStatement();\r\n    }\r\n\r\n    parseIfStatement(): Node.IfStatement {\r\n        const node = this.createNode();\r\n        let consequent: Node.Statement;\r\n        let alternate: Node.Statement | null = null;\r\n\r\n        this.expectKeyword('if');\r\n        this.expect('(');\r\n        const test = this.parseExpression();\r\n\r\n        if (!this.match(')') && this.config.tolerant) {\r\n            this.tolerateUnexpectedToken(this.nextToken());\r\n            consequent = this.finalize(this.createNode(), new Node.EmptyStatement());\r\n        } else {\r\n            this.expect(')');\r\n            consequent = this.parseIfClause();\r\n            if (this.matchKeyword('else')) {\r\n                this.nextToken();\r\n                alternate = this.parseIfClause();\r\n            }\r\n        }\r\n\r\n        return this.finalize(node, new Node.IfStatement(test, consequent, alternate));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-do-while-statement\r\n\r\n    parseDoWhileStatement(): Node.DoWhileStatement {\r\n        const node = this.createNode();\r\n        this.expectKeyword('do');\r\n\r\n        const previousInIteration = this.context.inIteration;\r\n        this.context.inIteration = true;\r\n        const body = this.parseStatement();\r\n        this.context.inIteration = previousInIteration;\r\n\r\n        this.expectKeyword('while');\r\n        this.expect('(');\r\n        const test = this.parseExpression();\r\n\r\n        if (!this.match(')') && this.config.tolerant) {\r\n            this.tolerateUnexpectedToken(this.nextToken());\r\n        } else {\r\n            this.expect(')');\r\n            if (this.match(';')) {\r\n                this.nextToken();\r\n            }\r\n        }\r\n\r\n        return this.finalize(node, new Node.DoWhileStatement(body, test));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-while-statement\r\n\r\n    parseWhileStatement(): Node.WhileStatement {\r\n        const node = this.createNode();\r\n        let body;\r\n\r\n        this.expectKeyword('while');\r\n        this.expect('(');\r\n        const test = this.parseExpression();\r\n\r\n        if (!this.match(')') && this.config.tolerant) {\r\n            this.tolerateUnexpectedToken(this.nextToken());\r\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\r\n        } else {\r\n            this.expect(')');\r\n\r\n            const previousInIteration = this.context.inIteration;\r\n            this.context.inIteration = true;\r\n            body = this.parseStatement();\r\n            this.context.inIteration = previousInIteration;\r\n        }\r\n\r\n        return this.finalize(node, new Node.WhileStatement(test, body));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-for-statement\r\n    // https://tc39.github.io/ecma262/#sec-for-in-and-for-of-statements\r\n\r\n    parseForStatement(): Node.ForStatement | Node.ForInStatement | Node.ForOfStatement {\r\n        let init: any = null;\r\n        let test: Node.Expression | null = null;\r\n        let update: Node.Expression | null = null;\r\n        let forIn = true;\r\n        let left, right;\r\n\r\n        const node = this.createNode();\r\n        this.expectKeyword('for');\r\n        this.expect('(');\r\n\r\n        if (this.match(';')) {\r\n            this.nextToken();\r\n        } else {\r\n            if (this.matchKeyword('var')) {\r\n                init = this.createNode();\r\n                this.nextToken();\r\n\r\n                const previousAllowIn = this.context.allowIn;\r\n                this.context.allowIn = false;\r\n                const declarations = this.parseVariableDeclarationList({ inFor: true });\r\n                this.context.allowIn = previousAllowIn;\r\n\r\n                if (declarations.length === 1 && this.matchKeyword('in')) {\r\n                    const decl = declarations[0];\r\n                    if (decl.init && (decl.id.type === Syntax.ArrayPattern || decl.id.type === Syntax.ObjectPattern || this.context.strict)) {\r\n                        this.tolerateError(Messages.ForInOfLoopInitializer, 'for-in');\r\n                    }\r\n                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\r\n                    this.nextToken();\r\n                    left = init;\r\n                    right = this.parseExpression();\r\n                    init = null;\r\n                } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\r\n                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\r\n                    this.nextToken();\r\n                    left = init;\r\n                    right = this.parseAssignmentExpression();\r\n                    init = null;\r\n                    forIn = false;\r\n                } else {\r\n                    init = this.finalize(init, new Node.VariableDeclaration(declarations, 'var'));\r\n                    this.expect(';');\r\n                }\r\n            } else if (this.matchKeyword('const') || this.matchKeyword('let')) {\r\n                init = this.createNode();\r\n                const kind = this.nextToken().value as string;\r\n\r\n                if (!this.context.strict && this.lookahead.value === 'in') {\r\n                    init = this.finalize(init, new Node.Identifier(kind));\r\n                    this.nextToken();\r\n                    left = init;\r\n                    right = this.parseExpression();\r\n                    init = null;\r\n                } else {\r\n                    const previousAllowIn = this.context.allowIn;\r\n                    this.context.allowIn = false;\r\n                    const declarations = this.parseBindingList(kind, { inFor: true });\r\n                    this.context.allowIn = previousAllowIn;\r\n\r\n                    if (declarations.length === 1 && declarations[0].init === null && this.matchKeyword('in')) {\r\n                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\r\n                        this.nextToken();\r\n                        left = init;\r\n                        right = this.parseExpression();\r\n                        init = null;\r\n                    } else if (declarations.length === 1 && declarations[0].init === null && this.matchContextualKeyword('of')) {\r\n                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\r\n                        this.nextToken();\r\n                        left = init;\r\n                        right = this.parseAssignmentExpression();\r\n                        init = null;\r\n                        forIn = false;\r\n                    } else {\r\n                        this.consumeSemicolon();\r\n                        init = this.finalize(init, new Node.VariableDeclaration(declarations, kind));\r\n                    }\r\n                }\r\n            } else {\r\n                const initStartToken = this.lookahead;\r\n                const previousAllowIn = this.context.allowIn;\r\n                this.context.allowIn = false;\r\n                init = this.inheritCoverGrammar(this.parseAssignmentExpression);\r\n                this.context.allowIn = previousAllowIn;\r\n\r\n                if (this.matchKeyword('in')) {\r\n                    if (!this.context.isAssignmentTarget || init.type === Syntax.AssignmentExpression) {\r\n                        this.tolerateError(Messages.InvalidLHSInForIn);\r\n                    }\r\n\r\n                    this.nextToken();\r\n                    this.reinterpretExpressionAsPattern(init);\r\n                    left = init;\r\n                    right = this.parseExpression();\r\n                    init = null;\r\n                } else if (this.matchContextualKeyword('of')) {\r\n                    if (!this.context.isAssignmentTarget || init.type === Syntax.AssignmentExpression) {\r\n                        this.tolerateError(Messages.InvalidLHSInForLoop);\r\n                    }\r\n\r\n                    this.nextToken();\r\n                    this.reinterpretExpressionAsPattern(init);\r\n                    left = init;\r\n                    right = this.parseAssignmentExpression();\r\n                    init = null;\r\n                    forIn = false;\r\n                } else {\r\n                    if (this.match(',')) {\r\n                        const initSeq = [init];\r\n                        while (this.match(',')) {\r\n                            this.nextToken();\r\n                            initSeq.push(this.isolateCoverGrammar(this.parseAssignmentExpression));\r\n                        }\r\n                        init = this.finalize(this.startNode(initStartToken), new Node.SequenceExpression(initSeq));\r\n                    }\r\n                    this.expect(';');\r\n                }\r\n            }\r\n        }\r\n\r\n        if (typeof left === 'undefined') {\r\n            if (!this.match(';')) {\r\n                test = this.parseExpression();\r\n            }\r\n            this.expect(';');\r\n            if (!this.match(')')) {\r\n                update = this.parseExpression();\r\n            }\r\n        }\r\n\r\n        let body;\r\n        if (!this.match(')') && this.config.tolerant) {\r\n            this.tolerateUnexpectedToken(this.nextToken());\r\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\r\n        } else {\r\n            this.expect(')');\r\n\r\n            const previousInIteration = this.context.inIteration;\r\n            this.context.inIteration = true;\r\n            body = this.isolateCoverGrammar(this.parseStatement);\r\n            this.context.inIteration = previousInIteration;\r\n        }\r\n\r\n        return (typeof left === 'undefined') ?\r\n            this.finalize(node, new Node.ForStatement(init, test, update, body)) :\r\n            forIn ? this.finalize(node, new Node.ForInStatement(left, right, body)) :\r\n                this.finalize(node, new Node.ForOfStatement(left, right, body));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-continue-statement\r\n\r\n    parseContinueStatement(): Node.ContinueStatement {\r\n        const node = this.createNode();\r\n        this.expectKeyword('continue');\r\n\r\n        let label: Node.Identifier | null = null;\r\n        if (this.lookahead.type === Token.Identifier && !this.hasLineTerminator) {\r\n            const id = this.parseVariableIdentifier();\r\n            label = id;\r\n\r\n            const key = '$' + id.name;\r\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\r\n                this.throwError(Messages.UnknownLabel, id.name);\r\n            }\r\n        }\r\n\r\n        this.consumeSemicolon();\r\n        if (label === null && !this.context.inIteration) {\r\n            this.throwError(Messages.IllegalContinue);\r\n        }\r\n\r\n        return this.finalize(node, new Node.ContinueStatement(label));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-break-statement\r\n\r\n    parseBreakStatement(): Node.BreakStatement {\r\n        const node = this.createNode();\r\n        this.expectKeyword('break');\r\n\r\n        let label: Node.Identifier | null = null;\r\n        if (this.lookahead.type === Token.Identifier && !this.hasLineTerminator) {\r\n            const id = this.parseVariableIdentifier();\r\n\r\n            const key = '$' + id.name;\r\n            if (!Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\r\n                this.throwError(Messages.UnknownLabel, id.name);\r\n            }\r\n            label = id;\r\n        }\r\n\r\n        this.consumeSemicolon();\r\n        if (label === null && !this.context.inIteration && !this.context.inSwitch) {\r\n            this.throwError(Messages.IllegalBreak);\r\n        }\r\n\r\n        return this.finalize(node, new Node.BreakStatement(label));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-return-statement\r\n\r\n    parseReturnStatement(): Node.ReturnStatement {\r\n        if (!this.context.inFunctionBody) {\r\n            this.tolerateError(Messages.IllegalReturn);\r\n        }\r\n\r\n        const node = this.createNode();\r\n        this.expectKeyword('return');\r\n\r\n        const hasArgument = (!this.match(';') && !this.match('}') &&\r\n            !this.hasLineTerminator && this.lookahead.type !== Token.EOF) ||\r\n            this.lookahead.type === Token.Template;\r\n\r\n        const argument = hasArgument ? this.parseExpression() : null;\r\n        this.consumeSemicolon();\r\n\r\n        return this.finalize(node, new Node.ReturnStatement(argument));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-with-statement\r\n\r\n    parseWithStatement(): Node.WithStatement {\r\n        if (this.context.strict) {\r\n            this.tolerateError(Messages.StrictModeWith);\r\n        }\r\n\r\n        const node = this.createNode();\r\n        let body;\r\n\r\n        this.expectKeyword('with');\r\n        this.expect('(');\r\n        const object = this.parseExpression();\r\n\r\n        if (!this.match(')') && this.config.tolerant) {\r\n            this.tolerateUnexpectedToken(this.nextToken());\r\n            body = this.finalize(this.createNode(), new Node.EmptyStatement());\r\n        } else {\r\n            this.expect(')');\r\n            body = this.parseStatement();\r\n        }\r\n\r\n        return this.finalize(node, new Node.WithStatement(object, body));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-switch-statement\r\n\r\n    parseSwitchCase(): Node.SwitchCase {\r\n        const node = this.createNode();\r\n\r\n        let test;\r\n        if (this.matchKeyword('default')) {\r\n            this.nextToken();\r\n            test = null;\r\n        } else {\r\n            this.expectKeyword('case');\r\n            test = this.parseExpression();\r\n        }\r\n        this.expect(':');\r\n\r\n        const consequent: Node.StatementListItem[] = [];\r\n        while (true) {\r\n            if (this.match('}') || this.matchKeyword('default') || this.matchKeyword('case')) {\r\n                break;\r\n            }\r\n            consequent.push(this.parseStatementListItem());\r\n        }\r\n\r\n        return this.finalize(node, new Node.SwitchCase(test, consequent));\r\n    }\r\n\r\n    parseSwitchStatement(): Node.SwitchStatement {\r\n        const node = this.createNode();\r\n        this.expectKeyword('switch');\r\n\r\n        this.expect('(');\r\n        const discriminant = this.parseExpression();\r\n        this.expect(')');\r\n\r\n        const previousInSwitch = this.context.inSwitch;\r\n        this.context.inSwitch = true;\r\n\r\n        const cases: Node.SwitchCase[] = [];\r\n        let defaultFound = false;\r\n        this.expect('{');\r\n        while (true) {\r\n            if (this.match('}')) {\r\n                break;\r\n            }\r\n            const clause = this.parseSwitchCase();\r\n            if (clause.test === null) {\r\n                if (defaultFound) {\r\n                    this.throwError(Messages.MultipleDefaultsInSwitch);\r\n                }\r\n                defaultFound = true;\r\n            }\r\n            cases.push(clause);\r\n        }\r\n        this.expect('}');\r\n\r\n        this.context.inSwitch = previousInSwitch;\r\n\r\n        return this.finalize(node, new Node.SwitchStatement(discriminant, cases));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-labelled-statements\r\n\r\n    parseLabelledStatement(): Node.LabeledStatement | Node.ExpressionStatement {\r\n        const node = this.createNode();\r\n        const expr = this.parseExpression();\r\n\r\n        let statement: Node.ExpressionStatement | Node.LabeledStatement;\r\n        if ((expr.type === Syntax.Identifier) && this.match(':')) {\r\n            this.nextToken();\r\n\r\n            const id = expr as Node.Identifier;\r\n            const key = '$' + id.name;\r\n            if (Object.prototype.hasOwnProperty.call(this.context.labelSet, key)) {\r\n                this.throwError(Messages.Redeclaration, 'Label', id.name);\r\n            }\r\n\r\n            this.context.labelSet[key] = true;\r\n            let body: Node.Statement;\r\n            if (this.matchKeyword('class')) {\r\n                this.tolerateUnexpectedToken(this.lookahead);\r\n                body = this.parseClassDeclaration();\r\n            } else if (this.matchKeyword('function')) {\r\n                const token = this.lookahead;\r\n                const declaration = this.parseFunctionDeclaration();\r\n                if (this.context.strict) {\r\n                    this.tolerateUnexpectedToken(token, Messages.StrictFunction);\r\n                } else if (declaration.generator) {\r\n                    this.tolerateUnexpectedToken(token, Messages.GeneratorInLegacyContext);\r\n                }\r\n                body = declaration;\r\n            } else {\r\n                body = this.parseStatement();\r\n            }\r\n            delete this.context.labelSet[key];\r\n\r\n            statement = new Node.LabeledStatement(id, body);\r\n        } else {\r\n            this.consumeSemicolon();\r\n            statement = new Node.ExpressionStatement(expr);\r\n        }\r\n\r\n        return this.finalize(node, statement);\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-throw-statement\r\n\r\n    parseThrowStatement(): Node.ThrowStatement {\r\n        const node = this.createNode();\r\n        this.expectKeyword('throw');\r\n\r\n        if (this.hasLineTerminator) {\r\n            this.throwError(Messages.NewlineAfterThrow);\r\n        }\r\n\r\n        const argument = this.parseExpression();\r\n        this.consumeSemicolon();\r\n\r\n        return this.finalize(node, new Node.ThrowStatement(argument));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-try-statement\r\n\r\n    parseCatchClause(): Node.CatchClause {\r\n        const node = this.createNode();\r\n\r\n        this.expectKeyword('catch');\r\n\r\n        this.expect('(');\r\n        if (this.match(')')) {\r\n            this.throwUnexpectedToken(this.lookahead);\r\n        }\r\n\r\n        const params: any[] = [];\r\n        const param = this.parsePattern(params);\r\n        const paramMap = {};\r\n        for (let i = 0; i < params.length; i++) {\r\n            const key = '$' + params[i].value;\r\n            if (Object.prototype.hasOwnProperty.call(paramMap, key)) {\r\n                this.tolerateError(Messages.DuplicateBinding, params[i].value);\r\n            }\r\n            paramMap[key] = true;\r\n        }\r\n\r\n        if (this.context.strict && param.type === Syntax.Identifier) {\r\n            if (this.scanner.isRestrictedWord((param as Node.Identifier).name)) {\r\n                this.tolerateError(Messages.StrictCatchVariable);\r\n            }\r\n        }\r\n\r\n        this.expect(')');\r\n        const body = this.parseBlock();\r\n\r\n        return this.finalize(node, new Node.CatchClause(param, body));\r\n    }\r\n\r\n    parseFinallyClause(): Node.BlockStatement {\r\n        this.expectKeyword('finally');\r\n        return this.parseBlock();\r\n    }\r\n\r\n    parseTryStatement(): Node.TryStatement {\r\n        const node = this.createNode();\r\n        this.expectKeyword('try');\r\n\r\n        const block = this.parseBlock();\r\n        const handler = this.matchKeyword('catch') ? this.parseCatchClause() : null;\r\n        const finalizer = this.matchKeyword('finally') ? this.parseFinallyClause() : null;\r\n\r\n        if (!handler && !finalizer) {\r\n            this.throwError(Messages.NoCatchOrFinally);\r\n        }\r\n\r\n        return this.finalize(node, new Node.TryStatement(block, handler, finalizer));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-debugger-statement\r\n\r\n    parseDebuggerStatement(): Node.DebuggerStatement {\r\n        const node = this.createNode();\r\n        this.expectKeyword('debugger');\r\n        this.consumeSemicolon();\r\n        return this.finalize(node, new Node.DebuggerStatement());\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-ecmascript-language-statements-and-declarations\r\n\r\n    parseStatement(): Node.Statement {\r\n        let statement: Node.Statement;\r\n        switch (this.lookahead.type) {\r\n            case Token.BooleanLiteral:\r\n            case Token.NullLiteral:\r\n            case Token.NumericLiteral:\r\n            case Token.StringLiteral:\r\n            case Token.Template:\r\n            case Token.RegularExpression:\r\n                statement = this.parseExpressionStatement();\r\n                break;\r\n\r\n            case Token.Punctuator:\r\n                const value = this.lookahead.value;\r\n                if (value === '{') {\r\n                    statement = this.parseBlock();\r\n                } else if (value === '(') {\r\n                    statement = this.parseExpressionStatement();\r\n                } else if (value === ';') {\r\n                    statement = this.parseEmptyStatement();\r\n                } else {\r\n                    statement = this.parseExpressionStatement();\r\n                }\r\n                break;\r\n\r\n            case Token.Identifier:\r\n                statement = this.matchAsyncFunction() ? this.parseFunctionDeclaration() : this.parseLabelledStatement();\r\n                break;\r\n\r\n            case Token.Keyword:\r\n                switch (this.lookahead.value) {\r\n                    case 'break':\r\n                        statement = this.parseBreakStatement();\r\n                        break;\r\n                    case 'continue':\r\n                        statement = this.parseContinueStatement();\r\n                        break;\r\n                    case 'debugger':\r\n                        statement = this.parseDebuggerStatement();\r\n                        break;\r\n                    case 'do':\r\n                        statement = this.parseDoWhileStatement();\r\n                        break;\r\n                    case 'for':\r\n                        statement = this.parseForStatement();\r\n                        break;\r\n                    case 'function':\r\n                        statement = this.parseFunctionDeclaration();\r\n                        break;\r\n                    case 'if':\r\n                        statement = this.parseIfStatement();\r\n                        break;\r\n                    case 'return':\r\n                        statement = this.parseReturnStatement();\r\n                        break;\r\n                    case 'switch':\r\n                        statement = this.parseSwitchStatement();\r\n                        break;\r\n                    case 'throw':\r\n                        statement = this.parseThrowStatement();\r\n                        break;\r\n                    case 'try':\r\n                        statement = this.parseTryStatement();\r\n                        break;\r\n                    case 'var':\r\n                        statement = this.parseVariableStatement();\r\n                        break;\r\n                    case 'while':\r\n                        statement = this.parseWhileStatement();\r\n                        break;\r\n                    case 'with':\r\n                        statement = this.parseWithStatement();\r\n                        break;\r\n                    default:\r\n                        statement = this.parseExpressionStatement();\r\n                        break;\r\n                }\r\n                break;\r\n\r\n            default:\r\n                statement = this.throwUnexpectedToken(this.lookahead);\r\n        }\r\n\r\n        return statement;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-function-definitions\r\n\r\n    parseFunctionSourceElements(): Node.BlockStatement {\r\n        const node = this.createNode();\r\n\r\n        this.expect('{');\r\n        const body = this.parseDirectivePrologues();\r\n\r\n        const previousLabelSet = this.context.labelSet;\r\n        const previousInIteration = this.context.inIteration;\r\n        const previousInSwitch = this.context.inSwitch;\r\n        const previousInFunctionBody = this.context.inFunctionBody;\r\n\r\n        this.context.labelSet = {};\r\n        this.context.inIteration = false;\r\n        this.context.inSwitch = false;\r\n        this.context.inFunctionBody = true;\r\n\r\n        while (this.lookahead.type !== Token.EOF) {\r\n            if (this.match('}')) {\r\n                break;\r\n            }\r\n            body.push(this.parseStatementListItem());\r\n        }\r\n\r\n        this.expect('}');\r\n\r\n        this.context.labelSet = previousLabelSet;\r\n        this.context.inIteration = previousInIteration;\r\n        this.context.inSwitch = previousInSwitch;\r\n        this.context.inFunctionBody = previousInFunctionBody;\r\n\r\n        return this.finalize(node, new Node.BlockStatement(body));\r\n    }\r\n\r\n    validateParam(options, param, name) {\r\n        const key = '$' + name;\r\n        if (this.context.strict) {\r\n            if (this.scanner.isRestrictedWord(name)) {\r\n                options.stricted = param;\r\n                options.message = Messages.StrictParamName;\r\n            }\r\n            if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\r\n                options.stricted = param;\r\n                options.message = Messages.StrictParamDupe;\r\n            }\r\n        } else if (!options.firstRestricted) {\r\n            if (this.scanner.isRestrictedWord(name)) {\r\n                options.firstRestricted = param;\r\n                options.message = Messages.StrictParamName;\r\n            } else if (this.scanner.isStrictModeReservedWord(name)) {\r\n                options.firstRestricted = param;\r\n                options.message = Messages.StrictReservedWord;\r\n            } else if (Object.prototype.hasOwnProperty.call(options.paramSet, key)) {\r\n                options.stricted = param;\r\n                options.message = Messages.StrictParamDupe;\r\n            }\r\n        }\r\n\r\n        /* istanbul ignore next */\r\n        if (typeof Object.defineProperty === 'function') {\r\n            Object.defineProperty(options.paramSet, key, { value: true, enumerable: true, writable: true, configurable: true });\r\n        } else {\r\n            options.paramSet[key] = true;\r\n        }\r\n    }\r\n\r\n    parseRestElement(params): Node.RestElement {\r\n        const node = this.createNode();\r\n\r\n        this.expect('...');\r\n        const arg = this.parsePattern(params);\r\n        if (this.match('=')) {\r\n            this.throwError(Messages.DefaultRestParameter);\r\n        }\r\n        if (!this.match(')')) {\r\n            this.throwError(Messages.ParameterAfterRestParameter);\r\n        }\r\n\r\n        return this.finalize(node, new Node.RestElement(arg));\r\n    }\r\n\r\n    parseFormalParameter(options) {\r\n        const params: any[] = [];\r\n        const param = this.match('...') ? this.parseRestElement(params) : this.parsePatternWithDefault(params);\r\n        for (let i = 0; i < params.length; i++) {\r\n            this.validateParam(options, params[i], params[i].value);\r\n        }\r\n        options.simple = options.simple && (param instanceof Node.Identifier);\r\n        options.params.push(param);\r\n    }\r\n\r\n    parseFormalParameters(firstRestricted?) {\r\n        let options;\r\n\r\n        options = {\r\n            simple: true,\r\n            params: [],\r\n            firstRestricted: firstRestricted\r\n        };\r\n\r\n        this.expect('(');\r\n        if (!this.match(')')) {\r\n            options.paramSet = {};\r\n            while (this.lookahead.type !== Token.EOF) {\r\n                this.parseFormalParameter(options);\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n                this.expect(',');\r\n                if (this.match(')')) {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        this.expect(')');\r\n\r\n        return {\r\n            simple: options.simple,\r\n            params: options.params,\r\n            stricted: options.stricted,\r\n            firstRestricted: options.firstRestricted,\r\n            message: options.message\r\n        };\r\n    }\r\n\r\n    matchAsyncFunction(): boolean {\r\n        let match = this.matchContextualKeyword('async');\r\n        if (match) {\r\n            const state = this.scanner.saveState();\r\n            this.scanner.scanComments();\r\n            const next = this.scanner.lex();\r\n            this.scanner.restoreState(state);\r\n\r\n            match = (state.lineNumber === next.lineNumber) && (next.type === Token.Keyword) && (next.value === 'function');\r\n        }\r\n\r\n        return match;\r\n    }\r\n\r\n    parseFunctionDeclaration(identifierIsOptional?: boolean): Node.AsyncFunctionDeclaration | Node.FunctionDeclaration {\r\n        const node = this.createNode();\r\n\r\n        const isAsync = this.matchContextualKeyword('async');\r\n        if (isAsync) {\r\n            this.nextToken();\r\n        }\r\n\r\n        this.expectKeyword('function');\r\n\r\n        const isGenerator = isAsync ? false : this.match('*');\r\n        if (isGenerator) {\r\n            this.nextToken();\r\n        }\r\n\r\n        let message;\r\n        let id: Node.Identifier | null = null;\r\n        let firstRestricted: RawToken | null = null;\r\n\r\n        if (!identifierIsOptional || !this.match('(')) {\r\n            const token = this.lookahead;\r\n            id = this.parseVariableIdentifier();\r\n            if (this.context.strict) {\r\n                if (this.scanner.isRestrictedWord(token.value as string)) {\r\n                    this.tolerateUnexpectedToken(token, Messages.StrictFunctionName);\r\n                }\r\n            } else {\r\n                if (this.scanner.isRestrictedWord(token.value as string)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictFunctionName;\r\n                } else if (this.scanner.isStrictModeReservedWord(token.value as string)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictReservedWord;\r\n                }\r\n            }\r\n        }\r\n\r\n        const previousAllowAwait = this.context.await;\r\n        const previousAllowYield = this.context.allowYield;\r\n        this.context.await = isAsync;\r\n        this.context.allowYield = !isGenerator;\r\n\r\n        const formalParameters = this.parseFormalParameters(firstRestricted);\r\n        const params = formalParameters.params;\r\n        const stricted = formalParameters.stricted;\r\n        firstRestricted = formalParameters.firstRestricted;\r\n        if (formalParameters.message) {\r\n            message = formalParameters.message;\r\n        }\r\n\r\n        const previousStrict = this.context.strict;\r\n        const previousAllowStrictDirective = this.context.allowStrictDirective;\r\n        this.context.allowStrictDirective = formalParameters.simple;\r\n        const body = this.parseFunctionSourceElements();\r\n        if (this.context.strict && firstRestricted) {\r\n            this.throwUnexpectedToken(firstRestricted, message);\r\n        }\r\n        if (this.context.strict && stricted) {\r\n            this.tolerateUnexpectedToken(stricted, message);\r\n        }\r\n\r\n        this.context.strict = previousStrict;\r\n        this.context.allowStrictDirective = previousAllowStrictDirective;\r\n        this.context.await = previousAllowAwait;\r\n        this.context.allowYield = previousAllowYield;\r\n\r\n        return isAsync ? this.finalize(node, new Node.AsyncFunctionDeclaration(id, params, body)) :\r\n            this.finalize(node, new Node.FunctionDeclaration(id, params, body, isGenerator));\r\n    }\r\n\r\n    parseFunctionExpression(): Node.AsyncFunctionExpression | Node.FunctionExpression {\r\n        const node = this.createNode();\r\n\r\n        const isAsync = this.matchContextualKeyword('async');\r\n        if (isAsync) {\r\n            this.nextToken();\r\n        }\r\n\r\n        this.expectKeyword('function');\r\n\r\n        const isGenerator = isAsync ? false : this.match('*');\r\n        if (isGenerator) {\r\n            this.nextToken();\r\n        }\r\n\r\n        let message;\r\n        let id: Node.Identifier | null = null;\r\n        let firstRestricted;\r\n\r\n        const previousAllowAwait = this.context.await;\r\n        const previousAllowYield = this.context.allowYield;\r\n        this.context.await = isAsync;\r\n        this.context.allowYield = !isGenerator;\r\n\r\n        if (!this.match('(')) {\r\n            const token = this.lookahead;\r\n            id = (!this.context.strict && !isGenerator && this.matchKeyword('yield')) ? this.parseIdentifierName() : this.parseVariableIdentifier();\r\n            if (this.context.strict) {\r\n                if (this.scanner.isRestrictedWord(token.value as string)) {\r\n                    this.tolerateUnexpectedToken(token, Messages.StrictFunctionName);\r\n                }\r\n            } else {\r\n                if (this.scanner.isRestrictedWord(token.value as string)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictFunctionName;\r\n                } else if (this.scanner.isStrictModeReservedWord(token.value as string)) {\r\n                    firstRestricted = token;\r\n                    message = Messages.StrictReservedWord;\r\n                }\r\n            }\r\n        }\r\n\r\n        const formalParameters = this.parseFormalParameters(firstRestricted);\r\n        const params = formalParameters.params;\r\n        const stricted = formalParameters.stricted;\r\n        firstRestricted = formalParameters.firstRestricted;\r\n        if (formalParameters.message) {\r\n            message = formalParameters.message;\r\n        }\r\n\r\n        const previousStrict = this.context.strict;\r\n        const previousAllowStrictDirective = this.context.allowStrictDirective;\r\n        this.context.allowStrictDirective = formalParameters.simple;\r\n        const body = this.parseFunctionSourceElements();\r\n        if (this.context.strict && firstRestricted) {\r\n            this.throwUnexpectedToken(firstRestricted, message);\r\n        }\r\n        if (this.context.strict && stricted) {\r\n            this.tolerateUnexpectedToken(stricted, message);\r\n        }\r\n        this.context.strict = previousStrict;\r\n        this.context.allowStrictDirective = previousAllowStrictDirective;\r\n        this.context.await = previousAllowAwait;\r\n        this.context.allowYield = previousAllowYield;\r\n\r\n        return isAsync ? this.finalize(node, new Node.AsyncFunctionExpression(id, params, body)) :\r\n            this.finalize(node, new Node.FunctionExpression(id, params, body, isGenerator));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-directive-prologues-and-the-use-strict-directive\r\n\r\n    parseDirective(): Node.Directive | Node.ExpressionStatement {\r\n        const token = this.lookahead;\r\n\r\n        const node = this.createNode();\r\n        const expr = this.parseExpression();\r\n        const directive = (expr.type === Syntax.Literal) ? this.getTokenRaw(token).slice(1, -1) : null;\r\n        this.consumeSemicolon();\r\n\r\n        return this.finalize(node, directive ? new Node.Directive(expr, directive) : new Node.ExpressionStatement(expr));\r\n    }\r\n\r\n    parseDirectivePrologues(): Node.Statement[] {\r\n        let firstRestricted: RawToken | null = null;\r\n\r\n        const body: Node.Statement[] = [];\r\n        while (true) {\r\n            const token = this.lookahead;\r\n            if (token.type !== Token.StringLiteral) {\r\n                break;\r\n            }\r\n\r\n            const statement = this.parseDirective();\r\n            body.push(statement);\r\n            const directive = (statement as Node.Directive).directive;\r\n            if (typeof directive !== 'string') {\r\n                break;\r\n            }\r\n\r\n            if (directive === 'use strict') {\r\n                this.context.strict = true;\r\n                if (firstRestricted) {\r\n                    this.tolerateUnexpectedToken(firstRestricted, Messages.StrictOctalLiteral);\r\n                }\r\n                if (!this.context.allowStrictDirective) {\r\n                    this.tolerateUnexpectedToken(token, Messages.IllegalLanguageModeDirective);\r\n                }\r\n            } else {\r\n                if (!firstRestricted && token.octal) {\r\n                    firstRestricted = token;\r\n                }\r\n            }\r\n        }\r\n\r\n        return body;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-method-definitions\r\n\r\n    qualifiedPropertyName(token): boolean {\r\n        switch (token.type) {\r\n            case Token.Identifier:\r\n            case Token.StringLiteral:\r\n            case Token.BooleanLiteral:\r\n            case Token.NullLiteral:\r\n            case Token.NumericLiteral:\r\n            case Token.Keyword:\r\n                return true;\r\n            case Token.Punctuator:\r\n                return token.value === '[';\r\n            default:\r\n                break;\r\n        }\r\n        return false;\r\n    }\r\n\r\n    parseGetterMethod(): Node.FunctionExpression {\r\n        const node = this.createNode();\r\n\r\n        const isGenerator = false;\r\n        const previousAllowYield = this.context.allowYield;\r\n        this.context.allowYield = !isGenerator;\r\n        const formalParameters = this.parseFormalParameters();\r\n        if (formalParameters.params.length > 0) {\r\n            this.tolerateError(Messages.BadGetterArity);\r\n        }\r\n        const method = this.parsePropertyMethod(formalParameters);\r\n        this.context.allowYield = previousAllowYield;\r\n\r\n        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\r\n    }\r\n\r\n    parseSetterMethod(): Node.FunctionExpression {\r\n        const node = this.createNode();\r\n\r\n        const isGenerator = false;\r\n        const previousAllowYield = this.context.allowYield;\r\n        this.context.allowYield = !isGenerator;\r\n        const formalParameters = this.parseFormalParameters();\r\n        if (formalParameters.params.length !== 1) {\r\n            this.tolerateError(Messages.BadSetterArity);\r\n        } else if (formalParameters.params[0] instanceof Node.RestElement) {\r\n            this.tolerateError(Messages.BadSetterRestParameter);\r\n        }\r\n        const method = this.parsePropertyMethod(formalParameters);\r\n        this.context.allowYield = previousAllowYield;\r\n\r\n        return this.finalize(node, new Node.FunctionExpression(null, formalParameters.params, method, isGenerator));\r\n    }\r\n\r\n    parseGeneratorMethod(): Node.FunctionExpression {\r\n        const node = this.createNode();\r\n\r\n        const isGenerator = true;\r\n        const previousAllowYield = this.context.allowYield;\r\n\r\n        this.context.allowYield = true;\r\n        const params = this.parseFormalParameters();\r\n        this.context.allowYield = false;\r\n        const method = this.parsePropertyMethod(params);\r\n        this.context.allowYield = previousAllowYield;\r\n\r\n        return this.finalize(node, new Node.FunctionExpression(null, params.params, method, isGenerator));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-generator-function-definitions\r\n\r\n    isStartOfExpression(): boolean {\r\n        let start = true;\r\n\r\n        const value = this.lookahead.value;\r\n        switch (this.lookahead.type) {\r\n            case Token.Punctuator:\r\n                start = (value === '[') || (value === '(') || (value === '{') ||\r\n                    (value === '+') || (value === '-') ||\r\n                    (value === '!') || (value === '~') ||\r\n                    (value === '++') || (value === '--') ||\r\n                    (value === '/') || (value === '/=');  // regular expression literal\r\n                break;\r\n\r\n            case Token.Keyword:\r\n                start = (value === 'class') || (value === 'delete') ||\r\n                    (value === 'function') || (value === 'let') || (value === 'new') ||\r\n                    (value === 'super') || (value === 'this') || (value === 'typeof') ||\r\n                    (value === 'void') || (value === 'yield');\r\n                break;\r\n\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return start;\r\n    }\r\n\r\n    parseYieldExpression(): Node.YieldExpression {\r\n        const node = this.createNode();\r\n        this.expectKeyword('yield');\r\n\r\n        let argument: Node.Expression | null = null;\r\n        let delegate = false;\r\n        if (!this.hasLineTerminator) {\r\n            const previousAllowYield = this.context.allowYield;\r\n            this.context.allowYield = false;\r\n            delegate = this.match('*');\r\n            if (delegate) {\r\n                this.nextToken();\r\n                argument = this.parseAssignmentExpression();\r\n            } else if (this.isStartOfExpression()) {\r\n                argument = this.parseAssignmentExpression();\r\n            }\r\n            this.context.allowYield = previousAllowYield;\r\n        }\r\n\r\n        return this.finalize(node, new Node.YieldExpression(argument, delegate));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-class-definitions\r\n\r\n    parseClassElement(hasConstructor): Node.Property {\r\n        let token = this.lookahead;\r\n        const node = this.createNode();\r\n\r\n        let kind: string = '';\r\n        let key: Node.PropertyKey | null = null;\r\n        let value: Node.FunctionExpression | null = null;\r\n        let computed = false;\r\n        let method = false;\r\n        let isStatic = false;\r\n        let isAsync = false;\r\n\r\n        if (this.match('*')) {\r\n            this.nextToken();\r\n        } else {\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n            const id = key as Node.Identifier;\r\n            if (id.name === 'static' && (this.qualifiedPropertyName(this.lookahead) || this.match('*'))) {\r\n                token = this.lookahead;\r\n                isStatic = true;\r\n                computed = this.match('[');\r\n                if (this.match('*')) {\r\n                    this.nextToken();\r\n                } else {\r\n                    key = this.parseObjectPropertyKey();\r\n                }\r\n            }\r\n            if ((token.type === Token.Identifier) && !this.hasLineTerminator && (token.value === 'async')) {\r\n                const punctuator = this.lookahead.value;\r\n                if (punctuator !== ':' && punctuator !== '(' && punctuator !== '*') {\r\n                    isAsync = true;\r\n                    token = this.lookahead;\r\n                    key = this.parseObjectPropertyKey();\r\n                    if (token.type === Token.Identifier) {\r\n                        if (token.value === 'get' || token.value === 'set') {\r\n                            this.tolerateUnexpectedToken(token);\r\n                        } else if (token.value === 'constructor') {\r\n                            this.tolerateUnexpectedToken(token, Messages.ConstructorIsAsync);\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n\r\n        const lookaheadPropertyKey = this.qualifiedPropertyName(this.lookahead);\r\n        if (token.type === Token.Identifier) {\r\n            if (token.value === 'get' && lookaheadPropertyKey) {\r\n                kind = 'get';\r\n                computed = this.match('[');\r\n                key = this.parseObjectPropertyKey();\r\n                this.context.allowYield = false;\r\n                value = this.parseGetterMethod();\r\n            } else if (token.value === 'set' && lookaheadPropertyKey) {\r\n                kind = 'set';\r\n                computed = this.match('[');\r\n                key = this.parseObjectPropertyKey();\r\n                value = this.parseSetterMethod();\r\n            }\r\n        } else if (token.type === Token.Punctuator && token.value === '*' && lookaheadPropertyKey) {\r\n            kind = 'init';\r\n            computed = this.match('[');\r\n            key = this.parseObjectPropertyKey();\r\n            value = this.parseGeneratorMethod();\r\n            method = true;\r\n        }\r\n\r\n        if (!kind && key && this.match('(')) {\r\n            kind = 'init';\r\n            value = isAsync ? this.parsePropertyMethodAsyncFunction() : this.parsePropertyMethodFunction();\r\n            method = true;\r\n        }\r\n\r\n        if (!kind) {\r\n            this.throwUnexpectedToken(this.lookahead);\r\n        }\r\n\r\n        if (kind === 'init') {\r\n            kind = 'method';\r\n        }\r\n\r\n        if (!computed) {\r\n            if (isStatic && this.isPropertyKey(key, 'prototype')) {\r\n                this.throwUnexpectedToken(token, Messages.StaticPrototype);\r\n            }\r\n            if (!isStatic && this.isPropertyKey(key, 'constructor')) {\r\n                if (kind !== 'method' || !method || (value && value.generator)) {\r\n                    this.throwUnexpectedToken(token, Messages.ConstructorSpecialMethod);\r\n                }\r\n                if (hasConstructor.value) {\r\n                    this.throwUnexpectedToken(token, Messages.DuplicateConstructor);\r\n                } else {\r\n                    hasConstructor.value = true;\r\n                }\r\n                kind = 'constructor';\r\n            }\r\n        }\r\n\r\n        return this.finalize(node, new Node.MethodDefinition(key, computed, value, kind, isStatic));\r\n    }\r\n\r\n    parseClassElementList(): Node.Property[] {\r\n        const body: Node.Property[] = [];\r\n        const hasConstructor = { value: false };\r\n        this.expect('{');\r\n        while (!this.match('}')) {\r\n            if (this.match(';')) {\r\n                this.nextToken();\r\n            } else {\r\n                body.push(this.parseClassElement(hasConstructor));\r\n            }\r\n        }\r\n        this.expect('}');\r\n        return body;\r\n    }\r\n\r\n    parseClassBody(): Node.ClassBody {\r\n        const node = this.createNode();\r\n        const elementList = this.parseClassElementList();\r\n\r\n        return this.finalize(node, new Node.ClassBody(elementList));\r\n    }\r\n\r\n    parseClassDeclaration(identifierIsOptional?: boolean): Node.ClassDeclaration {\r\n        const node = this.createNode();\r\n\r\n        const previousStrict = this.context.strict;\r\n        this.context.strict = true;\r\n        this.expectKeyword('class');\r\n\r\n        const id = (identifierIsOptional && (this.lookahead.type !== Token.Identifier)) ? null : this.parseVariableIdentifier();\r\n        let superClass: Node.Identifier | null = null;\r\n        if (this.matchKeyword('extends')) {\r\n            this.nextToken();\r\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\r\n        }\r\n        let generics:Node.Identifier[] | null =null;\r\n        if (this.matchPunctuator('<')){\r\n            generics=[];\r\n            this.nextToken();\r\n            let identifier=this.parseIdentifierName();\r\n            generics.push(identifier);\r\n            while (!this.match('>')) {\r\n                if (this.match(',')) {\r\n                    this.nextToken();\r\n                    let identifier=this.parseIdentifierName();\r\n                    generics.push(identifier)\r\n                }\r\n            }\r\n            this.expect('>');\r\n        }\r\n\r\n        const classBody = this.parseClassBody();\r\n        this.context.strict = previousStrict;\r\n\r\n        return this.finalize(node, new Node.ClassDeclaration(id, superClass, generics, classBody));\r\n    }\r\n\r\n    parseClassExpression(): Node.ClassExpression {\r\n        const node = this.createNode();\r\n\r\n        const previousStrict = this.context.strict;\r\n        this.context.strict = true;\r\n        this.expectKeyword('class');\r\n        const id = (this.lookahead.type === Token.Identifier) ? this.parseVariableIdentifier() : null;\r\n        let superClass: Node.Identifier | null = null;\r\n        if (this.matchKeyword('extends')) {\r\n            this.nextToken();\r\n            superClass = this.isolateCoverGrammar(this.parseLeftHandSideExpressionAllowCall);\r\n        }\r\n        const classBody = this.parseClassBody();\r\n        this.context.strict = previousStrict;\r\n\r\n        return this.finalize(node, new Node.ClassExpression(id, superClass, classBody));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-scripts\r\n    // https://tc39.github.io/ecma262/#sec-modules\r\n\r\n    parseModule(): Node.Module {\r\n        this.context.strict = true;\r\n        this.context.isModule = true;\r\n        this.scanner.isModule = true;\r\n        const node = this.createNode();\r\n        const body = this.parseDirectivePrologues();\r\n        while (this.lookahead.type !== Token.EOF) {\r\n            body.push(this.parseStatementListItem());\r\n        }\r\n        return this.finalize(node, new Node.Module(body));\r\n    }\r\n\r\n    parseScript(): Node.Script {\r\n        const node = this.createNode();\r\n        const body = this.parseDirectivePrologues();\r\n        while (this.lookahead.type !== Token.EOF) {\r\n            body.push(this.parseStatementListItem());\r\n        }\r\n        return this.finalize(node, new Node.Script(body));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-imports\r\n\r\n    parseModuleSpecifier(): Node.Literal {\r\n        const node = this.createNode();\r\n\r\n        if (this.lookahead.type !== Token.StringLiteral) {\r\n            this.throwError(Messages.InvalidModuleSpecifier);\r\n        }\r\n\r\n        const token = this.nextToken();\r\n        const raw = this.getTokenRaw(token);\r\n        return this.finalize(node, new Node.Literal(token.value as string, raw));\r\n    }\r\n\r\n    // import {<foo as bar>} ...;\r\n    parseImportSpecifier(): Node.ImportSpecifier {\r\n        const node = this.createNode();\r\n\r\n        let imported: Node.Identifier;\r\n        let local: Node.Identifier;\r\n        if (this.lookahead.type === Token.Identifier) {\r\n            imported = this.parseVariableIdentifier();\r\n            local = imported;\r\n            if (this.matchContextualKeyword('as')) {\r\n                this.nextToken();\r\n                local = this.parseVariableIdentifier();\r\n            }\r\n        } else {\r\n            imported = this.parseIdentifierName();\r\n            local = imported;\r\n            if (this.matchContextualKeyword('as')) {\r\n                this.nextToken();\r\n                local = this.parseVariableIdentifier();\r\n            } else {\r\n                this.throwUnexpectedToken(this.nextToken());\r\n            }\r\n        }\r\n\r\n        return this.finalize(node, new Node.ImportSpecifier(local, imported));\r\n    }\r\n\r\n    // {foo, bar as bas}\r\n    parseNamedImports(): Node.ImportSpecifier[] {\r\n        this.expect('{');\r\n        const specifiers: Node.ImportSpecifier[] = [];\r\n        while (!this.match('}')) {\r\n            specifiers.push(this.parseImportSpecifier());\r\n            if (!this.match('}')) {\r\n                this.expect(',');\r\n            }\r\n        }\r\n        this.expect('}');\r\n\r\n        return specifiers;\r\n    }\r\n\r\n    // import <foo> ...;\r\n    parseImportDefaultSpecifier(): Node.ImportDefaultSpecifier {\r\n        const node = this.createNode();\r\n        const local = this.parseIdentifierName();\r\n        return this.finalize(node, new Node.ImportDefaultSpecifier(local));\r\n    }\r\n\r\n    // import <* as foo> ...;\r\n    parseImportNamespaceSpecifier(): Node.ImportNamespaceSpecifier {\r\n        const node = this.createNode();\r\n\r\n        this.expect('*');\r\n        if (!this.matchContextualKeyword('as')) {\r\n            this.throwError(Messages.NoAsAfterImportNamespace);\r\n        }\r\n        this.nextToken();\r\n        const local = this.parseIdentifierName();\r\n\r\n        return this.finalize(node, new Node.ImportNamespaceSpecifier(local));\r\n    }\r\n\r\n    parseImportDeclaration(): Node.ImportDeclaration {\r\n        if (this.context.inFunctionBody) {\r\n            this.throwError(Messages.IllegalImportDeclaration);\r\n        }\r\n\r\n        const node = this.createNode();\r\n        this.expectKeyword('import');\r\n\r\n        let src: Node.Literal;\r\n        let specifiers: Node.ImportDeclarationSpecifier[] = [];\r\n        if (this.lookahead.type === Token.StringLiteral) {\r\n            // import 'foo';\r\n            src = this.parseModuleSpecifier();\r\n        } else {\r\n            if (this.match('{')) {\r\n                // import {bar}\r\n                specifiers = specifiers.concat(this.parseNamedImports());\r\n            } else if (this.match('*')) {\r\n                // import * as foo\r\n                specifiers.push(this.parseImportNamespaceSpecifier());\r\n            } else if (this.isIdentifierName(this.lookahead) && !this.matchKeyword('default')) {\r\n                // import foo\r\n                specifiers.push(this.parseImportDefaultSpecifier());\r\n                if (this.match(',')) {\r\n                    this.nextToken();\r\n                    if (this.match('*')) {\r\n                        // import foo, * as foo\r\n                        specifiers.push(this.parseImportNamespaceSpecifier());\r\n                    } else if (this.match('{')) {\r\n                        // import foo, {bar}\r\n                        specifiers = specifiers.concat(this.parseNamedImports());\r\n                    } else {\r\n                        this.throwUnexpectedToken(this.lookahead);\r\n                    }\r\n                }\r\n            } else {\r\n                this.throwUnexpectedToken(this.nextToken());\r\n            }\r\n\r\n            if (!this.matchContextualKeyword('from')) {\r\n                const message = this.lookahead.value ? Messages.UnexpectedToken : Messages.MissingFromClause;\r\n                this.throwError(message, this.lookahead.value);\r\n            }\r\n            this.nextToken();\r\n            src = this.parseModuleSpecifier();\r\n        }\r\n        this.consumeSemicolon();\r\n\r\n        return this.finalize(node, new Node.ImportDeclaration(specifiers, src));\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-exports\r\n\r\n    parseExportSpecifier(): Node.ExportSpecifier {\r\n        const node = this.createNode();\r\n\r\n        const local = this.parseIdentifierName();\r\n        let exported = local;\r\n        if (this.matchContextualKeyword('as')) {\r\n            this.nextToken();\r\n            exported = this.parseIdentifierName();\r\n        }\r\n\r\n        return this.finalize(node, new Node.ExportSpecifier(local, exported));\r\n    }\r\n\r\n    parseExportDeclaration(): Node.ExportDeclaration {\r\n        if (this.context.inFunctionBody) {\r\n            this.throwError(Messages.IllegalExportDeclaration);\r\n        }\r\n\r\n        const node = this.createNode();\r\n        this.expectKeyword('export');\r\n\r\n        let exportDeclaration;\r\n        if (this.matchKeyword('default')) {\r\n            // export default ...\r\n            this.nextToken();\r\n            if (this.matchKeyword('function')) {\r\n                // export default function foo () {}\r\n                // export default function () {}\r\n                const declaration = this.parseFunctionDeclaration(true);\r\n                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\r\n            } else if (this.matchKeyword('class')) {\r\n                // export default class foo {}\r\n                const declaration = this.parseClassDeclaration(true);\r\n                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\r\n            } else if (this.matchContextualKeyword('async')) {\r\n                // export default async function f () {}\r\n                // export default async function () {}\r\n                // export default async x => x\r\n                const declaration = this.matchAsyncFunction() ? this.parseFunctionDeclaration(true) : this.parseAssignmentExpression();\r\n                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\r\n            } else {\r\n                if (this.matchContextualKeyword('from')) {\r\n                    this.throwError(Messages.UnexpectedToken, this.lookahead.value);\r\n                }\r\n                // export default {};\r\n                // export default [];\r\n                // export default (1 + 2);\r\n                const declaration = this.match('{') ? this.parseObjectInitializer() :\r\n                    this.match('[') ? this.parseArrayInitializer() : this.parseAssignmentExpression();\r\n                this.consumeSemicolon();\r\n                exportDeclaration = this.finalize(node, new Node.ExportDefaultDeclaration(declaration));\r\n            }\r\n\r\n        } else if (this.match('*')) {\r\n            // export * from 'foo';\r\n            this.nextToken();\r\n            if (!this.matchContextualKeyword('from')) {\r\n                const message = this.lookahead.value ? Messages.UnexpectedToken : Messages.MissingFromClause;\r\n                this.throwError(message, this.lookahead.value);\r\n            }\r\n            this.nextToken();\r\n            const src = this.parseModuleSpecifier();\r\n            this.consumeSemicolon();\r\n            exportDeclaration = this.finalize(node, new Node.ExportAllDeclaration(src));\r\n\r\n        } else if (this.lookahead.type === Token.Keyword) {\r\n            // export var f = 1;\r\n            let declaration;\r\n            switch (this.lookahead.value) {\r\n                case 'let':\r\n                case 'const':\r\n                    declaration = this.parseLexicalDeclaration({ inFor: false });\r\n                    break;\r\n                case 'var':\r\n                case 'class':\r\n                case 'function':\r\n                    declaration = this.parseStatementListItem();\r\n                    break;\r\n                default:\r\n                    this.throwUnexpectedToken(this.lookahead);\r\n            }\r\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\r\n\r\n        } else if (this.matchAsyncFunction()) {\r\n            const declaration = this.parseFunctionDeclaration();\r\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(declaration, [], null));\r\n\r\n        } else {\r\n            const specifiers: Node.ExportSpecifier[] = [];\r\n            let source: Node.Literal | null = null;\r\n            let isExportFromIdentifier = false;\r\n\r\n            this.expect('{');\r\n            while (!this.match('}')) {\r\n                isExportFromIdentifier = isExportFromIdentifier || this.matchKeyword('default');\r\n                specifiers.push(this.parseExportSpecifier());\r\n                if (!this.match('}')) {\r\n                    this.expect(',');\r\n                }\r\n            }\r\n            this.expect('}');\r\n\r\n            if (this.matchContextualKeyword('from')) {\r\n                // export {default} from 'foo';\r\n                // export {foo} from 'foo';\r\n                this.nextToken();\r\n                source = this.parseModuleSpecifier();\r\n                this.consumeSemicolon();\r\n            } else if (isExportFromIdentifier) {\r\n                // export {default}; // missing fromClause\r\n                const message = this.lookahead.value ? Messages.UnexpectedToken : Messages.MissingFromClause;\r\n                this.throwError(message, this.lookahead.value);\r\n            } else {\r\n                // export {foo};\r\n                this.consumeSemicolon();\r\n            }\r\n            exportDeclaration = this.finalize(node, new Node.ExportNamedDeclaration(null, specifiers, source));\r\n        }\r\n\r\n        return exportDeclaration;\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/parser.ts","import { assert } from './assert';\r\nimport { Character } from './character';\r\nimport { ErrorHandler } from './error-handler';\r\nimport { Messages } from './messages';\r\nimport { Token } from './token';\r\n\r\nfunction hexValue(ch: string): number {\r\n    return '0123456789abcdef'.indexOf(ch.toLowerCase());\r\n}\r\n\r\nfunction octalValue(ch: string): number {\r\n    return '01234567'.indexOf(ch);\r\n}\r\n\r\nexport interface Position {\r\n    line: number;\r\n    column: number;\r\n}\r\n\r\nexport interface SourceLocation {\r\n    start: Position;\r\n    end: Position;\r\n    source?: string;\r\n}\r\n\r\nexport interface Comment {\r\n    multiLine: boolean;\r\n    slice: number[];\r\n    range: [number, number];\r\n    loc: SourceLocation;\r\n}\r\n\r\nexport interface RawToken {\r\n    type: Token;\r\n    value: string | number;\r\n    pattern?: string;\r\n    flags?: string;\r\n    regex?: RegExp | null;\r\n    octal?: boolean;\r\n    cooked?: string;\r\n    head?: boolean;\r\n    tail?: boolean;\r\n    lineNumber: number;\r\n    lineStart: number;\r\n    start: number;\r\n    end: number;\r\n}\r\n\r\ninterface ScannerState {\r\n    index: number;\r\n    lineNumber: number;\r\n    lineStart: number;\r\n}\r\n\r\nexport class Scanner {\r\n\r\n    readonly source: string;\r\n    readonly errorHandler: ErrorHandler;\r\n    trackComment: boolean;\r\n    isModule: boolean;\r\n\r\n    index: number;\r\n    lineNumber: number;\r\n    lineStart: number;\r\n    private curlyStack: string[];\r\n\r\n    private readonly length: number;\r\n\r\n    constructor(code: string, handler: ErrorHandler) {\r\n        this.source = code;\r\n        this.errorHandler = handler;\r\n        this.trackComment = false;\r\n        this.isModule = false;\r\n\r\n        this.length = code.length;\r\n        this.index = 0;\r\n        this.lineNumber = (code.length > 0) ? 1 : 0;\r\n        this.lineStart = 0;\r\n        this.curlyStack = [];\r\n    }\r\n\r\n    public saveState(): ScannerState {\r\n        return {\r\n            index: this.index,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart\r\n        };\r\n    }\r\n\r\n    public restoreState(state: ScannerState): void {\r\n        this.index = state.index;\r\n        this.lineNumber = state.lineNumber;\r\n        this.lineStart = state.lineStart;\r\n    }\r\n\r\n    public eof(): boolean {\r\n        return this.index >= this.length;\r\n    }\r\n\r\n    public throwUnexpectedToken(message = Messages.UnexpectedTokenIllegal): never {\r\n        return this.errorHandler.throwError(this.index, this.lineNumber,\r\n            this.index - this.lineStart + 1, message);\r\n    }\r\n\r\n    private tolerateUnexpectedToken(message = Messages.UnexpectedTokenIllegal) {\r\n        this.errorHandler.tolerateError(this.index, this.lineNumber,\r\n            this.index - this.lineStart + 1, message);\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-comments\r\n\r\n    private skipSingleLineComment(offset: number): Comment[] {\r\n        let comments: Comment[] = [];\r\n        let start, loc;\r\n\r\n        if (this.trackComment) {\r\n            comments = [];\r\n            start = this.index - offset;\r\n            loc = {\r\n                start: {\r\n                    line: this.lineNumber,\r\n                    column: this.index - this.lineStart - offset\r\n                },\r\n                end: {}\r\n            };\r\n        }\r\n\r\n        while (!this.eof()) {\r\n            const ch = this.source.charCodeAt(this.index);\r\n            ++this.index;\r\n            if (Character.isLineTerminator(ch)) {\r\n                if (this.trackComment) {\r\n                    loc.end = {\r\n                        line: this.lineNumber,\r\n                        column: this.index - this.lineStart - 1\r\n                    };\r\n                    const entry: Comment = {\r\n                        multiLine: false,\r\n                        slice: [start + offset, this.index - 1],\r\n                        range: [start, this.index - 1],\r\n                        loc: loc\r\n                    };\r\n                    comments.push(entry);\r\n                }\r\n                if (ch === 13 && this.source.charCodeAt(this.index) === 10) {\r\n                    ++this.index;\r\n                }\r\n                ++this.lineNumber;\r\n                this.lineStart = this.index;\r\n                return comments;\r\n            }\r\n        }\r\n\r\n        if (this.trackComment) {\r\n            loc.end = {\r\n                line: this.lineNumber,\r\n                column: this.index - this.lineStart\r\n            };\r\n            const entry: Comment = {\r\n                multiLine: false,\r\n                slice: [start + offset, this.index],\r\n                range: [start, this.index],\r\n                loc: loc\r\n            };\r\n            comments.push(entry);\r\n        }\r\n\r\n        return comments;\r\n    }\r\n\r\n    private skipMultiLineComment(): Comment[] {\r\n        let comments: Comment[] = [];\r\n        let start, loc;\r\n\r\n        if (this.trackComment) {\r\n            comments = [];\r\n            start = this.index - 2;\r\n            loc = {\r\n                start: {\r\n                    line: this.lineNumber,\r\n                    column: this.index - this.lineStart - 2\r\n                },\r\n                end: {}\r\n            };\r\n        }\r\n\r\n        while (!this.eof()) {\r\n            const ch = this.source.charCodeAt(this.index);\r\n            if (Character.isLineTerminator(ch)) {\r\n                if (ch === 0x0D && this.source.charCodeAt(this.index + 1) === 0x0A) {\r\n                    ++this.index;\r\n                }\r\n                ++this.lineNumber;\r\n                ++this.index;\r\n                this.lineStart = this.index;\r\n            } else if (ch === 0x2A) {\r\n                // Block comment ends with '*/'.\r\n                if (this.source.charCodeAt(this.index + 1) === 0x2F) {\r\n                    this.index += 2;\r\n                    if (this.trackComment) {\r\n                        loc.end = {\r\n                            line: this.lineNumber,\r\n                            column: this.index - this.lineStart\r\n                        };\r\n                        const entry: Comment = {\r\n                            multiLine: true,\r\n                            slice: [start + 2, this.index - 2],\r\n                            range: [start, this.index],\r\n                            loc: loc\r\n                        };\r\n                        comments.push(entry);\r\n                    }\r\n                    return comments;\r\n                }\r\n                ++this.index;\r\n            } else {\r\n                ++this.index;\r\n            }\r\n        }\r\n\r\n        // Ran off the end of the file - the whole thing is a comment\r\n        if (this.trackComment) {\r\n            loc.end = {\r\n                line: this.lineNumber,\r\n                column: this.index - this.lineStart\r\n            };\r\n            const entry: Comment = {\r\n                multiLine: true,\r\n                slice: [start + 2, this.index],\r\n                range: [start, this.index],\r\n                loc: loc\r\n            };\r\n            comments.push(entry);\r\n        }\r\n\r\n        this.tolerateUnexpectedToken();\r\n        return comments;\r\n    }\r\n\r\n    public scanComments() {\r\n        let comments;\r\n        if (this.trackComment) {\r\n            comments = [];\r\n        }\r\n\r\n        let start = (this.index === 0);\r\n        while (!this.eof()) {\r\n            let ch = this.source.charCodeAt(this.index);\r\n\r\n            if (Character.isWhiteSpace(ch)) {\r\n                ++this.index;\r\n            } else if (Character.isLineTerminator(ch)) {\r\n                ++this.index;\r\n                if (ch === 0x0D && this.source.charCodeAt(this.index) === 0x0A) {\r\n                    ++this.index;\r\n                }\r\n                ++this.lineNumber;\r\n                this.lineStart = this.index;\r\n                start = true;\r\n            } else if (ch === 0x2F) { // U+002F is '/'\r\n                ch = this.source.charCodeAt(this.index + 1);\r\n                if (ch === 0x2F) {\r\n                    this.index += 2;\r\n                    const comment = this.skipSingleLineComment(2);\r\n                    if (this.trackComment) {\r\n                        comments = comments.concat(comment);\r\n                    }\r\n                    start = true;\r\n                } else if (ch === 0x2A) {  // U+002A is '*'\r\n                    this.index += 2;\r\n                    const comment = this.skipMultiLineComment();\r\n                    if (this.trackComment) {\r\n                        comments = comments.concat(comment);\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n            } else if (start && ch === 0x2D) { // U+002D is '-'\r\n                // U+003E is '>'\r\n                if ((this.source.charCodeAt(this.index + 1) === 0x2D) && (this.source.charCodeAt(this.index + 2) === 0x3E)) {\r\n                    // '-->' is a single-line comment\r\n                    this.index += 3;\r\n                    const comment = this.skipSingleLineComment(3);\r\n                    if (this.trackComment) {\r\n                        comments = comments.concat(comment);\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n            } else if (ch === 0x3C && !this.isModule) { // U+003C is '<'\r\n                if (this.source.slice(this.index + 1, this.index + 4) === '!--') {\r\n                    this.index += 4; // `<!--`\r\n                    const comment = this.skipSingleLineComment(4);\r\n                    if (this.trackComment) {\r\n                        comments = comments.concat(comment);\r\n                    }\r\n                } else {\r\n                    break;\r\n                }\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return comments;\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-future-reserved-words\r\n\r\n    public isFutureReservedWord(id: string): boolean {\r\n        switch (id) {\r\n            case 'enum':\r\n            case 'export':\r\n            case 'import':\r\n            case 'super':\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    public isStrictModeReservedWord(id: string): boolean {\r\n        switch (id) {\r\n            case 'implements':\r\n            case 'interface':\r\n            case 'package':\r\n            case 'private':\r\n            case 'protected':\r\n            case 'public':\r\n            case 'static':\r\n            case 'yield':\r\n            case 'let':\r\n                return true;\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    public isRestrictedWord(id: string): boolean {\r\n        return id === 'eval' || id === 'arguments';\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-keywords\r\n\r\n    private isKeyword(id: string): boolean {\r\n        switch (id.length) {\r\n            case 2:\r\n                return (id === 'if') || (id === 'in') || (id === 'do');\r\n            case 3:\r\n                return (id === 'var') || (id === 'for') || (id === 'new') ||\r\n                    (id === 'try') || (id === 'let');\r\n            case 4:\r\n                return (id === 'this') || (id === 'else') || (id === 'case') ||\r\n                    (id === 'void') || (id === 'with') || (id === 'enum');\r\n            case 5:\r\n                return (id === 'while') || (id === 'break') || (id === 'catch') ||\r\n                    (id === 'throw') || (id === 'const') || (id === 'yield') ||\r\n                    (id === 'class') || (id === 'super');\r\n            case 6:\r\n                return (id === 'return') || (id === 'typeof') || (id === 'delete') ||\r\n                    (id === 'switch') || (id === 'export') || (id === 'import');\r\n            case 7:\r\n                return (id === 'default') || (id === 'finally') || (id === 'extends');\r\n            case 8:\r\n                return (id === 'function') || (id === 'continue') || (id === 'debugger');\r\n            case 10:\r\n                return (id === 'instanceof');\r\n            default:\r\n                return false;\r\n        }\r\n    }\r\n\r\n    private codePointAt(i: number): number {\r\n        let cp = this.source.charCodeAt(i);\r\n\r\n        if (cp >= 0xD800 && cp <= 0xDBFF) {\r\n            const second = this.source.charCodeAt(i + 1);\r\n            if (second >= 0xDC00 && second <= 0xDFFF) {\r\n                const first = cp;\r\n                cp = (first - 0xD800) * 0x400 + second - 0xDC00 + 0x10000;\r\n            }\r\n        }\r\n\r\n        return cp;\r\n    }\r\n\r\n    private scanHexEscape(prefix: string): string | null {\r\n        const len = (prefix === 'u') ? 4 : 2;\r\n        let code = 0;\r\n\r\n        for (let i = 0; i < len; ++i) {\r\n            if (!this.eof() && Character.isHexDigit(this.source.charCodeAt(this.index))) {\r\n                code = code * 16 + hexValue(this.source[this.index++]);\r\n            } else {\r\n                return null;\r\n            }\r\n        }\r\n        return String.fromCharCode(code);\r\n    }\r\n\r\n    private scanUnicodeCodePointEscape(): string {\r\n        let ch = this.source[this.index];\r\n        let code = 0;\r\n\r\n        // At least, one hex digit is required.\r\n        if (ch === '}') {\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        while (!this.eof()) {\r\n            ch = this.source[this.index++];\r\n            if (!Character.isHexDigit(ch.charCodeAt(0))) {\r\n                break;\r\n            }\r\n            code = code * 16 + hexValue(ch);\r\n        }\r\n\r\n        if (code > 0x10FFFF || ch !== '}') {\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        return Character.fromCodePoint(code);\r\n    }\r\n\r\n    private getIdentifier(): string {\r\n        const start = this.index++;\r\n        while (!this.eof()) {\r\n            const ch = this.source.charCodeAt(this.index);\r\n            if (ch === 0x5C) {\r\n                // Blackslash (U+005C) marks Unicode escape sequence.\r\n                this.index = start;\r\n                return this.getComplexIdentifier();\r\n            } else if (ch >= 0xD800 && ch < 0xDFFF) {\r\n                // Need to handle surrogate pairs.\r\n                this.index = start;\r\n                return this.getComplexIdentifier();\r\n            }\r\n            if (Character.isIdentifierPart(ch)) {\r\n                ++this.index;\r\n            } else {\r\n                break;\r\n            }\r\n        }\r\n\r\n        return this.source.slice(start, this.index);\r\n    }\r\n\r\n    private getComplexIdentifier(): string {\r\n        let cp = this.codePointAt(this.index);\r\n        let id = Character.fromCodePoint(cp);\r\n        this.index += id.length;\r\n\r\n        // '\\u' (U+005C, U+0075) denotes an escaped character.\r\n        let ch;\r\n        if (cp === 0x5C) {\r\n            if (this.source.charCodeAt(this.index) !== 0x75) {\r\n                this.throwUnexpectedToken();\r\n            }\r\n            ++this.index;\r\n            if (this.source[this.index] === '{') {\r\n                ++this.index;\r\n                ch = this.scanUnicodeCodePointEscape();\r\n            } else {\r\n                ch = this.scanHexEscape('u');\r\n                if (ch === null || ch === '\\\\' || !Character.isIdentifierStart(ch.charCodeAt(0))) {\r\n                    this.throwUnexpectedToken();\r\n                }\r\n            }\r\n            id = ch;\r\n        }\r\n\r\n        while (!this.eof()) {\r\n            cp = this.codePointAt(this.index);\r\n            if (!Character.isIdentifierPart(cp)) {\r\n                break;\r\n            }\r\n            ch = Character.fromCodePoint(cp);\r\n            id += ch;\r\n            this.index += ch.length;\r\n\r\n            // '\\u' (U+005C, U+0075) denotes an escaped character.\r\n            if (cp === 0x5C) {\r\n                id = id.substr(0, id.length - 1);\r\n                if (this.source.charCodeAt(this.index) !== 0x75) {\r\n                    this.throwUnexpectedToken();\r\n                }\r\n                ++this.index;\r\n                if (this.source[this.index] === '{') {\r\n                    ++this.index;\r\n                    ch = this.scanUnicodeCodePointEscape();\r\n                } else {\r\n                    ch = this.scanHexEscape('u');\r\n                    if (ch === null || ch === '\\\\' || !Character.isIdentifierPart(ch.charCodeAt(0))) {\r\n                        this.throwUnexpectedToken();\r\n                    }\r\n                }\r\n                id += ch;\r\n            }\r\n        }\r\n\r\n        return id;\r\n    }\r\n\r\n    private octalToDecimal(ch: string) {\r\n        // \\0 is not octal escape sequence\r\n        let octal = (ch !== '0');\r\n        let code = octalValue(ch);\r\n\r\n        if (!this.eof() && Character.isOctalDigit(this.source.charCodeAt(this.index))) {\r\n            octal = true;\r\n            code = code * 8 + octalValue(this.source[this.index++]);\r\n\r\n            // 3 digits are only allowed when string starts\r\n            // with 0, 1, 2, 3\r\n            if ('0123'.indexOf(ch) >= 0 && !this.eof() && Character.isOctalDigit(this.source.charCodeAt(this.index))) {\r\n                code = code * 8 + octalValue(this.source[this.index++]);\r\n            }\r\n        }\r\n\r\n        return {\r\n            code: code,\r\n            octal: octal\r\n        };\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-names-and-keywords\r\n\r\n    private scanIdentifier(): RawToken {\r\n        let type: Token;\r\n        const start = this.index;\r\n\r\n        // Backslash (U+005C) starts an escaped character.\r\n        const id = (this.source.charCodeAt(start) === 0x5C) ? this.getComplexIdentifier() : this.getIdentifier();\r\n\r\n        // There is no keyword or literal with only one character.\r\n        // Thus, it must be an identifier.\r\n        if (id.length === 1) {\r\n            type = Token.Identifier;\r\n        } else if (this.isKeyword(id)) {\r\n            type = Token.Keyword;\r\n        } else if (id === 'null') {\r\n            type = Token.NullLiteral;\r\n        } else if (id === 'true' || id === 'false') {\r\n            type = Token.BooleanLiteral;\r\n        } else {\r\n            type = Token.Identifier;\r\n        }\r\n\r\n        if (type !== Token.Identifier && (start + id.length !== this.index)) {\r\n            const restore = this.index;\r\n            this.index = start;\r\n            this.tolerateUnexpectedToken(Messages.InvalidEscapedReservedWord);\r\n            this.index = restore;\r\n        }\r\n\r\n        return {\r\n            type: type,\r\n            value: id,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-punctuators\r\n\r\n    private scanPunctuator(): RawToken {\r\n        const start = this.index;\r\n\r\n        // Check for most common single-character punctuators.\r\n        let str = this.source[this.index];\r\n        switch (str) {\r\n\r\n            case '(':\r\n            case '{':\r\n                if (str === '{') {\r\n                    this.curlyStack.push('{');\r\n                }\r\n                ++this.index;\r\n                break;\r\n\r\n            case '.':\r\n                ++this.index;\r\n                if (this.source[this.index] === '.' && this.source[this.index + 1] === '.') {\r\n                    // Spread operator: ...\r\n                    this.index += 2;\r\n                    str = '...';\r\n                }\r\n                break;\r\n\r\n            case '}':\r\n                ++this.index;\r\n                this.curlyStack.pop();\r\n                break;\r\n            case ')':\r\n            case ';':\r\n            case ',':\r\n            case '[':\r\n            case ']':\r\n            case ':':\r\n            case '?':\r\n            case '~':\r\n                ++this.index;\r\n                break;\r\n\r\n            default:\r\n                // 4-character punctuator.\r\n                str = this.source.substr(this.index, 4);\r\n                if (str === '>>>=') {\r\n                    this.index += 4;\r\n                } else {\r\n\r\n                    // 3-character punctuators.\r\n                    str = str.substr(0, 3);\r\n                    if (str === '===' || str === '!==' || str === '>>>' ||\r\n                        str === '<<=' || str === '>>=' || str === '**=') {\r\n                        this.index += 3;\r\n                    } else {\r\n\r\n                        // 2-character punctuators.\r\n                        str = str.substr(0, 2);\r\n                        if (str === '&&' || str === '||' || str === '==' || str === '!=' ||\r\n                            str === '+=' || str === '-=' || str === '*=' || str === '/=' ||\r\n                            str === '++' || str === '--' || str === '<<' || str === '>>' ||\r\n                            str === '&=' || str === '|=' || str === '^=' || str === '%=' ||\r\n                            str === '<=' || str === '>=' || str === '=>' || str === '**') {\r\n                            this.index += 2;\r\n                        } else {\r\n\r\n                            // 1-character punctuators.\r\n                            str = this.source[this.index];\r\n                            if ('<>=!+-*%&|^/'.indexOf(str) >= 0) {\r\n                                ++this.index;\r\n                            }\r\n                        }\r\n                    }\r\n                }\r\n        }\r\n\r\n        if (this.index === start) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        return {\r\n            type: Token.Punctuator,\r\n            value: str,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-literals-numeric-literals\r\n\r\n    private scanHexLiteral(start: number): RawToken {\r\n        let num = '';\r\n\r\n        while (!this.eof()) {\r\n            if (!Character.isHexDigit(this.source.charCodeAt(this.index))) {\r\n                break;\r\n            }\r\n            num += this.source[this.index++];\r\n        }\r\n\r\n        if (num.length === 0) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        if (Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        return {\r\n            type: Token.NumericLiteral,\r\n            value: parseInt('0x' + num, 16),\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n\r\n    private scanBinaryLiteral(start: number): RawToken {\r\n        let num = '';\r\n        let ch;\r\n\r\n        while (!this.eof()) {\r\n            ch = this.source[this.index];\r\n            if (ch !== '0' && ch !== '1') {\r\n                break;\r\n            }\r\n            num += this.source[this.index++];\r\n        }\r\n\r\n        if (num.length === 0) {\r\n            // only 0b or 0B\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        if (!this.eof()) {\r\n            ch = this.source.charCodeAt(this.index);\r\n            /* istanbul ignore else */\r\n            if (Character.isIdentifierStart(ch) || Character.isDecimalDigit(ch)) {\r\n                this.throwUnexpectedToken();\r\n            }\r\n        }\r\n\r\n        return {\r\n            type: Token.NumericLiteral,\r\n            value: parseInt(num, 2),\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n\r\n    private scanOctalLiteral(prefix: string, start: number): RawToken {\r\n        let num = '';\r\n        let octal = false;\r\n\r\n        if (Character.isOctalDigit(prefix.charCodeAt(0))) {\r\n            octal = true;\r\n            num = '0' + this.source[this.index++];\r\n        } else {\r\n            ++this.index;\r\n        }\r\n\r\n        while (!this.eof()) {\r\n            if (!Character.isOctalDigit(this.source.charCodeAt(this.index))) {\r\n                break;\r\n            }\r\n            num += this.source[this.index++];\r\n        }\r\n\r\n        if (!octal && num.length === 0) {\r\n            // only 0o or 0O\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        if (Character.isIdentifierStart(this.source.charCodeAt(this.index)) || Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        return {\r\n            type: Token.NumericLiteral,\r\n            value: parseInt(num, 8),\r\n            octal: octal,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n\r\n    private isImplicitOctalLiteral(): boolean {\r\n        // Implicit octal, unless there is a non-octal digit.\r\n        // (Annex B.1.1 on Numeric Literals)\r\n        for (let i = this.index + 1; i < this.length; ++i) {\r\n            const ch = this.source[i];\r\n            if (ch === '8' || ch === '9') {\r\n                return false;\r\n            }\r\n            if (!Character.isOctalDigit(ch.charCodeAt(0))) {\r\n                return true;\r\n            }\r\n        }\r\n\r\n        return true;\r\n    }\r\n\r\n    private scanNumericLiteral(): RawToken {\r\n        const start = this.index;\r\n        let ch = this.source[start];\r\n        assert(Character.isDecimalDigit(ch.charCodeAt(0)) || (ch === '.'),\r\n            'Numeric literal must start with a decimal digit or a decimal point');\r\n\r\n        let num = '';\r\n        if (ch !== '.') {\r\n            num = this.source[this.index++];\r\n            ch = this.source[this.index];\r\n\r\n            // Hex number starts with '0x'.\r\n            // Octal number starts with '0'.\r\n            // Octal number in ES6 starts with '0o'.\r\n            // Binary number in ES6 starts with '0b'.\r\n            if (num === '0') {\r\n                if (ch === 'x' || ch === 'X') {\r\n                    ++this.index;\r\n                    return this.scanHexLiteral(start);\r\n                }\r\n                if (ch === 'b' || ch === 'B') {\r\n                    ++this.index;\r\n                    return this.scanBinaryLiteral(start);\r\n                }\r\n                if (ch === 'o' || ch === 'O') {\r\n                    return this.scanOctalLiteral(ch, start);\r\n                }\r\n\r\n                if (ch && Character.isOctalDigit(ch.charCodeAt(0))) {\r\n                    if (this.isImplicitOctalLiteral()) {\r\n                        return this.scanOctalLiteral(ch, start);\r\n                    }\r\n                }\r\n            }\r\n\r\n            while (Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n                num += this.source[this.index++];\r\n            }\r\n            ch = this.source[this.index];\r\n        }\r\n\r\n        if (ch === '.') {\r\n            num += this.source[this.index++];\r\n            while (Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n                num += this.source[this.index++];\r\n            }\r\n            ch = this.source[this.index];\r\n        }\r\n\r\n        if (ch === 'e' || ch === 'E') {\r\n            num += this.source[this.index++];\r\n\r\n            ch = this.source[this.index];\r\n            if (ch === '+' || ch === '-') {\r\n                num += this.source[this.index++];\r\n            }\r\n            if (Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n                while (Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n                    num += this.source[this.index++];\r\n                }\r\n            } else {\r\n                this.throwUnexpectedToken();\r\n            }\r\n        }\r\n\r\n        if (Character.isIdentifierStart(this.source.charCodeAt(this.index))) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        return {\r\n            type: Token.NumericLiteral,\r\n            value: parseFloat(num),\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-literals-string-literals\r\n\r\n    private scanStringLiteral(): RawToken {\r\n        const start = this.index;\r\n        let quote = this.source[start];\r\n        assert((quote === '\\'' || quote === '\"'),\r\n            'String literal must starts with a quote');\r\n\r\n        ++this.index;\r\n        let octal = false;\r\n        let str = '';\r\n\r\n        while (!this.eof()) {\r\n            let ch = this.source[this.index++];\r\n\r\n            if (ch === quote) {\r\n                quote = '';\r\n                break;\r\n            } else if (ch === '\\\\') {\r\n                ch = this.source[this.index++];\r\n                if (!ch || !Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                    switch (ch) {\r\n                        case 'u':\r\n                            if (this.source[this.index] === '{') {\r\n                                ++this.index;\r\n                                str += this.scanUnicodeCodePointEscape();\r\n                            } else {\r\n                                const unescapedChar = this.scanHexEscape(ch);\r\n                                if (unescapedChar === null) {\r\n                                    this.throwUnexpectedToken();\r\n                                }\r\n                                str += unescapedChar;\r\n                            }\r\n                            break;\r\n                        case 'x':\r\n                            const unescaped = this.scanHexEscape(ch);\r\n                            if (unescaped === null) {\r\n                                this.throwUnexpectedToken(Messages.InvalidHexEscapeSequence);\r\n                            }\r\n                            str += unescaped;\r\n                            break;\r\n                        case 'n':\r\n                            str += '\\n';\r\n                            break;\r\n                        case 'r':\r\n                            str += '\\r';\r\n                            break;\r\n                        case 't':\r\n                            str += '\\t';\r\n                            break;\r\n                        case 'b':\r\n                            str += '\\b';\r\n                            break;\r\n                        case 'f':\r\n                            str += '\\f';\r\n                            break;\r\n                        case 'v':\r\n                            str += '\\x0B';\r\n                            break;\r\n                        case '8':\r\n                        case '9':\r\n                            str += ch;\r\n                            this.tolerateUnexpectedToken();\r\n                            break;\r\n\r\n                        default:\r\n                            if (ch && Character.isOctalDigit(ch.charCodeAt(0))) {\r\n                                const octToDec = this.octalToDecimal(ch);\r\n\r\n                                octal = octToDec.octal || octal;\r\n                                str += String.fromCharCode(octToDec.code);\r\n                            } else {\r\n                                str += ch;\r\n                            }\r\n                            break;\r\n                    }\r\n                } else {\r\n                    ++this.lineNumber;\r\n                    if (ch === '\\r' && this.source[this.index] === '\\n') {\r\n                        ++this.index;\r\n                    }\r\n                    this.lineStart = this.index;\r\n                }\r\n            } else if (Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                break;\r\n            } else {\r\n                str += ch;\r\n            }\r\n        }\r\n\r\n        if (quote !== '') {\r\n            this.index = start;\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        return {\r\n            type: Token.StringLiteral,\r\n            value: str,\r\n            octal: octal,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-template-literal-lexical-components\r\n\r\n    private scanTemplate(): RawToken {\r\n        let cooked = '';\r\n        let terminated = false;\r\n        const start = this.index;\r\n\r\n        const head = (this.source[start] === '`');\r\n        let tail = false;\r\n        let rawOffset = 2;\r\n\r\n        ++this.index;\r\n\r\n        while (!this.eof()) {\r\n            let ch = this.source[this.index++];\r\n            if (ch === '`') {\r\n                rawOffset = 1;\r\n                tail = true;\r\n                terminated = true;\r\n                break;\r\n            } else if (ch === '$') {\r\n                if (this.source[this.index] === '{') {\r\n                    this.curlyStack.push('${');\r\n                    ++this.index;\r\n                    terminated = true;\r\n                    break;\r\n                }\r\n                cooked += ch;\r\n            } else if (ch === '\\\\') {\r\n                ch = this.source[this.index++];\r\n                if (!Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                    switch (ch) {\r\n                        case 'n':\r\n                            cooked += '\\n';\r\n                            break;\r\n                        case 'r':\r\n                            cooked += '\\r';\r\n                            break;\r\n                        case 't':\r\n                            cooked += '\\t';\r\n                            break;\r\n                        case 'u':\r\n                            if (this.source[this.index] === '{') {\r\n                                ++this.index;\r\n                                cooked += this.scanUnicodeCodePointEscape();\r\n                            } else {\r\n                                const restore = this.index;\r\n                                const unescapedChar = this.scanHexEscape(ch);\r\n                                if (unescapedChar !== null) {\r\n                                    cooked += unescapedChar;\r\n                                } else {\r\n                                    this.index = restore;\r\n                                    cooked += ch;\r\n                                }\r\n                            }\r\n                            break;\r\n                        case 'x':\r\n                            const unescaped = this.scanHexEscape(ch);\r\n                            if (unescaped === null) {\r\n                                this.throwUnexpectedToken(Messages.InvalidHexEscapeSequence);\r\n                            }\r\n                            cooked += unescaped;\r\n                            break;\r\n                        case 'b':\r\n                            cooked += '\\b';\r\n                            break;\r\n                        case 'f':\r\n                            cooked += '\\f';\r\n                            break;\r\n                        case 'v':\r\n                            cooked += '\\v';\r\n                            break;\r\n\r\n                        default:\r\n                            if (ch === '0') {\r\n                                if (Character.isDecimalDigit(this.source.charCodeAt(this.index))) {\r\n                                    // Illegal: \\01 \\02 and so on\r\n                                    this.throwUnexpectedToken(Messages.TemplateOctalLiteral);\r\n                                }\r\n                                cooked += '\\0';\r\n                            } else if (Character.isOctalDigit(ch.charCodeAt(0))) {\r\n                                // Illegal: \\1 \\2\r\n                                this.throwUnexpectedToken(Messages.TemplateOctalLiteral);\r\n                            } else {\r\n                                cooked += ch;\r\n                            }\r\n                            break;\r\n                    }\r\n                } else {\r\n                    ++this.lineNumber;\r\n                    if (ch === '\\r' && this.source[this.index] === '\\n') {\r\n                        ++this.index;\r\n                    }\r\n                    this.lineStart = this.index;\r\n                }\r\n            } else if (Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                ++this.lineNumber;\r\n                if (ch === '\\r' && this.source[this.index] === '\\n') {\r\n                    ++this.index;\r\n                }\r\n                this.lineStart = this.index;\r\n                cooked += '\\n';\r\n            } else {\r\n                cooked += ch;\r\n            }\r\n        }\r\n\r\n        if (!terminated) {\r\n            this.throwUnexpectedToken();\r\n        }\r\n\r\n        if (!head) {\r\n            this.curlyStack.pop();\r\n        }\r\n\r\n        return {\r\n            type: Token.Template,\r\n            value: this.source.slice(start + 1, this.index - rawOffset),\r\n            cooked: cooked,\r\n            head: head,\r\n            tail: tail,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n\r\n    // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\r\n\r\n    private testRegExp(pattern: string, flags: string): RegExp | null {\r\n        // The BMP character to use as a replacement for astral symbols when\r\n        // translating an ES6 \"u\"-flagged pattern to an ES5-compatible\r\n        // approximation.\r\n        // Note: replacing with '\\uFFFF' enables false positives in unlikely\r\n        // scenarios. For example, `[\\u{1044f}-\\u{10440}]` is an invalid\r\n        // pattern that would not be detected by this substitution.\r\n        const astralSubstitute = '\\uFFFF';\r\n        let tmp = pattern;\r\n        const self = this;\r\n\r\n        if (flags.indexOf('u') >= 0) {\r\n            tmp = tmp\r\n                // Replace every Unicode escape sequence with the equivalent\r\n                // BMP character or a constant ASCII code point in the case of\r\n                // astral symbols. (See the above note on `astralSubstitute`\r\n                // for more information.)\r\n                .replace(/\\\\u\\{([0-9a-fA-F]+)\\}|\\\\u([a-fA-F0-9]{4})/g, ($0, $1, $2) => {\r\n                    const codePoint = parseInt($1 || $2, 16);\r\n                    if (codePoint > 0x10FFFF) {\r\n                        self.throwUnexpectedToken(Messages.InvalidRegExp);\r\n                    }\r\n                    if (codePoint <= 0xFFFF) {\r\n                        return String.fromCharCode(codePoint);\r\n                    }\r\n                    return astralSubstitute;\r\n                })\r\n                // Replace each paired surrogate with a single ASCII symbol to\r\n                // avoid throwing on regular expressions that are only valid in\r\n                // combination with the \"u\" flag.\r\n                .replace(\r\n                /[\\uD800-\\uDBFF][\\uDC00-\\uDFFF]/g,\r\n                astralSubstitute\r\n                );\r\n        }\r\n\r\n        // First, detect invalid regular expressions.\r\n        try {\r\n            RegExp(tmp);\r\n        } catch (e) {\r\n            this.throwUnexpectedToken(Messages.InvalidRegExp);\r\n        }\r\n\r\n        // Return a regular expression object for this pattern-flag pair, or\r\n        // `null` in case the current environment doesn't support the flags it\r\n        // uses.\r\n        try {\r\n            return new RegExp(pattern, flags);\r\n        } catch (exception) {\r\n            /* istanbul ignore next */\r\n            return null;\r\n        }\r\n    }\r\n\r\n    private scanRegExpBody(): string {\r\n        let ch = this.source[this.index];\r\n        assert(ch === '/', 'Regular expression literal must start with a slash');\r\n\r\n        let str = this.source[this.index++];\r\n        let classMarker = false;\r\n        let terminated = false;\r\n\r\n        while (!this.eof()) {\r\n            ch = this.source[this.index++];\r\n            str += ch;\r\n            if (ch === '\\\\') {\r\n                ch = this.source[this.index++];\r\n                // https://tc39.github.io/ecma262/#sec-literals-regular-expression-literals\r\n                if (Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                    this.throwUnexpectedToken(Messages.UnterminatedRegExp);\r\n                }\r\n                str += ch;\r\n            } else if (Character.isLineTerminator(ch.charCodeAt(0))) {\r\n                this.throwUnexpectedToken(Messages.UnterminatedRegExp);\r\n            } else if (classMarker) {\r\n                if (ch === ']') {\r\n                    classMarker = false;\r\n                }\r\n            } else {\r\n                if (ch === '/') {\r\n                    terminated = true;\r\n                    break;\r\n                } else if (ch === '[') {\r\n                    classMarker = true;\r\n                }\r\n            }\r\n        }\r\n\r\n        if (!terminated) {\r\n            this.throwUnexpectedToken(Messages.UnterminatedRegExp);\r\n        }\r\n\r\n        // Exclude leading and trailing slash.\r\n        return str.substr(1, str.length - 2);\r\n    }\r\n\r\n    private scanRegExpFlags(): string {\r\n        let str = '';\r\n        let flags = '';\r\n        while (!this.eof()) {\r\n            let ch = this.source[this.index];\r\n            if (!Character.isIdentifierPart(ch.charCodeAt(0))) {\r\n                break;\r\n            }\r\n\r\n            ++this.index;\r\n            if (ch === '\\\\' && !this.eof()) {\r\n                ch = this.source[this.index];\r\n                if (ch === 'u') {\r\n                    ++this.index;\r\n                    let restore = this.index;\r\n                    const char = this.scanHexEscape('u');\r\n                    if (char !== null) {\r\n                        flags += char;\r\n                        for (str += '\\\\u'; restore < this.index; ++restore) {\r\n                            str += this.source[restore];\r\n                        }\r\n                    } else {\r\n                        this.index = restore;\r\n                        flags += 'u';\r\n                        str += '\\\\u';\r\n                    }\r\n                    this.tolerateUnexpectedToken();\r\n                } else {\r\n                    str += '\\\\';\r\n                    this.tolerateUnexpectedToken();\r\n                }\r\n            } else {\r\n                flags += ch;\r\n                str += ch;\r\n            }\r\n        }\r\n\r\n        return flags;\r\n    }\r\n\r\n    public scanRegExp(): RawToken {\r\n        const start = this.index;\r\n\r\n        const pattern = this.scanRegExpBody();\r\n        const flags = this.scanRegExpFlags();\r\n        const value = this.testRegExp(pattern, flags);\r\n\r\n        return {\r\n            type: Token.RegularExpression,\r\n            value: '',\r\n            pattern: pattern,\r\n            flags: flags,\r\n            regex: value,\r\n            lineNumber: this.lineNumber,\r\n            lineStart: this.lineStart,\r\n            start: start,\r\n            end: this.index\r\n        };\r\n    }\r\n\r\n    public lex(): RawToken {\r\n        if (this.eof()) {\r\n            return {\r\n                type: Token.EOF,\r\n                value: '',\r\n                lineNumber: this.lineNumber,\r\n                lineStart: this.lineStart,\r\n                start: this.index,\r\n                end: this.index\r\n            };\r\n        }\r\n\r\n        const cp = this.source.charCodeAt(this.index);\r\n\r\n        if (Character.isIdentifierStart(cp)) {\r\n            return this.scanIdentifier();\r\n        }\r\n\r\n        // Very common: ( and ) and ;\r\n        if (cp === 0x28 || cp === 0x29 || cp === 0x3B) {\r\n            return this.scanPunctuator();\r\n        }\r\n\r\n        // String literal starts with single quote (U+0027) or double quote (U+0022).\r\n        if (cp === 0x27 || cp === 0x22) {\r\n            return this.scanStringLiteral();\r\n        }\r\n\r\n        // Dot (.) U+002E can also start a floating-point number, hence the need\r\n        // to check the next character.\r\n        if (cp === 0x2E) {\r\n            if (Character.isDecimalDigit(this.source.charCodeAt(this.index + 1))) {\r\n                return this.scanNumericLiteral();\r\n            }\r\n            return this.scanPunctuator();\r\n        }\r\n\r\n        if (Character.isDecimalDigit(cp)) {\r\n            return this.scanNumericLiteral();\r\n        }\r\n\r\n        // Template literals start with ` (U+0060) for template head\r\n        // or } (U+007D) for template middle or template tail.\r\n        if (cp === 0x60 || (cp === 0x7D && this.curlyStack[this.curlyStack.length - 1] === '${')) {\r\n            return this.scanTemplate();\r\n        }\r\n\r\n        // Possible identifier start in a surrogate pair.\r\n        if (cp >= 0xD800 && cp < 0xDFFF) {\r\n            if (Character.isIdentifierStart(this.codePointAt(this.index))) {\r\n                return this.scanIdentifier();\r\n            }\r\n        }\r\n\r\n        return this.scanPunctuator();\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/scanner.ts","// Error messages should be identical to V8.\r\nexport const Messages = {\r\n    BadImportCallArity: 'Unexpected token',\r\n    BadGetterArity: 'Getter must not have any formal parameters',\r\n    BadSetterArity: 'Setter must have exactly one formal parameter',\r\n    BadSetterRestParameter: 'Setter function argument must not be a rest parameter',\r\n    ConstructorIsAsync: 'Class constructor may not be an async method',\r\n    ConstructorSpecialMethod: 'Class constructor may not be an accessor',\r\n    DeclarationMissingInitializer: 'Missing initializer in %0 declaration',\r\n    DefaultRestParameter: 'Unexpected token =',\r\n    DefaultRestProperty: 'Unexpected token =',\r\n    DuplicateBinding: 'Duplicate binding %0',\r\n    DuplicateConstructor: 'A class may only have one constructor',\r\n    DuplicateProtoProperty: 'Duplicate __proto__ fields are not allowed in object literals',\r\n    ForInOfLoopInitializer: '%0 loop variable declaration may not have an initializer',\r\n    GeneratorInLegacyContext: 'Generator declarations are not allowed in legacy contexts',\r\n    IllegalBreak: 'Illegal break statement',\r\n    IllegalContinue: 'Illegal continue statement',\r\n    IllegalExportDeclaration: 'Unexpected token',\r\n    IllegalImportDeclaration: 'Unexpected token',\r\n    IllegalLanguageModeDirective: 'Illegal \\'use strict\\' directive in function with non-simple parameter list',\r\n    IllegalReturn: 'Illegal return statement',\r\n    InvalidEscapedReservedWord: 'Keyword must not contain escaped characters',\r\n    InvalidHexEscapeSequence: 'Invalid hexadecimal escape sequence',\r\n    InvalidLHSInAssignment: 'Invalid left-hand side in assignment',\r\n    InvalidLHSInForIn: 'Invalid left-hand side in for-in',\r\n    InvalidLHSInForLoop: 'Invalid left-hand side in for-loop',\r\n    InvalidModuleSpecifier: 'Unexpected token',\r\n    InvalidRegExp: 'Invalid regular expression',\r\n    LetInLexicalBinding: 'let is disallowed as a lexically bound name',\r\n    MissingFromClause: 'Unexpected token',\r\n    MultipleDefaultsInSwitch: 'More than one default clause in switch statement',\r\n    NewlineAfterThrow: 'Illegal newline after throw',\r\n    NoAsAfterImportNamespace: 'Unexpected token',\r\n    NoCatchOrFinally: 'Missing catch or finally after try',\r\n    ParameterAfterRestParameter: 'Rest parameter must be last formal parameter',\r\n    PropertyAfterRestProperty: 'Unexpected token',\r\n    Redeclaration: '%0 \\'%1\\' has already been declared',\r\n    StaticPrototype: 'Classes may not have static property named prototype',\r\n    StrictCatchVariable: 'Catch variable may not be eval or arguments in strict mode',\r\n    StrictDelete: 'Delete of an unqualified identifier in strict mode.',\r\n    StrictFunction: 'In strict mode code, functions can only be declared at top level or inside a block',\r\n    StrictFunctionName: 'Function name may not be eval or arguments in strict mode',\r\n    StrictLHSAssignment: 'Assignment to eval or arguments is not allowed in strict mode',\r\n    StrictLHSPostfix: 'Postfix increment/decrement may not have eval or arguments operand in strict mode',\r\n    StrictLHSPrefix: 'Prefix increment/decrement may not have eval or arguments operand in strict mode',\r\n    StrictModeWith: 'Strict mode code may not include a with statement',\r\n    StrictOctalLiteral: 'Octal literals are not allowed in strict mode.',\r\n    StrictParamDupe: 'Strict mode function may not have duplicate parameter names',\r\n    StrictParamName: 'Parameter name eval or arguments is not allowed in strict mode',\r\n    StrictReservedWord: 'Use of future reserved word in strict mode',\r\n    StrictVarName: 'Variable name may not be eval or arguments in strict mode',\r\n    TemplateOctalLiteral: 'Octal literals are not allowed in template strings.',\r\n    UnexpectedEOS: 'Unexpected end of input',\r\n    UnexpectedIdentifier: 'Unexpected identifier',\r\n    UnexpectedNumber: 'Unexpected number',\r\n    UnexpectedReserved: 'Unexpected reserved word',\r\n    UnexpectedString: 'Unexpected string',\r\n    UnexpectedTemplate: 'Unexpected quasi %0',\r\n    UnexpectedToken: 'Unexpected token %0',\r\n    UnexpectedTokenIllegal: 'Unexpected token ILLEGAL',\r\n    UnknownLabel: 'Undefined label \\'%0\\'',\r\n    UnterminatedRegExp: 'Invalid regular expression: missing /'\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/messages.ts","export const enum Token {\r\n    BooleanLiteral = 1,\r\n    EOF,\r\n    Identifier,\r\n    Keyword,\r\n    NullLiteral,\r\n    NumericLiteral,\r\n    Punctuator,\r\n    StringLiteral,\r\n    RegularExpression,\r\n    Template\r\n}\r\n\r\nexport let TokenName = {};\r\nTokenName[Token.BooleanLiteral] = 'Boolean';\r\nTokenName[Token.EOF] = '<end>';\r\nTokenName[Token.Identifier] = 'Identifier';\r\nTokenName[Token.Keyword] = 'Keyword';\r\nTokenName[Token.NullLiteral] = 'Null';\r\nTokenName[Token.NumericLiteral] = 'Numeric';\r\nTokenName[Token.Punctuator] = 'Punctuator';\r\nTokenName[Token.StringLiteral] = 'String';\r\nTokenName[Token.RegularExpression] = 'RegularExpression';\r\nTokenName[Token.Template] = 'Template';\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/token.ts","// Generated by generate-xhtml-entities.js. DO NOT MODIFY!\r\n\r\nexport const XHTMLEntities = {\r\n    quot: '\\u0022',\r\n    amp: '\\u0026',\r\n    apos: '\\u0027',\r\n    gt: '\\u003E',\r\n    nbsp: '\\u00A0',\r\n    iexcl: '\\u00A1',\r\n    cent: '\\u00A2',\r\n    pound: '\\u00A3',\r\n    curren: '\\u00A4',\r\n    yen: '\\u00A5',\r\n    brvbar: '\\u00A6',\r\n    sect: '\\u00A7',\r\n    uml: '\\u00A8',\r\n    copy: '\\u00A9',\r\n    ordf: '\\u00AA',\r\n    laquo: '\\u00AB',\r\n    not: '\\u00AC',\r\n    shy: '\\u00AD',\r\n    reg: '\\u00AE',\r\n    macr: '\\u00AF',\r\n    deg: '\\u00B0',\r\n    plusmn: '\\u00B1',\r\n    sup2: '\\u00B2',\r\n    sup3: '\\u00B3',\r\n    acute: '\\u00B4',\r\n    micro: '\\u00B5',\r\n    para: '\\u00B6',\r\n    middot: '\\u00B7',\r\n    cedil: '\\u00B8',\r\n    sup1: '\\u00B9',\r\n    ordm: '\\u00BA',\r\n    raquo: '\\u00BB',\r\n    frac14: '\\u00BC',\r\n    frac12: '\\u00BD',\r\n    frac34: '\\u00BE',\r\n    iquest: '\\u00BF',\r\n    Agrave: '\\u00C0',\r\n    Aacute: '\\u00C1',\r\n    Acirc: '\\u00C2',\r\n    Atilde: '\\u00C3',\r\n    Auml: '\\u00C4',\r\n    Aring: '\\u00C5',\r\n    AElig: '\\u00C6',\r\n    Ccedil: '\\u00C7',\r\n    Egrave: '\\u00C8',\r\n    Eacute: '\\u00C9',\r\n    Ecirc: '\\u00CA',\r\n    Euml: '\\u00CB',\r\n    Igrave: '\\u00CC',\r\n    Iacute: '\\u00CD',\r\n    Icirc: '\\u00CE',\r\n    Iuml: '\\u00CF',\r\n    ETH: '\\u00D0',\r\n    Ntilde: '\\u00D1',\r\n    Ograve: '\\u00D2',\r\n    Oacute: '\\u00D3',\r\n    Ocirc: '\\u00D4',\r\n    Otilde: '\\u00D5',\r\n    Ouml: '\\u00D6',\r\n    times: '\\u00D7',\r\n    Oslash: '\\u00D8',\r\n    Ugrave: '\\u00D9',\r\n    Uacute: '\\u00DA',\r\n    Ucirc: '\\u00DB',\r\n    Uuml: '\\u00DC',\r\n    Yacute: '\\u00DD',\r\n    THORN: '\\u00DE',\r\n    szlig: '\\u00DF',\r\n    agrave: '\\u00E0',\r\n    aacute: '\\u00E1',\r\n    acirc: '\\u00E2',\r\n    atilde: '\\u00E3',\r\n    auml: '\\u00E4',\r\n    aring: '\\u00E5',\r\n    aelig: '\\u00E6',\r\n    ccedil: '\\u00E7',\r\n    egrave: '\\u00E8',\r\n    eacute: '\\u00E9',\r\n    ecirc: '\\u00EA',\r\n    euml: '\\u00EB',\r\n    igrave: '\\u00EC',\r\n    iacute: '\\u00ED',\r\n    icirc: '\\u00EE',\r\n    iuml: '\\u00EF',\r\n    eth: '\\u00F0',\r\n    ntilde: '\\u00F1',\r\n    ograve: '\\u00F2',\r\n    oacute: '\\u00F3',\r\n    ocirc: '\\u00F4',\r\n    otilde: '\\u00F5',\r\n    ouml: '\\u00F6',\r\n    divide: '\\u00F7',\r\n    oslash: '\\u00F8',\r\n    ugrave: '\\u00F9',\r\n    uacute: '\\u00FA',\r\n    ucirc: '\\u00FB',\r\n    uuml: '\\u00FC',\r\n    yacute: '\\u00FD',\r\n    thorn: '\\u00FE',\r\n    yuml: '\\u00FF',\r\n    OElig: '\\u0152',\r\n    oelig: '\\u0153',\r\n    Scaron: '\\u0160',\r\n    scaron: '\\u0161',\r\n    Yuml: '\\u0178',\r\n    fnof: '\\u0192',\r\n    circ: '\\u02C6',\r\n    tilde: '\\u02DC',\r\n    Alpha: '\\u0391',\r\n    Beta: '\\u0392',\r\n    Gamma: '\\u0393',\r\n    Delta: '\\u0394',\r\n    Epsilon: '\\u0395',\r\n    Zeta: '\\u0396',\r\n    Eta: '\\u0397',\r\n    Theta: '\\u0398',\r\n    Iota: '\\u0399',\r\n    Kappa: '\\u039A',\r\n    Lambda: '\\u039B',\r\n    Mu: '\\u039C',\r\n    Nu: '\\u039D',\r\n    Xi: '\\u039E',\r\n    Omicron: '\\u039F',\r\n    Pi: '\\u03A0',\r\n    Rho: '\\u03A1',\r\n    Sigma: '\\u03A3',\r\n    Tau: '\\u03A4',\r\n    Upsilon: '\\u03A5',\r\n    Phi: '\\u03A6',\r\n    Chi: '\\u03A7',\r\n    Psi: '\\u03A8',\r\n    Omega: '\\u03A9',\r\n    alpha: '\\u03B1',\r\n    beta: '\\u03B2',\r\n    gamma: '\\u03B3',\r\n    delta: '\\u03B4',\r\n    epsilon: '\\u03B5',\r\n    zeta: '\\u03B6',\r\n    eta: '\\u03B7',\r\n    theta: '\\u03B8',\r\n    iota: '\\u03B9',\r\n    kappa: '\\u03BA',\r\n    lambda: '\\u03BB',\r\n    mu: '\\u03BC',\r\n    nu: '\\u03BD',\r\n    xi: '\\u03BE',\r\n    omicron: '\\u03BF',\r\n    pi: '\\u03C0',\r\n    rho: '\\u03C1',\r\n    sigmaf: '\\u03C2',\r\n    sigma: '\\u03C3',\r\n    tau: '\\u03C4',\r\n    upsilon: '\\u03C5',\r\n    phi: '\\u03C6',\r\n    chi: '\\u03C7',\r\n    psi: '\\u03C8',\r\n    omega: '\\u03C9',\r\n    thetasym: '\\u03D1',\r\n    upsih: '\\u03D2',\r\n    piv: '\\u03D6',\r\n    ensp: '\\u2002',\r\n    emsp: '\\u2003',\r\n    thinsp: '\\u2009',\r\n    zwnj: '\\u200C',\r\n    zwj: '\\u200D',\r\n    lrm: '\\u200E',\r\n    rlm: '\\u200F',\r\n    ndash: '\\u2013',\r\n    mdash: '\\u2014',\r\n    lsquo: '\\u2018',\r\n    rsquo: '\\u2019',\r\n    sbquo: '\\u201A',\r\n    ldquo: '\\u201C',\r\n    rdquo: '\\u201D',\r\n    bdquo: '\\u201E',\r\n    dagger: '\\u2020',\r\n    Dagger: '\\u2021',\r\n    bull: '\\u2022',\r\n    hellip: '\\u2026',\r\n    permil: '\\u2030',\r\n    prime: '\\u2032',\r\n    Prime: '\\u2033',\r\n    lsaquo: '\\u2039',\r\n    rsaquo: '\\u203A',\r\n    oline: '\\u203E',\r\n    frasl: '\\u2044',\r\n    euro: '\\u20AC',\r\n    image: '\\u2111',\r\n    weierp: '\\u2118',\r\n    real: '\\u211C',\r\n    trade: '\\u2122',\r\n    alefsym: '\\u2135',\r\n    larr: '\\u2190',\r\n    uarr: '\\u2191',\r\n    rarr: '\\u2192',\r\n    darr: '\\u2193',\r\n    harr: '\\u2194',\r\n    crarr: '\\u21B5',\r\n    lArr: '\\u21D0',\r\n    uArr: '\\u21D1',\r\n    rArr: '\\u21D2',\r\n    dArr: '\\u21D3',\r\n    hArr: '\\u21D4',\r\n    forall: '\\u2200',\r\n    part: '\\u2202',\r\n    exist: '\\u2203',\r\n    empty: '\\u2205',\r\n    nabla: '\\u2207',\r\n    isin: '\\u2208',\r\n    notin: '\\u2209',\r\n    ni: '\\u220B',\r\n    prod: '\\u220F',\r\n    sum: '\\u2211',\r\n    minus: '\\u2212',\r\n    lowast: '\\u2217',\r\n    radic: '\\u221A',\r\n    prop: '\\u221D',\r\n    infin: '\\u221E',\r\n    ang: '\\u2220',\r\n    and: '\\u2227',\r\n    or: '\\u2228',\r\n    cap: '\\u2229',\r\n    cup: '\\u222A',\r\n    int: '\\u222B',\r\n    there4: '\\u2234',\r\n    sim: '\\u223C',\r\n    cong: '\\u2245',\r\n    asymp: '\\u2248',\r\n    ne: '\\u2260',\r\n    equiv: '\\u2261',\r\n    le: '\\u2264',\r\n    ge: '\\u2265',\r\n    sub: '\\u2282',\r\n    sup: '\\u2283',\r\n    nsub: '\\u2284',\r\n    sube: '\\u2286',\r\n    supe: '\\u2287',\r\n    oplus: '\\u2295',\r\n    otimes: '\\u2297',\r\n    perp: '\\u22A5',\r\n    sdot: '\\u22C5',\r\n    lceil: '\\u2308',\r\n    rceil: '\\u2309',\r\n    lfloor: '\\u230A',\r\n    rfloor: '\\u230B',\r\n    loz: '\\u25CA',\r\n    spades: '\\u2660',\r\n    clubs: '\\u2663',\r\n    hearts: '\\u2665',\r\n    diams: '\\u2666',\r\n    lang: '\\u27E8',\r\n    rang: '\\u27E9'\r\n};\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/xhtml-entities.ts","import { ErrorHandler } from './error-handler';\r\nimport { Comment, RawToken, Scanner, SourceLocation } from './scanner';\r\nimport { Token, TokenName } from './token';\r\n\r\ntype ReaderEntry = string | null;\r\n\r\ninterface BufferEntry {\r\n    type: string;\r\n    value: string;\r\n    regex?: {\r\n        pattern: string;\r\n        flags: string;\r\n    };\r\n    range?: [number, number];\r\n    loc?: SourceLocation;\r\n}\r\n\r\nclass Reader {\r\n    readonly values: ReaderEntry[];\r\n    curly: number;\r\n    paren: number;\r\n\r\n    constructor() {\r\n        this.values = [];\r\n        this.curly = this.paren = -1;\r\n    }\r\n\r\n    // A function following one of those tokens is an expression.\r\n    beforeFunctionExpression(t: string): boolean {\r\n        return ['(', '{', '[', 'in', 'typeof', 'instanceof', 'new',\r\n            'return', 'case', 'delete', 'throw', 'void',\r\n            // assignment operators\r\n            '=', '+=', '-=', '*=', '**=', '/=', '%=', '<<=', '>>=', '>>>=',\r\n            '&=', '|=', '^=', ',',\r\n            // binary/unary operators\r\n            '+', '-', '*', '**', '/', '%', '++', '--', '<<', '>>', '>>>', '&',\r\n            '|', '^', '!', '~', '&&', '||', '?', ':', '===', '==', '>=',\r\n            '<=', '<', '>', '!=', '!=='].indexOf(t) >= 0;\r\n    }\r\n\r\n    // Determine if forward slash (/) is an operator or part of a regular expression\r\n    // https://github.com/mozilla/sweet.js/wiki/design\r\n    isRegexStart() {\r\n        const previous = this.values[this.values.length - 1];\r\n        let regex = (previous !== null);\r\n\r\n        switch (previous) {\r\n            case 'this':\r\n            case ']':\r\n                regex = false;\r\n                break;\r\n\r\n            case ')':\r\n                const keyword = this.values[this.paren - 1];\r\n                regex = (keyword === 'if' || keyword === 'while' || keyword === 'for' || keyword === 'with');\r\n                break;\r\n\r\n            case '}':\r\n                // Dividing a function by anything makes little sense,\r\n                // but we have to check for that.\r\n                regex = true;\r\n                if (this.values[this.curly - 3] === 'function') {\r\n                    // Anonymous function, e.g. function(){} /42\r\n                    const check = this.values[this.curly - 4];\r\n                    regex = check ? !this.beforeFunctionExpression(check) : false;\r\n                } else if (this.values[this.curly - 4] === 'function') {\r\n                    // Named function, e.g. function f(){} /42/\r\n                    const check = this.values[this.curly - 5];\r\n                    regex = check ? !this.beforeFunctionExpression(check) : true;\r\n                }\r\n                break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n        return regex;\r\n    }\r\n\r\n    push(token): void {\r\n        if (token.type === Token.Punctuator || token.type === Token.Keyword) {\r\n            if (token.value === '{') {\r\n                this.curly = this.values.length;\r\n            } else if (token.value === '(') {\r\n                this.paren = this.values.length;\r\n            }\r\n            this.values.push(token.value);\r\n        } else {\r\n            this.values.push(null);\r\n        }\r\n    }\r\n\r\n}\r\n\r\n/* tslint:disable:max-classes-per-file */\r\n\r\ninterface Config {\r\n    tolerant?: boolean;\r\n    comment?: boolean;\r\n    range?: boolean;\r\n    loc?: boolean;\r\n}\r\n\r\nexport class Tokenizer {\r\n    readonly errorHandler: ErrorHandler;\r\n    scanner: Scanner;\r\n    readonly trackRange: boolean;\r\n    readonly trackLoc: boolean;\r\n    readonly buffer: BufferEntry[];\r\n    readonly reader: Reader;\r\n\r\n    constructor(code: string, config: Config) {\r\n        this.errorHandler = new ErrorHandler();\r\n        this.errorHandler.tolerant = config ? (typeof config.tolerant === 'boolean' && config.tolerant) : false;\r\n\r\n        this.scanner = new Scanner(code, this.errorHandler);\r\n        this.scanner.trackComment = config ? (typeof config.comment === 'boolean' && config.comment) : false;\r\n\r\n        this.trackRange = config ? (typeof config.range === 'boolean' && config.range) : false;\r\n        this.trackLoc = config ? (typeof config.loc === 'boolean' && config.loc) : false;\r\n        this.buffer = [];\r\n        this.reader = new Reader();\r\n    }\r\n\r\n    errors() {\r\n        return this.errorHandler.errors;\r\n    }\r\n\r\n    getNextToken() {\r\n        if (this.buffer.length === 0) {\r\n\r\n            const comments: Comment[] = this.scanner.scanComments();\r\n            if (this.scanner.trackComment) {\r\n                for (let i = 0; i < comments.length; ++i) {\r\n                    const e: Comment = comments[i];\r\n                    const value = this.scanner.source.slice(e.slice[0], e.slice[1]);\r\n                    const comment: BufferEntry = {\r\n                        type: e.multiLine ? 'BlockComment' : 'LineComment',\r\n                        value: value\r\n                    };\r\n                    if (this.trackRange) {\r\n                        comment.range = e.range;\r\n                    }\r\n                    if (this.trackLoc) {\r\n                        comment.loc = e.loc;\r\n                    }\r\n                    this.buffer.push(comment);\r\n                }\r\n            }\r\n\r\n            if (!this.scanner.eof()) {\r\n                let loc;\r\n\r\n                if (this.trackLoc) {\r\n                    loc = {\r\n                        start: {\r\n                            line: this.scanner.lineNumber,\r\n                            column: this.scanner.index - this.scanner.lineStart\r\n                        },\r\n                        end: {}\r\n                    };\r\n                }\r\n\r\n                const maybeRegex = (this.scanner.source[this.scanner.index] === '/') && this.reader.isRegexStart();\r\n                let token: RawToken;\r\n                if (maybeRegex) {\r\n                    const state = this.scanner.saveState();\r\n                    try {\r\n                        token = this.scanner.scanRegExp();\r\n                    } catch (e) {\r\n                        this.scanner.restoreState(state);\r\n                        token = this.scanner.lex();\r\n                    }\r\n                } else {\r\n                    token = this.scanner.lex();\r\n                }\r\n\r\n                this.reader.push(token);\r\n                const entry: BufferEntry = {\r\n                    type: TokenName[token.type],\r\n                    value: this.scanner.source.slice(token.start, token.end)\r\n                };\r\n                if (this.trackRange) {\r\n                    entry.range = [token.start, token.end];\r\n                }\r\n                if (this.trackLoc) {\r\n                    loc.end = {\r\n                        line: this.scanner.lineNumber,\r\n                        column: this.scanner.index - this.scanner.lineStart\r\n                    };\r\n                    entry.loc = loc;\r\n                }\r\n                if (token.type === Token.RegularExpression) {\r\n                    const pattern = token.pattern as string;\r\n                    const flags = token.flags as string;\r\n                    entry.regex = { pattern, flags };\r\n                }\r\n\r\n                this.buffer.push(entry);\r\n            }\r\n        }\r\n\r\n        return this.buffer.shift();\r\n    }\r\n\r\n}\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/tokenizer.ts"],"sourceRoot":""}